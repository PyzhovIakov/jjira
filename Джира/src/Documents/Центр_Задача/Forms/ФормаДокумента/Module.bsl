#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ТекущийОбъект.ОписаниеЗадачи = Новый ХранилищеЗначения(ОписаниеЗадачиДокумент);
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ПараметрНаименование = Неопределено;
	Если Параметры.Свойство("НаименованиеЗадачи", ПараметрНаименование) Тогда
		Объект.Наименование = ПараметрНаименование;
	КонецЕсли;
	
	ПараметрМетки = Неопределено;
	Если Параметры.Свойство("МеткиЗадачи", ПараметрМетки) Тогда
		Для Каждого Метка Из ПараметрМетки Цикл
			НоваяМетка = Объект.Метки.Добавить();
			НоваяМетка.Метка = Метка;
		КонецЦикла;
	КонецЕсли;
	
	ЗагрузитьЦветаМеток();
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ОписаниеЗадачиДокумент = ДокОбъект.ОписаниеЗадачи.Получить();

	Центр_ОбработкаТриггеров.ТриггерПросмотрИсполнителем(ДокОбъект.Ссылка);

	Если Не ДокОбъект.ЧекЛист.Количество() Тогда
		Элементы.ГруппаЧекЛист.Скрыть();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗаполнитьПользовательскиеНастройки();
	КонецЕсли;

	ОтобразитьЧат();
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	Запрос = Новый Запрос;
    Запрос.Текст =
    "ВЫБРАТЬ
    |    Центр_ИсполнителиЗадачСрезПоследних.Исполнитель
    |ИЗ
    |    РегистрСведений.Центр_ИсполнителиЗадач.СрезПоследних(, Задача = &Задача) КАК Центр_ИсполнителиЗадачСрезПоследних";

    Запрос.УстановитьПараметр("Задача", ТекущийОбъект.Ссылка);

    РезультатЗапроса = Запрос.Выполнить();

    Выборка = РезультатЗапроса.Выбрать();

    Если Не РезультатЗапроса.Пустой() Тогда
        Если Выборка.Следующий() Тогда
            Если Исполнитель <> Выборка.Исполнитель Тогда
                МенеджерЗаписи = РегистрыСведений.Центр_ИсполнителиЗадач.СоздатьМенеджерЗаписи();
                МенеджерЗаписи.Исполнитель = Исполнитель;
                МенеджерЗаписи.Задача = ТекущийОбъект.Ссылка;
                МенеджерЗаписи.Период = ТекущаяДатаСеанса();
                МенеджерЗаписи.Записать();
            КонецЕсли;
        КонецЕсли;
    Иначе
        МенеджерЗаписи = РегистрыСведений.Центр_ИсполнителиЗадач.СоздатьМенеджерЗаписи();
        МенеджерЗаписи.Задача = ТекущийОбъект.Ссылка;
        МенеджерЗаписи.Исполнитель = Исполнитель;
        МенеджерЗаписи.Период = ТекущаяДатаСеанса();
        МенеджерЗаписи.Записать();
    КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	ОбновитьВидимостьЭлементов();
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидЗадачиПриИзменении(Элемент)
	Объект.Постановщик = Неопределено;
	ВидимостьКнопокСогласования();
КонецПроцедуры

&НаКлиенте
Процедура ПостановщикНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(Объект.ВидЗадачи) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Введите вид Задачи");
		СтандартнаяОбработка = Ложь;
		Возврат;
	Иначе
		ПостановщикНачалоВыбораНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МеткиПриИзменении(Элемент)
	ЗагрузитьЦветаМеток();
КонецПроцедуры

&НаКлиенте
Процедура КонтрольВремениПриИзменении(Элемент)
	Если Объект.КонтрольВремени Тогда
		Объект.УчетВремени = Объект.КонтрольВремени;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УчетВремени", "ТолькоПросмотр", Истина);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УчетВремени", "ТолькоПросмотр", Ложь);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура ВыбратьСвязанныеЗадачи(Команда)
	
	ПараметрыФормы = Новый Структура("ОсновнаяЗадача", Объект.Ссылка);
	ОткрытьФорму("Документ.Центр_Задача.Форма.ФормаПодбораСвязанных", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОтправитьНаСервере();
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю("Запишите документ");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВопросы(Команда)
	ПараметрыФормы = Новый Структура("ОсновнаяЗадача", Объект.Ссылка);
	ОткрытьФорму("ОбщаяФорма.ФормаСпискаВопросовПоЗадаче", ПараметрыФормы, , , , ,
				, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры 

&НаКлиенте
Процедура ОтветитьНаВопрос(Команда)
	ПараметрыФормы = Новый Структура("ОсновнаяЗадача", Объект.Ссылка);
	ОткрытьФорму("ОбщаяФорма.ФормаОтветаНаВопросПоЗадаче", ПараметрыФормы, ЭтотОбъект , , , ,
				, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура НазначитьИсполнителя(Команда)	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		НазначитьИсполнителяНаСервере();
		ОбновитьВидимостьЭлементов();
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю("Запишите документ");
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьГлавнуюЗадачу(Команда)
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ПослеВыбораГлавнойЗадачи", ЭтотОбъект);
	ОткрытьФорму("Документ.Центр_Задача.ФормаВыбора", , , , , , ОписаниеОповещенияОЗакрытии);
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьЗадачу(Команда)
	ЗакрытьЗадачуНаСервере();
	ОбновитьВидимостьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьОценку(Команда)
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Задача", Объект.Ссылка);
		Если СогласованиеИсполнителя Тогда
			ОбработкаПослеВзятияЗадачи = Новый ОписаниеОповещения("ПослеСогласованияЗадачи", ЭтотОбъект);
			ОткрытьФорму("Документ.Центр_Задача.Форма.ФормаСозданияСогласованияЗадачи", ПараметрыФормы, , , , ,
				ОбработкаПослеВзятияЗадачи, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			ОбработкаПослеВзятияЗадачи = Новый ОписаниеОповещения("ПослеСогласованияЗадачи", ЭтотОбъект);
			ОткрытьФорму("Документ.Центр_Задача.Форма.ФормаОтветаСогласования", ПараметрыФормы, , , , ,
				ОбработкаПослеВзятияЗадачи, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю("Запишите документ");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВвестиТрудозатраты(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Основание", Объект.Ссылка);
	ОткрытьФорму("Документ.Центр_ТрудозатратыПоЗадаче.ФормаОбъекта", ПараметрыФормы, , , , , , 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьЗадачу(Команда)
	ОтклонитьЗадачуНаСервере();
	ОбновитьВидимостьКнопокСвязанныхСИсполнителем();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьГлавнуюЗадачу(Команда)
	ФормаДок = ПолучитьФорму("Документ.Центр_Задача.Форма.ФормаДокументаУпрощенная");
	ДанныеФормы = ФормаДок.Объект;
	
	СоздатьГлавнуюЗадачуНаСервере(ДанныеФормы);
	ПараметрыДоп = Новый Структура("ФормаДок", ФормаДок);
	
	НовыйОповещение = Новый ОписаниеОповещения("ПослеСозданияГлавнойЗадачи", ЭтотОбъект, ПараметрыДоп);
	ФормаДок.ОписаниеОповещенияОЗакрытии = НовыйОповещение;
	
	ФормаДок.Открыть();
	
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаСервере
Процедура ОтклонитьЗадачуНаСервере()
	ТекстСообщение = "Назначенный исполнитель отказался от задачи";
	Центр_УведомленияПользователей.ОтправитьУведомлениеПользователю(Объект.Автор, ТекстСообщение, ТекущаяДатаСеанса(), ТекущаяДатаСеанса(), Перечисления.СпособыУстановкиВремениНапоминания.Периодически, 60, Объект.Ссылка);
	
	Менеджер = РегистрыСведений.Центр_ИсполнителиЗадач.СоздатьМенеджерЗаписи();
	Менеджер.Задача = Объект.Ссылка;
	Менеджер.Период = ТекущаяДатаСеанса();
	Менеджер.Записать();
	
	Исполнитель = Неопределено;
КонецПроцедуры
&НаКлиенте
Процедура ПослеСозданияГлавнойЗадачи(Результат, ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(ДополнительныеПараметры.ФормаДок.Объект.Ссылка) Тогда
		Объект.ГлавнаяЗадача = ДополнительныеПараметры.ФормаДок.Объект.Ссылка;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция СоздатьГлавнуюЗадачуНаСервере(ДанныеФормы)
	НовыйИД = Новый УникальныйИдентификатор();
	НоваяСсылка = Документы.Центр_Задача.ПолучитьСсылку(НовыйИД);
	Док = Документы.Центр_Задача.СоздатьДокумент();
	Док.УстановитьСсылкуНового(НоваяСсылка);
	СсылкаДок = Док.ПолучитьСсылкуНового();
	ЗначениеВДанныеФормы(Док, ДанныеФормы);
	Возврат  СсылкаДок; 
КонецФункции

&НаСервере
Процедура ЗагрузитьЦветаМеток()
	ОчиститьОформлениеМеток();
	
	Для Каждого Метка Из Объект.Метки Цикл
		Цвет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Метка.Метка, "ЦветRGB");
		
		Если ЗначениеЗаполнено(Цвет) Тогда
			Фон = СтрРазделить(Цвет, ",");
			
			ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	    	ЭлементОформления.Использование = Истина;
	    	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(Фон[0], Фон[1], Фон[2]));
			
			ЭлементУсловия                = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		    ЭлементУсловия.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Метки.Метка");
		    ЭлементУсловия.ПравоеЗначение = Метка.Метка;
		    ЭлементУсловия.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;   
		    ЭлементУсловия.Использование  = Истина;
		    
		    ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
		    ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Метки");
	    КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОчиститьОформлениеМеток()
	МассивКУдалению = Новый Массив;
	Для Каждого Настройка Из УсловноеОформление.Элементы Цикл
		Если Настройка.Отбор.Элементы[0].ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Метки.Метка")
			И Настройка.Отбор.Элементы[0].ВидСравнения = ВидСравненияКомпоновкиДанных.Равно
			И Настройка.Поля.Элементы[0].Поле = Новый ПолеКомпоновкиДанных("Метки")
			И Настройка.Оформление.Элементы[0].Параметр = Новый ПараметрКомпоновкиДанных("ЦветФона") Тогда
			МассивКУдалению.Добавить(Настройка);
		КонецЕсли;
	КонецЦикла;

	Для Каждого Настрйока Из МассивКУдалению Цикл
		УсловноеОформление.Элементы.Удалить(Настрйока);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПостановщикНачалоВыбораНаСервере()

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Центр_ВидыЗадач.Партнер
	|ИЗ
	|	Справочник.Центр_ВидыЗадач КАК Центр_ВидыЗадач
	|ГДЕ
	|	Центр_ВидыЗадач.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", Объект.ВидЗадачи);

	РезультатЗапроса = Запрос.Выполнить();	
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		
		Если ВыборкаДетальныеЗаписи.Партнер Тогда
			Элементы.Постановщик.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Центр_Партнеры");
		Иначе
			Элементы.Постановщик.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Пользователи");	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПользовательскиеНастройки()
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Центр_ПользовательскиеНастройки.Значение,
		|	Центр_ПользовательскиеНастройки.ВидНастройки
		|ИЗ
		|	РегистрСведений.Центр_ПользовательскиеНастройки КАК Центр_ПользовательскиеНастройки
		|ГДЕ
		|	Центр_ПользовательскиеНастройки.Пользователь = &Пользователь
		|	И
		|		Центр_ПользовательскиеНастройки.ВидНастройки.Родитель = ЗНАЧЕНИЕ(ПланВидовХарактеристик.Центр_ВидыПользовательскихНастроек.НачальноеЗаполнениеЗадачи)
		|	И НЕ Центр_ПользовательскиеНастройки.ВидНастройки.ЭтоГруппа";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователи.АвторизованныйПользователь());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл
		Если Выборка.ВидНастройки = ПредопределенноеЗначение(
			"ПланВидовХарактеристик.Центр_ВидыПользовательскихНастроек.Исполнитель") Тогда
			Исполнитель = Выборка.Значение;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#Область ВидимостьЭлементов
&НаСервере
Процедура ОбновитьВидимостьЭлементов()
	ОбновитьВидимостьКнопокСвязанныхСИсполнителем();
	ВидимостьКнопокСообщений();
	ВидимостьЗакрытьЗадачу();
	ВидимостьКнопокСогласования();
	ВидимостьКнопкиТрудозатраты();
КонецПроцедуры

&НаСервере
Процедура ВидимостьКнопкиТрудозатраты()
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВвестиТрудозатраты", "Видимость", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕстьNull(Центр_ОценкаЧасовСрезПоследних.Согласовано, Ложь) как Согласовано,
	|	Центр_ИсполнителиЗадачСрезПоследних.Исполнитель ССЫЛКА Справочник.Пользователи КАК ЭтоПользователь
	|ИЗ
	|	РегистрСведений.Центр_ОценкаЧасов.СрезПоследних(, Задача = &Задача) КАК Центр_ОценкаЧасовСрезПоследних
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.Центр_ИсполнителиЗадач.СрезПоследних(, Задача = &Задача) КАК
	|			Центр_ИсполнителиЗадачСрезПоследних
	|		ПО Центр_ИсполнителиЗадачСрезПоследних.Задача = Центр_ОценкаЧасовСрезПоследних.Задача";

	Запрос.УстановитьПараметр("Задача", Объект.Ссылка);

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();

	Если Выборка.Следующий() Тогда
		Если Объект.КонтрольВремени Тогда
			Если Выборка.Согласовано И Выборка.ЭтоПользователь Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВвестиТрудозатраты", "Видимость",
					Истина);
			КонецЕсли;
		Иначе
			Если Выборка.ЭтоПользователь Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВвестиТрудозатраты", "Видимость",
					Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВидимостьКнопокСогласования()
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УчетВремени", "ТолькоПросмотр", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СогласоватьОценку", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КонтрольВремени", "ТолькоПросмотр", Ложь);

	КонтрольВремениВидаЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидЗадачи, "КонтрольВремени");
	Если ЗначениеЗаполнено(КонтрольВремениВидаЗадачи) Тогда		
		Если КонтрольВремениВидаЗадачи Тогда
			Объект.КонтрольВремени = КонтрольВремениВидаЗадачи;
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КонтрольВремени", "ТолькоПросмотр",
				Истина);
		КонецЕсли;
	КонецЕсли;
	Если Объект.КонтрольВремени Тогда
		Объект.УчетВремени = Истина;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УчетВремени", "ТолькоПросмотр", Истина);
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Центр_ИсполнителиЗадачСрезПоследних.Исполнитель = &ТекущийПользователь КАК Исполнитель,
		|	Центр_ИсполнителиЗадачСрезПоследних.Задача КАК Задача
		|ПОМЕСТИТЬ вт_Исполнитель
		|ИЗ
		|	РегистрСведений.Центр_ИсполнителиЗадач.СрезПоследних(, Задача = &Задача) КАК Центр_ИсполнителиЗадачСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Центр_ОценкаЧасовСрезПоследних.Задача КАК Задача,
		|	Центр_ОценкаЧасовСрезПоследних.Отказ КАК Отказ,
		|	Центр_ОценкаЧасовСрезПоследних.Согласовано КАК Согласовано,
		|	Центр_ОценкаЧасовСрезПоследних.КомментарийОценки
		|ПОМЕСТИТЬ вт_Согласовании
		|ИЗ
		|	РегистрСведений.Центр_ОценкаЧасов.СрезПоследних(, Задача = &Задача) КАК Центр_ОценкаЧасовСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Центр_Задача.Автор = &ТекущийПользователь КАК ЭтоАвтор,
		|	ЕстьNull(вт_Согласовании.Отказ, Ложь) КАК Отказ,
		|	ЕстьNull(вт_Согласовании.Согласовано, Ложь) КАК Согласовано,
		|	вт_Исполнитель.Исполнитель КАК ЭтоИсполнитель,
		|	вт_Согласовании.КомментарийОценки
		|ИЗ
		|	Документ.Центр_Задача КАК Центр_Задача
		|		ЛЕВОЕ СОЕДИНЕНИЕ вт_Исполнитель КАК вт_Исполнитель
		|		ПО Центр_Задача.Ссылка = вт_Исполнитель.Задача
		|		ЛЕВОЕ СОЕДИНЕНИЕ вт_Согласовании КАК вт_Согласовании
		|		ПО Центр_Задача.Ссылка = вт_Согласовании.Задача
		|ГДЕ
		|	Центр_Задача.Ссылка = &Задача";

		Запрос.УстановитьПараметр("Задача", Объект.Ссылка);
		Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.АвторизованныйПользователь());
		РезультатЗапроса = Запрос.Выполнить();

		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.ЭтоАвтор Тогда
				Если ЗначениеЗаполнено(Выборка.КомментарийОценки) И Не Выборка.Отказ И Не Выборка.Согласовано Тогда
					СогласованиеИсполнителя = Ложь;
					ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СогласоватьОценку",
						"Видимость", Истина);
				КонецЕсли;
			КонецЕсли;
			Если Выборка.ЭтоИсполнитель Тогда
				Если Не ЗначениеЗаполнено(Выборка.КомментарийОценки) Или Выборка.Отказ Тогда
					СогласованиеИсполнителя = Истина;
					ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СогласоватьОценку",
						"Видимость", Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СогласоватьОценку", "Видимость", Ложь);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьКнопокСвязанныхСИсполнителем()
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Центр_ИсполнителиЗадачСрезПоследних.Исполнитель КАК Исполнитель
	|ПОМЕСТИТЬ вт_Исполнитель
	|ИЗ
	|	РегистрСведений.Центр_ИсполнителиЗадач.СрезПоследних(, Задача = &Задача) КАК Центр_ИсполнителиЗадачСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Центр_ГруппыДоступаКЗадачам.Руководитель = &ТекущийПользователь
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоРуководитель,
	|	ВЫБОР
	|		КОГДА Центр_ГруппыДоступаКЗадачамПользователи.Пользователь ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЭтоПользовательГруппы,
	|	вт_Исполнитель.Исполнитель КАК Исполнитель,
	|	вт_Исполнитель.Исполнитель ССЫЛКА Справочник.Центр_ГруппыДоступаКЗадачам КАК ЭтоГруппа,
	|	ВЫБОР
	|		КОГДА вт_Исполнитель.Исполнитель = &ТекущийПользователь
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоТекПользователь
	|ИЗ
	|	вт_Исполнитель КАК вт_Исполнитель
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Центр_ГруппыДоступаКЗадачам КАК Центр_ГруппыДоступаКЗадачам
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Центр_ГруппыДоступаКЗадачам.Пользователи КАК Центр_ГруппыДоступаКЗадачамПользователи
	|			ПО Центр_ГруппыДоступаКЗадачам.Ссылка = Центр_ГруппыДоступаКЗадачамПользователи.Ссылка
	|			И Центр_ГруппыДоступаКЗадачамПользователи.Пользователь = &ТекущийПользователь
	|		ПО вт_Исполнитель.Исполнитель = Центр_ГруппыДоступаКЗадачам.Ссылка";

	Запрос.УстановитьПараметр("Задача", Объект.Ссылка);
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.АвторизованныйПользователь());

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НазначитьИсполнителя", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтклонитьЗадачу", "Видимость", Ложь);
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.Исполнитель) Тогда
			Исполнитель = Выборка.Исполнитель;
		КонецЕсли;
		Если Выборка.ЭтоГруппа И Выборка.ЭтоРуководитель Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НазначитьИсполнителя", "Видимость",
				Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтклонитьЗадачу", "Видимость",
				Истина);
		КонецЕсли;
		Если Выборка.ЭтоГруппа И Выборка.ЭтоПользовательГруппы Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НазначитьИсполнителя", "Видимость",
				Истина);
		КонецЕсли;

		Если Выборка.ЭтоТекПользователь Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтклонитьЗадачу", "Видимость",
				Истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВидимостьЗакрытьЗадачу()
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Центр_СтатусыЗадачСрезПоследних.Статус
	|ПОМЕСТИТЬ вт_ТекСтатус
	|ИЗ
	|	РегистрСведений.Центр_СтатусыЗадач.СрезПоследних(, Задача = &Задача) КАК Центр_СтатусыЗадачСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Центр_ТриггерыПереходыСтатусов.СтатусЗавершения
	|ИЗ
	|	вт_ТекСтатус КАК вт_ТекСтатус
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Центр_Триггеры.ПереходыСтатусов КАК Центр_ТриггерыПереходыСтатусов
	|		ПО Центр_ТриггерыПереходыСтатусов.СтатусСрабатывания = вт_ТекСтатус.Статус
	|		И Центр_ТриггерыПереходыСтатусов.Ссылка = &Триггер";

	Запрос.УстановитьПараметр("Задача", Объект.Ссылка);
	Запрос.УстановитьПараметр("Триггер", ПредопределенноеЗначение("Справочник.Центр_Триггеры.ЗакрытиеЗадачи"));

	РезультатЗапроса = Запрос.Выполнить();
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗакрытьЗадачу", "Видимость", Ложь);
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Следующий() Тогда
			Если ЗначениеЗаполнено(Выборка.СтатусЗавершения) Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗакрытьЗадачу", "Видимость", Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВидимостьКнопокСообщений()
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОткрытьВопросы", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтветитьНаВопрос", "Видимость", Ложь);
	КонецЕсли;	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|		КОГДА Центр_ВопросыПоЗадачам.ТекстВопроса ЕСТЬ NULL
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ) КАК КоличествоВопросов
		|ПОМЕСТИТЬ вт_Вопросы
		|ИЗ
		|	РегистрСведений.Центр_ВопросыПоЗадачам КАК Центр_ВопросыПоЗадачам
		|ГДЕ
		|	Центр_ВопросыПоЗадачам.Задача = &Задача
		|	И Центр_ВопросыПоЗадачам.Адресат = &Адресат
		|	И Центр_ВопросыПоЗадачам.ВидВопроса = ЗНАЧЕНИЕ(Перечисление.Центр_ВидыВопросов.Вопрос)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|		КОГДА Центр_ВопросыПоЗадачам.ТекстВопроса ЕСТЬ NULL
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ) КАК КоличествоОтветов
		|ПОМЕСТИТЬ вт_Ответы
		|ИЗ
		|	РегистрСведений.Центр_ВопросыПоЗадачам КАК Центр_ВопросыПоЗадачам
		|ГДЕ
		|	Центр_ВопросыПоЗадачам.Задача = &Задача
		|	И Центр_ВопросыПоЗадачам.ВидВопроса = ЗНАЧЕНИЕ(Перечисление.Центр_ВидыВопросов.Ответ)
		|	И Центр_ВопросыПоЗадачам.Отправитель = &Отправитель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(вт_Вопросы.КоличествоВопросов, 0) КАК КоличествоВопросов,
		|	ЕСТЬNULL(вт_Ответы.КоличествоОтветов, 0) КАК КоличествоОтветов
		|ИЗ
		|	вт_Вопросы КАК вт_Вопросы,
		|	вт_Ответы КАК вт_Ответы";
	
	Запрос.УстановитьПараметр("Задача", Объект.Ссылка);
	Запрос.УстановитьПараметр("Адресат", Пользователи.АвторизованныйПользователь());
	Запрос.УстановитьПараметр("Отправитель", Пользователи.АвторизованныйПользователь());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() И Выборка.КоличествоВопросов <> Выборка.КоличествоОтветов Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтветитьНаВопрос", "Видимость", Истина);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтветитьНаВопрос", "Видимость", Ложь);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

&НаСервере
Процедура НазначитьИсполнителяНаСервере() 
	МенеджерЗаписи = РегистрыСведений.Центр_ИсполнителиЗадач.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Задача = Объект.Ссылка;
	МенеджерЗаписи.Исполнитель  = Пользователи.АвторизованныйПользователь();
	МенеджерЗаписи.Период = ТекущаяДатаСеанса();
	МенеджерЗаписи.Записать();
КонецПроцедуры

&НаСервере
Процедура ЗакрытьЗадачуНаСервере()
	Центр_ОбработкаТриггеров.ТриггерЗакрытиеЗадачи(Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСогласованияЗадачи(Результат, ДополнительныеПараметры) Экспорт
	ОбновитьВидимостьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораГлавнойЗадачи(Результат, ДополнительныеПараметры) Экспорт
	Объект.ГлавнаяЗадача = Результат;
КонецПроцедуры

&НаКлиенте 
Процедура ПослеОтветаНаВопрос() Экспорт
	ОбновитьВидимостьЭлементов();
КонецПроцедуры

#Область Чат
&НаСервере
Процедура ОтправитьНаСервере()
	МенеджерЗаписи = РегистрыСведений.Центр_КомментарииЗадач.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Автор = Пользователи.АвторизованныйПользователь();
	МенеджерЗаписи.Задача = Объект.Ссылка;
	МенеджерЗаписи.Комментарий = Новый ХранилищеЗначения(Комментарий);
	МенеджерЗаписи.Период = ТекущаяДатаСеанса();
	
	МенеджерЗаписи.Записать();

	Комментарий.Удалить();
	ОтобразитьЧат();
КонецПроцедуры

&НаСервере
Процедура ОтобразитьЧат()
	Если КоличествоКомментариев > 0 Тогда
		Для к = 1 По КоличествоКомментариев Цикл
			Центр_ЭлементыФормы.УдлРеквизитИЭлемент(ЭтотОбъект, "Комментарий" + к);
		КонецЦикла;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Центр_КомментарииЗадач.Автор,
	|	Центр_КомментарииЗадач.Комментарий,
	|	Центр_КомментарииЗадач.Период КАК Период
	|ИЗ
	|	РегистрСведений.Центр_КомментарииЗадач КАК Центр_КомментарииЗадач
	|ГДЕ
	|	Центр_КомментарииЗадач.Задача = &Задача
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ";

	Запрос.УстановитьПараметр("Задача", Объект.Ссылка);

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();

	КоличествоКомментариев = Выборка.Количество();

	Индекс = 1;

	ТекущийПользователь = Пользователи.АвторизованныйПользователь();

	Пока Выборка.Следующий() Цикл
		Центр_ЭлементыФормы.СоздатьРеквизит(ЭтотОбъект, "Комментарий" + Индекс,
			Новый ОписаниеТипов("ФорматированныйДокумент"));

		СтруктураСвойств = Новый структура;
		СтруктураСвойств.Вставить("ТолькоПросмотр", Истина);
		СтруктураСвойств.Вставить("Высота", 5);
		СтруктураСвойств.Вставить("Ширина", 70);
		СтруктураСвойств.Вставить("РастягиватьПоГоризонтали", Ложь);
		Если Выборка.Автор = ТекущийПользователь Тогда
			СтруктураСвойств.Вставить("ГоризонтальноеПоложениеВГруппе", ГоризонтальноеПоложениеЭлемента.Право);
		Иначе
			СтруктураСвойств.Вставить("ГоризонтальноеПоложениеВГруппе", ГоризонтальноеПоложениеЭлемента.Лево);
		КонецЕсли;
		ЗаголовокКомментария = Строка(Выборка.Автор) + " " + Выборка.Период;
		Центр_ЭлементыФормы.СздПоле(ЭтотОбъект, "Комментарий" + Индекс, Элементы.Комментарии, ЗаголовокКомментария, ,
			"Комментарий" + Индекс, СтруктураСвойств);
		ЭтотОбъект["Комментарий" + Индекс] = Выборка.Комментарий.Получить();
		Индекс = Индекс + 1;
	КонецЦикла;

КонецПроцедуры
#КонецОбласти

#КонецОбласти