#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ТекущийОбъект.ОписаниеЗадачи = Новый ХранилищеЗначения(ОписаниеЗадачиДокумент);
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ОтобразитьИерархиюЗадач();
	
	ПараметрНаименование = Неопределено;
	Если Параметры.Свойство("НаименованиеЗадачи", ПараметрНаименование) Тогда
		Объект.Наименование = ПараметрНаименование;
	КонецЕсли;
	
	ПараметрГлавная = Неопределено;
	Если Параметры.Свойство("ГлавнаяЗадача", ПараметрГлавная) Тогда
		Объект.ГлавнаяЗадача = ПараметрГлавная;
	КонецЕсли;
	
	ПараметрИсточникПараметров = Неопределено;
	Если Параметры.Свойство("ИсточникПараметров", ПараметрИсточникПараметров) Тогда
		ЗаполнитьНаследуемыеПараметры(ПараметрИсточникПараметров);
	КонецЕсли;
	
	ПараметрМетки = Неопределено;
	Если Параметры.Свойство("МеткиЗадачи", ПараметрМетки) Тогда
		Для Каждого Метка Из ПараметрМетки Цикл
			НоваяМетка = Объект.Метки.Добавить();
			НоваяМетка.Метка = Метка;
		КонецЦикла;
	КонецЕсли;
	
	ЗагрузитьЦветаМеток();
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ОписаниеЗадачиДокумент = ДокОбъект.ОписаниеЗадачи.Получить();

	Центр_ОбработкаТриггеров.ТриггерПросмотрИсполнителем(ДокОбъект.Ссылка);

	Если Не ДокОбъект.ЧекЛист.Количество() Тогда
		Элементы.ГруппаЧекЛист.Скрыть();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗаполнитьПользовательскиеНастройки();
	КонецЕсли;
	

	ОтобразитьЧат();
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	Запрос = Новый Запрос;
    Запрос.Текст =
    "ВЫБРАТЬ
    |    Центр_ИсполнителиЗадачСрезПоследних.Исполнитель
    |ИЗ
    |    РегистрСведений.Центр_ИсполнителиЗадач.СрезПоследних(, Задача = &Задача) КАК Центр_ИсполнителиЗадачСрезПоследних";

    Запрос.УстановитьПараметр("Задача", ТекущийОбъект.Ссылка);

    РезультатЗапроса = Запрос.Выполнить();

    Выборка = РезультатЗапроса.Выбрать();

    Если Не РезультатЗапроса.Пустой() Тогда
        Если Выборка.Следующий() Тогда
            Если Исполнитель <> Выборка.Исполнитель Тогда
                МенеджерЗаписи = РегистрыСведений.Центр_ИсполнителиЗадач.СоздатьМенеджерЗаписи();
                МенеджерЗаписи.Исполнитель = Исполнитель;
                МенеджерЗаписи.Задача = ТекущийОбъект.Ссылка;
                МенеджерЗаписи.Период = ТекущаяДатаСеанса();
                МенеджерЗаписи.Записать();
            КонецЕсли;
        КонецЕсли;
    Иначе
        МенеджерЗаписи = РегистрыСведений.Центр_ИсполнителиЗадач.СоздатьМенеджерЗаписи();
        МенеджерЗаписи.Задача = ТекущийОбъект.Ссылка;
        МенеджерЗаписи.Исполнитель = Исполнитель;
        МенеджерЗаписи.Период = ТекущаяДатаСеанса();
        МенеджерЗаписи.Записать();
    КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	ОбновитьВидимостьЭлементов();
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидЗадачиПриИзменении(Элемент)
	Объект.Постановщик = Неопределено;
	Объект.ГлавныйМенеджер = Неопределено;
	ВидимостьКнопокСогласования();
КонецПроцедуры

&НаКлиенте
Процедура ПостановщикНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(Объект.ВидЗадачи) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Введите вид Задачи");
		СтандартнаяОбработка = Ложь;
		Возврат;
	Иначе
		ПостановщикНачалоВыбораНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МеткиПриИзменении(Элемент)
	ЗагрузитьЦветаМеток();
КонецПроцедуры

&НаКлиенте
Процедура КонтрольВремениПриИзменении(Элемент)
	Если Объект.КонтрольВремени Тогда
		Объект.УчетВремени = Объект.КонтрольВремени;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УчетВремени", "ТолькоПросмотр", Истина);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УчетВремени", "ТолькоПросмотр", Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПостановщикПриИзменении(Элемент)
	ПостановщикПриИзмененииНаСервере();
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура ВыбратьСвязанныеЗадачи(Команда)
	
	ПараметрыФормы = Новый Структура("ОсновнаяЗадача", Объект.Ссылка);
	ОткрытьФорму("Документ.Центр_Задача.Форма.ФормаПодбораСвязанных", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОтправитьНаСервере();
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю("Запишите документ");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВопросы(Команда)
	ПараметрыФормы = Новый Структура("ОсновнаяЗадача", Объект.Ссылка);
	ОткрытьФорму("ОбщаяФорма.ФормаСпискаВопросовПоЗадаче", ПараметрыФормы, , , , ,
				, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры 

&НаКлиенте
Процедура ОтветитьНаВопрос(Команда)
	ПараметрыФормы = Новый Структура("ОсновнаяЗадача", Объект.Ссылка);
	ОткрытьФорму("ОбщаяФорма.ФормаОтветаНаВопросПоЗадаче", ПараметрыФормы, ЭтотОбъект , , , ,
				, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура НазначитьИсполнителя(Команда)	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		НазначитьИсполнителяНаСервере();
		ОбновитьВидимостьЭлементов();
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю("Запишите документ");
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьГлавнуюЗадачу(Команда)
	ОписаниеОповещенияОЗакрытииФормыВыбора = Новый ОписаниеОповещения("ПослеВыбораГлавнойЗадачи", ЭтотОбъект);
	СписокЗапрещенных = СписокПодчиненных();
	СписокЗапрещенных.Добавить(Объект.ГлавнаяЗадача);
	ПараметрыФормы = Новый Структура("СписокЗапрещенных", СписокЗапрещенных);
	ОткрытьФорму("Документ.Центр_Задача.ФормаВыбора", ПараметрыФормы, , , , , ОписаниеОповещенияОЗакрытииФормыВыбора);
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьЗадачу(Команда)
	ЗакрытьЗадачуНаСервере();
	ОбновитьВидимостьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьОценку(Команда)
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Задача", Объект.Ссылка);
		Если СогласованиеИсполнителя Тогда
			ОбработкаПослеВзятияЗадачи = Новый ОписаниеОповещения("ПослеСогласованияЗадачи", ЭтотОбъект);
			ОткрытьФорму("Документ.Центр_Задача.Форма.ФормаСозданияСогласованияЗадачи", ПараметрыФормы, , , , ,
				ОбработкаПослеВзятияЗадачи, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			ОбработкаПослеВзятияЗадачи = Новый ОписаниеОповещения("ПослеСогласованияЗадачи", ЭтотОбъект);
			ОткрытьФорму("Документ.Центр_Задача.Форма.ФормаОтветаСогласования", ПараметрыФормы, , , , ,
				ОбработкаПослеВзятияЗадачи, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю("Запишите документ");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВвестиТрудозатраты(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Основание", Объект.Ссылка);
	ОткрытьФорму("Документ.Центр_ТрудозатратыПоЗадаче.ФормаОбъекта", ПараметрыФормы, , , , , , 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьЗадачу(Команда)
	ОтклонитьЗадачуНаСервере();
	ОбновитьВидимостьКнопокСвязанныхСИсполнителем();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьГлавнуюЗадачу(Команда)
	ПараметрыФормы = Новый Структура("ИсточникПараметров", Объект.Ссылка);
	
	ФормаДок = ПолучитьФорму("Документ.Центр_Задача.Форма.ФормаДокументаУпрощенная", ПараметрыФормы);
	ДанныеФормы = ФормаДок.Объект;
	
	СоздатьГлавнуюЗадачуНаСервере(ДанныеФормы);
	ПараметрыДоп = Новый Структура("ФормаДок", ФормаДок);
	
	НовыйОповещение = Новый ОписаниеОповещения("ПослеСозданияГлавнойЗадачи", ЭтотОбъект, ПараметрыДоп);
	ФормаДок.ОписаниеОповещенияОЗакрытии = НовыйОповещение;
	
	ФормаДок.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПодчиненнуюЗадачу(Команда)
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Запишите задачу";
		Сообщение.Сообщить();
	Иначе
		ПараметрыФормы = Новый Структура("ГлавнаяЗадача,ИсточникПараметров", Объект.Ссылка, Объект.Ссылка);
		НовыйОповещение = Новый ОписаниеОповещения("ПослеСозданияПодчиненнойЗадачи", ЭтотОбъект);
		
		ОткрытьФорму("Документ.Центр_Задача.Форма.ФормаДокументаУпрощенная", ПараметрыФормы,,,,, НовыйОповещение);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаСервере
Процедура ЗаполнитьНаследуемыеПараметры(Источник)
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Центр_Задача.ВидЗадачи,
		|	Центр_Задача.Постановщик,
		|	Центр_Задача.УчетВремени,
		|	Центр_Задача.КонтрольВремени,
		|	Центр_Задача.Приоритет,
		|	Центр_Задача.ГлавныйМенеджер
		|ИЗ
		|	Документ.Центр_Задача КАК Центр_Задача
		|ГДЕ
		|	Центр_Задача.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Центр_ЗадачаНаблюдатели.Пользовалель
		|ИЗ
		|	Документ.Центр_Задача.Наблюдатели КАК Центр_ЗадачаНаблюдатели
		|ГДЕ
		|	Центр_ЗадачаНаблюдатели.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Источник);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаОсновныеПараметры = РезультатЗапроса[0].Выбрать();
	Если ВыборкаОсновныеПараметры.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Объект, ВыборкаОсновныеПараметры);
	КонецЕсли;
	
	ВыборкаНаблюдатели = РезультатЗапроса[1].Выбрать();
	Пока ВыборкаНаблюдатели.Следующий() Цикл
		НоваяСтрокаНаблюдателей = Объект.Наблюдатели.Добавить();
		НоваяСтрокаНаблюдателей.Пользовалель = ВыборкаНаблюдатели.Пользователи;
	КонецЦикла;
КонецПроцедуры	
	
#Область СхемаПодчиненности
&НаСервере 
Функция СписокПодчиненных() 
	ПодчиненныеЗадачи = Новый Массив;
	
	ДеревоПодчиненных = РеквизитФормыВЗначение("ДеревоПодчиненныхЗадач");
	ПараметрыОтбораПоиска = Новый Структура("Ссылка", Объект.Ссылка);
	Строки = ДеревоПодчиненных.Строки.НайтиСтроки(ПараметрыОтбораПоиска, Истина);
	
	ЗаполнитьСписокПодчиненныхРекурсивно(Строки, ПодчиненныеЗадачи);

	Возврат ПодчиненныеЗадачи;
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокПодчиненныхРекурсивно(СтрокиДерева, Список)
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Список.Добавить(СтрокаДерева.Ссылка);
		ЗаполнитьСписокПодчиненныхРекурсивно(СтрокаДерева.Строки, Список);
	КонецЦикла; 
КонецПроцедуры

&НаСервере
Процедура ОтобразитьИерархиюЗадач()
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Элементы.ТаблицаПодчиненности.Видимость = Ложь;
	Иначе
		Элементы.ТаблицаПодчиненности.Видимость = Истина;
		
		СформироватьДеревоДокументов();
		ЗаполнитьСхему();
	КонецЕсли;	
КонецПроцедуры
	
&НаСервере
Процедура СформироватьДеревоДокументов()
	ДеревоПодчиненныхЗадач.ПолучитьЭлементы().Очистить();
	
	КореньЦепочки = ВерхнийУзелИерархии(Объект.Ссылка);
	
	НоваяСтрока = ДеревоПодчиненныхЗадач.ПолучитьЭлементы().Добавить();
	НоваяСтрока.Ссылка = КореньЦепочки;
	НоваяСтрока.Представление = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КореньЦепочки, "Наименование");
	НоваяСтрока.Проведен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КореньЦепочки, "Проведен");
	НоваяСтрока.ПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КореньЦепочки, "ПометкаУдаления");
	
	ВывестиПодчиненныеОбъекты(КореньЦепочки, НоваяСтрока);
КонецПроцедуры

&НаСервере
Функция ВерхнийУзелИерархии(ЗНАЧ ОбъектНачала)
	Вышестоящая = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектНачала, "ГлавнаяЗадача");
	Пока ЗначениеЗаполнено(Вышестоящая) Цикл
		ОбъектНачала = Вышестоящая;
		Вышестоящая = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектНачала, "ГлавнаяЗадача");
	КонецЦикла;
	
	Возврат ОбъектНачала;
КонецФункции

&НаСервере
Процедура ВывестиПодчиненныеОбъекты(ОбъектНачала, ДеревоПодчиненных)
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Центр_Задача.Ссылка,
		|	Центр_Задача.Проведен,
		|	Центр_Задача.ПометкаУдаления,
		|	Центр_Задача.Наименование КАК Представление
		|ИЗ
		|	Документ.Центр_Задача КАК Центр_Задача
		|ГДЕ
		|	Центр_Задача.ГлавнаяЗадача = &ГлавнаяЗадача";
	
	Запрос.УстановитьПараметр("ГлавнаяЗадача", ОбъектНачала);
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ДеревоПодчиненных.ПолучитьЭлементы().Добавить();
		НоваяСтрока.Ссылка = Выборка.Ссылка;
		НоваяСтрока.Проведен = Выборка.Проведен;
		НоваяСтрока.ПометкаУдаления = Выборка.ПометкаУдаления;
		НоваяСтрока.Представление = Выборка.Представление;
	
		//@skip-check query-in-loop
		ВывестиПодчиненныеОбъекты(Выборка.Ссылка, НоваяСтрока);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСхему()
	ТаблицаПодчиненности.Очистить();
	
	Макет = ПолучитьОбщийМакет("СтруктураПодчиненности");
	
	ВывестиПодчиненныеЭлементыДерева(ДеревоПодчиненныхЗадач.ПолучитьЭлементы(), Макет);
КонецПроцедуры

&НаСервере
Процедура ВывестиПодчиненныеЭлементыДерева(СтрокиДерева, Макет, УровниРекурсии = 1)
	Для каждого СтрокаДерева Из СтрокиДерева Цикл
		ЭтоИсходныйОбъект = (СтрокаДерева.Ссылка = Объект.Ссылка);
		ПодчиненныеЭлементыДерева = СтрокаДерева.ПолучитьЭлементы();
		
		// Вывод коннекторов
		Для Уровень = 1 По УровниРекурсии Цикл
			Если УровниРекурсии > Уровень Тогда
				Если ВыводитьВертикальныйКоннектор(УровниРекурсии - Уровень + 1, СтрокаДерева) Тогда
					Область = Макет.ПолучитьОбласть("КоннекторВерхНиз");
				Иначе
					Область = Макет.ПолучитьОбласть("Отступ");
				КонецЕсли;
			Иначе 
				Если СтрокиДерева.Количество() > 1 И (СтрокиДерева.Индекс(СтрокаДерева) <> (СтрокиДерева.Количество() - 1)) Тогда
					Область = Макет.ПолучитьОбласть("КоннекторВерхПравоНиз");
				Иначе
					Область = Макет.ПолучитьОбласть("КоннекторВерхПраво");
				КонецЕсли;	
			КонецЕсли;
			
			// Область.Параметры.Документ = ?(ЭтоИсходныйОбъект, Неопределено, СтрокаДерева.Ссылка);
			Область.Параметры.Документ = СтрокаДерева.Ссылка;
			
			Если Уровень = 1 Тогда
				ТаблицаПодчиненности.Вывести(Область);
			Иначе
				ТаблицаПодчиненности.Присоединить(Область);
			КонецЕсли;
		КонецЦикла;
		
		ВывестиПредставлениеИКартинку(СтрокаДерева, Макет, Ложь, Истина);		
		ВывестиПодчиненныеЭлементыДерева(ПодчиненныеЭлементыДерева, Макет, УровниРекурсии + 1);	
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ВыводитьВертикальныйКоннектор(УровеньВверх, СтрокаДерева)
	ТекущаяСтрока = СтрокаДерева;
	
	Для инд = 1 По УровеньВверх Цикл	
		ТекущаяСтрока = ТекущаяСтрока.ПолучитьРодителя();
		Если инд = УровеньВверх Тогда
			ИскомыйРодитель = ТекущаяСтрока;
		ИначеЕсли инд = (УровеньВверх-1) Тогда
			ИскомаяСтрока = ТекущаяСтрока;
		КонецЕсли;	
	КонецЦикла;
	
	Если ИскомыйРодитель = Неопределено Тогда
		ПодчиненныеЭлементыРодителя =  ДеревоПодчиненныхЗадач.ПолучитьЭлементы(); 
	Иначе
		ПодчиненныеЭлементыРодителя =  ИскомыйРодитель.ПолучитьЭлементы(); 
	КонецЕсли;
	
	Возврат ПодчиненныеЭлементыРодителя.Индекс(ИскомаяСтрока) < (ПодчиненныеЭлементыРодителя.Количество()-1);
КонецФункции

&НаСервере
Процедура ВывестиПредставлениеИКартинку(СтрокаДерева, Макет, ЭтоТекущийОбъект = Ложь, ЭтоПодчиненный = Неопределено)
	
	МетаданныеОбъекта = СтрокаДерева.Ссылка.Метаданные();
	ЭтоДокумент       = ОбщегоНазначения.ЭтоДокумент(МетаданныеОбъекта);
	
	ЕстьПодчиненныеСуммарно = ДеревоПодчиненныхЗадач.ПолучитьЭлементы().Количество() > 0;
	ЕстьПодчиненные = ТипЗнч(СтрокаДерева) = Тип("ДанныеФормыЭлементДерева")
		И СтрокаДерева.ПолучитьЭлементы().Количество() > 0;
	
	// Вывод картинки
	Если СтрокаДерева.Проведен Тогда
		Если ЭтоТекущийОбъект Тогда
			Если ЕстьПодчиненныеСуммарно Тогда
				ОбластьКартинка = Макет.ПолучитьОбласть("ДокументПроведенКоннекторНиз");
			КонецЕсли;
		ИначеЕсли ЭтоПодчиненный = Истина Тогда
			Если ЕстьПодчиненные Тогда
				ОбластьКартинка = Макет.ПолучитьОбласть("ДокументПроведенКоннекторЛевоНиз");
			Иначе
				ОбластьКартинка = Макет.ПолучитьОбласть("ДокументПроведен");
			КонецЕсли;
		Иначе
			Если ЕстьПодчиненные Тогда
				ОбластьКартинка = Макет.ПолучитьОбласть("ДокументПроведенКоннекторЛевоВерх");
			Иначе
				ОбластьКартинка = Макет.ПолучитьОбласть("ДокументПроведен");
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли СтрокаДерева.ПометкаУдаления Тогда
		Если ЭтоТекущийОбъект Тогда
			Если ЕстьПодчиненныеСуммарно Тогда
				ИмяОбласти = ?(ЭтоДокумент, "ДокументПомеченНаУдалениеКоннекторНиз", "СправочникПВХПомеченНаУдалениеКоннекторНиз");
				ОбластьКартинка = Макет.ПолучитьОбласть(ИмяОбласти);
			КонецЕсли;
		ИначеЕсли ЭтоПодчиненный = Истина Тогда
			Если ЕстьПодчиненные Тогда
				ИмяОбласти = ?(ЭтоДокумент, "ДокументПомеченНаУдалениеКоннекторЛевоНиз", "СправочникПВХПомеченНаУдалениеКоннекторЛевоНиз");
				ОбластьКартинка = Макет.ПолучитьОбласть(ИмяОбласти);
			Иначе
				ИмяОбласти = ?(ЭтоДокумент, "ДокументПомеченНаУдаление", "СправочникПВХПомеченНаУдалениеКоннекторЛево");
				ОбластьКартинка = Макет.ПолучитьОбласть(ИмяОбласти);
			КонецЕсли;
		Иначе
			Если ЕстьПодчиненные Тогда
				ИмяОбласти = ?(ЭтоДокумент, "ДокументПомеченНаУдалениеКоннекторЛевоВерх", "СправочникПВХПомеченНаУдалениеКоннекторЛевоВерх");
				ОбластьКартинка = Макет.ПолучитьОбласть(ИмяОбласти);
			Иначе
				ИмяОбласти = ?(ЭтоДокумент, "ДокументПомеченНаУдаление", "СправочникПВХПомеченНаУдалениеКоннекторЛево");
				ОбластьКартинка = Макет.ПолучитьОбласть(ИмяОбласти);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ЭтоТекущийОбъект Тогда
			Если ЕстьПодчиненныеСуммарно Тогда
				ИмяОбласти = ?(ЭтоДокумент, "ДокументЗаписанКоннекторНиз", "СправочникПВХКоннекторНиз");
				ОбластьКартинка = Макет.ПолучитьОбласть(ИмяОбласти);
			КонецЕсли;
		ИначеЕсли ЭтоПодчиненный = Истина Тогда
			Если ЕстьПодчиненные Тогда
				ИмяОбласти = ?(ЭтоДокумент, "ДокументЗаписанКоннекторЛевоНиз", "СправочникПВХКоннекторЛевоНиз");
				ОбластьКартинка = Макет.ПолучитьОбласть(ИмяОбласти);
			Иначе
				ИмяОбласти = ?(ЭтоДокумент, "ДокументЗаписан", "СправочникПВХКоннекторЛево");
				ОбластьКартинка = Макет.ПолучитьОбласть(ИмяОбласти);
			КонецЕсли;
		Иначе
			Если ЕстьПодчиненные Тогда
				ИмяОбласти = ?(ЭтоДокумент, "ДокументЗаписанКоннекторЛевоВерх", "СправочникПВХКоннекторЛевоВерх");
				ОбластьКартинка = Макет.ПолучитьОбласть(ИмяОбласти);
			Иначе
				ИмяОбласти = ?(ЭтоДокумент, "ДокументЗаписан", "СправочникПВХКоннекторЛево");
				ОбластьКартинка = Макет.ПолучитьОбласть(ИмяОбласти);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоТекущийОбъект Тогда
		ТаблицаПодчиненности.Вывести(ОбластьКартинка) 
	Иначе
		ТаблицаПодчиненности.Присоединить(ОбластьКартинка);
	КонецЕсли;
	
	// Вывод объекта
	ОбластьОбъект = Макет.ПолучитьОбласть(?(ЭтоТекущийОбъект, "ТекущийОбъект", "Объект"));
	ОбластьОбъект.Параметры.ПредставлениеОбъекта = СтрокаДерева.Представление;
	ОбластьОбъект.Параметры.Объект = СтрокаДерева.Ссылка;
	
	Если СтрокаДерева.Ссылка = Объект.Ссылка Тогда
		ОбластьОбъект.Области[0].Шрифт = Новый Шрифт(ОбластьОбъект.Области[0].Шрифт,,,Истина,);
	КонецЕсли;
	
	ТаблицаПодчиненности.Присоединить(ОбластьОбъект);
КонецПроцедуры
#КонецОбласти

&НаСервере
Процедура ОтклонитьЗадачуНаСервере()
	ТекстСообщение = "Назначенный исполнитель отказался от задачи";
	Центр_УведомленияПользователей.ОтправитьУведомлениеПользователю(Объект.Автор, ТекстСообщение, ТекущаяДатаСеанса(),
		ТекущаяДатаСеанса(), Перечисления.СпособыУстановкиВремениНапоминания.Периодически, 60, Объект.Ссылка);

	Менеджер = РегистрыСведений.Центр_ИсполнителиЗадач.СоздатьМенеджерЗаписи();
	Менеджер.Задача = Объект.Ссылка;
	Менеджер.Период = ТекущаяДатаСеанса();
	Менеджер.Записать();

	Исполнитель = Неопределено;
КонецПроцедуры
&НаКлиенте
Процедура ПослеСозданияГлавнойЗадачи(Результат, ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(ДополнительныеПараметры.ФормаДок.Объект.Ссылка) Тогда
		Объект.ГлавнаяЗадача = ДополнительныеПараметры.ФормаДок.Объект.Ссылка;
		Записать();
		ОтобразитьИерархиюЗадач();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеСозданияПодчиненнойЗадачи(Результат, ДополнительныеПараметры) Экспорт
		ОтобразитьИерархиюЗадач();
КонецПроцедуры

&НаСервере
Функция СоздатьГлавнуюЗадачуНаСервере(ДанныеФормы)
	НовыйИД = Новый УникальныйИдентификатор();
	НоваяСсылка = Документы.Центр_Задача.ПолучитьСсылку(НовыйИД);
	Док = Документы.Центр_Задача.СоздатьДокумент();
	Док.УстановитьСсылкуНового(НоваяСсылка);
	СсылкаДок = Док.ПолучитьСсылкуНового();
	ЗначениеВДанныеФормы(Док, ДанныеФормы);
	Возврат  СсылкаДок; 
КонецФункции

&НаСервере
Процедура ЗагрузитьЦветаМеток()
	ОчиститьОформлениеМеток();
	
	Для Каждого Метка Из Объект.Метки Цикл
		Цвет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Метка.Метка, "ЦветRGB");
		
		Если ЗначениеЗаполнено(Цвет) Тогда
			Фон = СтрРазделить(Цвет, ",");
			
			ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	    	ЭлементОформления.Использование = Истина;
	    	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(Фон[0], Фон[1], Фон[2]));
			
			ЭлементУсловия                = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		    ЭлементУсловия.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Метки.Метка");
		    ЭлементУсловия.ПравоеЗначение = Метка.Метка;
		    ЭлементУсловия.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;   
		    ЭлементУсловия.Использование  = Истина;
		    
		    ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
		    ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Метки");
	    КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОчиститьОформлениеМеток()
	МассивКУдалению = Новый Массив;
	Для Каждого Настройка Из УсловноеОформление.Элементы Цикл
		Если Настройка.Отбор.Элементы[0].ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Метки.Метка")
			И Настройка.Отбор.Элементы[0].ВидСравнения = ВидСравненияКомпоновкиДанных.Равно
			И Настройка.Поля.Элементы[0].Поле = Новый ПолеКомпоновкиДанных("Метки")
			И Настройка.Оформление.Элементы[0].Параметр = Новый ПараметрКомпоновкиДанных("ЦветФона") Тогда
			МассивКУдалению.Добавить(Настройка);
		КонецЕсли;
	КонецЦикла;

	Для Каждого Настрйока Из МассивКУдалению Цикл
		УсловноеОформление.Элементы.Удалить(Настрйока);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПостановщикНачалоВыбораНаСервере()

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Центр_ВидыЗадач.Партнер
	|ИЗ
	|	Справочник.Центр_ВидыЗадач КАК Центр_ВидыЗадач
	|ГДЕ
	|	Центр_ВидыЗадач.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", Объект.ВидЗадачи);

	РезультатЗапроса = Запрос.Выполнить();	
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		
		Если ВыборкаДетальныеЗаписи.Партнер Тогда
			Элементы.Постановщик.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Центр_Партнеры");
		Иначе
			Элементы.Постановщик.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Пользователи");	
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПользовательскиеНастройки()
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Центр_ПользовательскиеНастройки.Значение,
		|	Центр_ПользовательскиеНастройки.ВидНастройки
		|ИЗ
		|	РегистрСведений.Центр_ПользовательскиеНастройки КАК Центр_ПользовательскиеНастройки
		|ГДЕ
		|	Центр_ПользовательскиеНастройки.Пользователь = &Пользователь
		|	И
		|		Центр_ПользовательскиеНастройки.ВидНастройки.Родитель = ЗНАЧЕНИЕ(ПланВидовХарактеристик.Центр_ВидыПользовательскихНастроек.НачальноеЗаполнениеЗадачи)
		|	И НЕ Центр_ПользовательскиеНастройки.ВидНастройки.ЭтоГруппа";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователи.АвторизованныйПользователь());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл
		Если Выборка.ВидНастройки = ПредопределенноеЗначение(
			"ПланВидовХарактеристик.Центр_ВидыПользовательскихНастроек.Исполнитель") Тогда
			Исполнитель = Выборка.Значение;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#Область ВидимостьЭлементов
&НаСервере
Процедура ОбновитьВидимостьЭлементов()
	ОбновитьВидимостьКнопокСвязанныхСИсполнителем();
	ВидимостьКнопокСообщений();
	ВидимостьЗакрытьЗадачу();
	ВидимостьКнопокСогласования();
	ВидимостьКнопкиТрудозатраты();
КонецПроцедуры

&НаСервере
Процедура ВидимостьКнопкиТрудозатраты()
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВвестиТрудозатраты", "Видимость", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(Центр_ОценкаЧасовСрезПоследних.Согласовано, ЛОЖЬ) КАК Согласовано,
	|	Центр_ИсполнителиЗадачСрезПоследних.Исполнитель ССЫЛКА Справочник.Пользователи КАК ЭтоПользователь,
	|	ВЫБОР
	|		КОГДА Центр_ИсполнителиЗадачСрезПоследних.Исполнитель = &ТекПользователь
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоИсполнитель
	|ИЗ
	|	РегистрСведений.Центр_ОценкаЧасов.СрезПоследних(, Задача = &Задача) КАК Центр_ОценкаЧасовСрезПоследних
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.Центр_ИсполнителиЗадач.СрезПоследних(, Задача = &Задача) КАК
	|			Центр_ИсполнителиЗадачСрезПоследних
	|		ПО Центр_ИсполнителиЗадачСрезПоследних.Задача = Центр_ОценкаЧасовСрезПоследних.Задача";

	Запрос.УстановитьПараметр("Задача", Объект.Ссылка);
	Запрос.УстановитьПараметр("ТекПользователь", Пользователи.АвторизованныйПользователь());
	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();

	Если Выборка.Следующий() Тогда
		Если Объект.КонтрольВремени Тогда
			Если Выборка.Согласовано И Выборка.ЭтоПользователь И Выборка.ЭтоИсполнитель Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВвестиТрудозатраты", "Видимость",
					Истина);
			КонецЕсли;
		Иначе
			Если Выборка.ЭтоПользователь И Выборка.ЭтоИсполнитель Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВвестиТрудозатраты", "Видимость",
					Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВидимостьКнопокСогласования()
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УчетВремени", "ТолькоПросмотр", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СогласоватьОценку", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КонтрольВремени", "ТолькоПросмотр", Ложь);

	КонтрольВремениВидаЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидЗадачи, "КонтрольВремени");
	Если ЗначениеЗаполнено(КонтрольВремениВидаЗадачи) Тогда		
		Если КонтрольВремениВидаЗадачи Тогда
			Объект.КонтрольВремени = КонтрольВремениВидаЗадачи;
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КонтрольВремени", "ТолькоПросмотр",
				Истина);
		КонецЕсли;
	КонецЕсли;
	Если Объект.КонтрольВремени Тогда
		Объект.УчетВремени = Истина;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УчетВремени", "ТолькоПросмотр", Истина);
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Центр_ИсполнителиЗадачСрезПоследних.Исполнитель = &ТекущийПользователь КАК Исполнитель,
		|	Центр_ИсполнителиЗадачСрезПоследних.Задача КАК Задача
		|ПОМЕСТИТЬ вт_Исполнитель
		|ИЗ
		|	РегистрСведений.Центр_ИсполнителиЗадач.СрезПоследних(, Задача = &Задача) КАК Центр_ИсполнителиЗадачСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Центр_ОценкаЧасовСрезПоследних.Задача КАК Задача,
		|	Центр_ОценкаЧасовСрезПоследних.Отказ КАК Отказ,
		|	Центр_ОценкаЧасовСрезПоследних.Согласовано КАК Согласовано,
		|	Центр_ОценкаЧасовСрезПоследних.КомментарийОценки
		|ПОМЕСТИТЬ вт_Согласовании
		|ИЗ
		|	РегистрСведений.Центр_ОценкаЧасов.СрезПоследних(, Задача = &Задача) КАК Центр_ОценкаЧасовСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Центр_Задача.ГлавныйМенеджер = &ТекущийПользователь КАК ЭтоГлавныйМенеджер,
		|	ЕСТЬNULL(вт_Согласовании.Отказ, ЛОЖЬ) КАК Отказ,
		|	ЕСТЬNULL(вт_Согласовании.Согласовано, ЛОЖЬ) КАК Согласовано,
		|	вт_Исполнитель.Исполнитель КАК ЭтоИсполнитель,
		|	вт_Согласовании.КомментарийОценки
		|ИЗ
		|	Документ.Центр_Задача КАК Центр_Задача
		|		ЛЕВОЕ СОЕДИНЕНИЕ вт_Исполнитель КАК вт_Исполнитель
		|		ПО Центр_Задача.Ссылка = вт_Исполнитель.Задача
		|		ЛЕВОЕ СОЕДИНЕНИЕ вт_Согласовании КАК вт_Согласовании
		|		ПО Центр_Задача.Ссылка = вт_Согласовании.Задача
		|ГДЕ
		|	Центр_Задача.Ссылка = &Задача";

		Запрос.УстановитьПараметр("Задача", Объект.Ссылка);
		Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.АвторизованныйПользователь());
		РезультатЗапроса = Запрос.Выполнить();

		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.ЭтоГлавныйМенеджер Тогда
				Если ЗначениеЗаполнено(Выборка.КомментарийОценки) И Не Выборка.Отказ И Не Выборка.Согласовано Тогда
					СогласованиеИсполнителя = Ложь;
					ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СогласоватьОценку",
						"Видимость", Истина);
				КонецЕсли;
			КонецЕсли;
			Если Выборка.ЭтоИсполнитель Тогда
				Если Не ЗначениеЗаполнено(Выборка.КомментарийОценки) Или Выборка.Отказ Тогда
					СогласованиеИсполнителя = Истина;
					ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СогласоватьОценку",
						"Видимость", Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СогласоватьОценку", "Видимость", Ложь);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьКнопокСвязанныхСИсполнителем()
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Центр_ИсполнителиЗадачСрезПоследних.Исполнитель КАК Исполнитель
	|ПОМЕСТИТЬ вт_Исполнитель
	|ИЗ
	|	РегистрСведений.Центр_ИсполнителиЗадач.СрезПоследних(, Задача = &Задача) КАК Центр_ИсполнителиЗадачСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Центр_ГруппыДоступаКЗадачам.Руководитель = &ТекущийПользователь
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоРуководитель,
	|	ВЫБОР
	|		КОГДА Центр_ГруппыДоступаКЗадачамПользователи.Пользователь ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЭтоПользовательГруппы,
	|	вт_Исполнитель.Исполнитель КАК Исполнитель,
	|	вт_Исполнитель.Исполнитель ССЫЛКА Справочник.Центр_ГруппыДоступаКЗадачам КАК ЭтоГруппа,
	|	ВЫБОР
	|		КОГДА вт_Исполнитель.Исполнитель = &ТекущийПользователь
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоТекПользователь
	|ИЗ
	|	вт_Исполнитель КАК вт_Исполнитель
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Центр_ГруппыДоступаКЗадачам КАК Центр_ГруппыДоступаКЗадачам
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Центр_ГруппыДоступаКЗадачам.Пользователи КАК Центр_ГруппыДоступаКЗадачамПользователи
	|			ПО Центр_ГруппыДоступаКЗадачам.Ссылка = Центр_ГруппыДоступаКЗадачамПользователи.Ссылка
	|			И Центр_ГруппыДоступаКЗадачамПользователи.Пользователь = &ТекущийПользователь
	|		ПО вт_Исполнитель.Исполнитель = Центр_ГруппыДоступаКЗадачам.Ссылка";

	Запрос.УстановитьПараметр("Задача", Объект.Ссылка);
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.АвторизованныйПользователь());

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НазначитьИсполнителя", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтклонитьЗадачу", "Видимость", Ложь);
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.Исполнитель) Тогда
			Исполнитель = Выборка.Исполнитель;
		КонецЕсли;
		Если Выборка.ЭтоГруппа И Выборка.ЭтоРуководитель Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НазначитьИсполнителя", "Видимость",
				Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтклонитьЗадачу", "Видимость",
				Истина);
		КонецЕсли;
		Если Выборка.ЭтоГруппа И Выборка.ЭтоПользовательГруппы Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НазначитьИсполнителя", "Видимость",
				Истина);
		КонецЕсли;

		Если Выборка.ЭтоТекПользователь Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтклонитьЗадачу", "Видимость",
				Истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВидимостьЗакрытьЗадачу()
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Центр_СтатусыЗадачСрезПоследних.Статус
	|ПОМЕСТИТЬ вт_ТекСтатус
	|ИЗ
	|	РегистрСведений.Центр_СтатусыЗадач.СрезПоследних(, Задача = &Задача) КАК Центр_СтатусыЗадачСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Центр_ТриггерыПереходыСтатусов.СтатусЗавершения
	|ИЗ
	|	вт_ТекСтатус КАК вт_ТекСтатус
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Центр_Триггеры.ПереходыСтатусов КАК Центр_ТриггерыПереходыСтатусов
	|		ПО Центр_ТриггерыПереходыСтатусов.СтатусСрабатывания = вт_ТекСтатус.Статус
	|		И Центр_ТриггерыПереходыСтатусов.Ссылка = &Триггер";

	Запрос.УстановитьПараметр("Задача", Объект.Ссылка);
	Запрос.УстановитьПараметр("Триггер", ПредопределенноеЗначение("Справочник.Центр_Триггеры.ЗакрытиеЗадачи"));

	РезультатЗапроса = Запрос.Выполнить();
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗакрытьЗадачу", "Видимость", Ложь);
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Следующий() Тогда
			Если ЗначениеЗаполнено(Выборка.СтатусЗавершения) Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗакрытьЗадачу", "Видимость", Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВидимостьКнопокСообщений()
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОткрытьВопросы", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтветитьНаВопрос", "Видимость", Ложь);
	КонецЕсли;	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|		КОГДА Центр_ВопросыПоЗадачам.ТекстВопроса ЕСТЬ NULL
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ) КАК КоличествоВопросов
		|ПОМЕСТИТЬ вт_Вопросы
		|ИЗ
		|	РегистрСведений.Центр_ВопросыПоЗадачам КАК Центр_ВопросыПоЗадачам
		|ГДЕ
		|	Центр_ВопросыПоЗадачам.Задача = &Задача
		|	И Центр_ВопросыПоЗадачам.Адресат = &Адресат
		|	И Центр_ВопросыПоЗадачам.ВидВопроса = ЗНАЧЕНИЕ(Перечисление.Центр_ВидыВопросов.Вопрос)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|		КОГДА Центр_ВопросыПоЗадачам.ТекстВопроса ЕСТЬ NULL
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ) КАК КоличествоОтветов
		|ПОМЕСТИТЬ вт_Ответы
		|ИЗ
		|	РегистрСведений.Центр_ВопросыПоЗадачам КАК Центр_ВопросыПоЗадачам
		|ГДЕ
		|	Центр_ВопросыПоЗадачам.Задача = &Задача
		|	И Центр_ВопросыПоЗадачам.ВидВопроса = ЗНАЧЕНИЕ(Перечисление.Центр_ВидыВопросов.Ответ)
		|	И Центр_ВопросыПоЗадачам.Отправитель = &Отправитель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(вт_Вопросы.КоличествоВопросов, 0) КАК КоличествоВопросов,
		|	ЕСТЬNULL(вт_Ответы.КоличествоОтветов, 0) КАК КоличествоОтветов
		|ИЗ
		|	вт_Вопросы КАК вт_Вопросы,
		|	вт_Ответы КАК вт_Ответы";
	
	Запрос.УстановитьПараметр("Задача", Объект.Ссылка);
	Запрос.УстановитьПараметр("Адресат", Пользователи.АвторизованныйПользователь());
	Запрос.УстановитьПараметр("Отправитель", Пользователи.АвторизованныйПользователь());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() И Выборка.КоличествоВопросов <> Выборка.КоличествоОтветов Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтветитьНаВопрос", "Видимость", Истина);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтветитьНаВопрос", "Видимость", Ложь);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

&НаСервере
Процедура НазначитьИсполнителяНаСервере() 
	МенеджерЗаписи = РегистрыСведений.Центр_ИсполнителиЗадач.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Задача = Объект.Ссылка;
	МенеджерЗаписи.Исполнитель  = Пользователи.АвторизованныйПользователь();
	МенеджерЗаписи.Период = ТекущаяДатаСеанса();
	МенеджерЗаписи.Записать();
КонецПроцедуры

&НаСервере
Процедура ЗакрытьЗадачуНаСервере()
	Центр_ОбработкаТриггеров.ТриггерЗакрытиеЗадачи(Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСогласованияЗадачи(Результат, ДополнительныеПараметры) Экспорт
	ОбновитьВидимостьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораГлавнойЗадачи(Результат, ДополнительныеПараметры) Экспорт
	Объект.ГлавнаяЗадача = Результат;
	Записать();
	ОтобразитьИерархиюЗадач();
КонецПроцедуры

&НаКлиенте 
Процедура ПослеОтветаНаВопрос() Экспорт
	ОбновитьВидимостьЭлементов();
КонецПроцедуры

#Область Чат
&НаСервере
Процедура ОтправитьНаСервере()
	МенеджерЗаписи = РегистрыСведений.Центр_КомментарииЗадач.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Автор = Пользователи.АвторизованныйПользователь();
	МенеджерЗаписи.Задача = Объект.Ссылка;
	МенеджерЗаписи.Комментарий = Новый ХранилищеЗначения(Комментарий);
	МенеджерЗаписи.Период = ТекущаяДатаСеанса();
	
	МенеджерЗаписи.Записать();

	Комментарий.Удалить();
	ОтобразитьЧат();
КонецПроцедуры

&НаСервере
Процедура ОтобразитьЧат()
	Если КоличествоКомментариев > 0 Тогда
		Для к = 1 По КоличествоКомментариев Цикл
			Центр_ЭлементыФормы.УдлРеквизитИЭлемент(ЭтотОбъект, "Комментарий" + к);
		КонецЦикла;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Центр_КомментарииЗадач.Автор,
	|	Центр_КомментарииЗадач.Комментарий,
	|	Центр_КомментарииЗадач.Период КАК Период
	|ИЗ
	|	РегистрСведений.Центр_КомментарииЗадач КАК Центр_КомментарииЗадач
	|ГДЕ
	|	Центр_КомментарииЗадач.Задача = &Задача
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ";

	Запрос.УстановитьПараметр("Задача", Объект.Ссылка);

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();

	КоличествоКомментариев = Выборка.Количество();

	Индекс = 1;

	ТекущийПользователь = Пользователи.АвторизованныйПользователь();

	Пока Выборка.Следующий() Цикл
		Центр_ЭлементыФормы.СоздатьРеквизит(ЭтотОбъект, "Комментарий" + Индекс,
			Новый ОписаниеТипов("ФорматированныйДокумент"));

		СтруктураСвойств = Новый структура;
		СтруктураСвойств.Вставить("ТолькоПросмотр", Истина);
		СтруктураСвойств.Вставить("Высота", 5);
		СтруктураСвойств.Вставить("Ширина", 70);
		СтруктураСвойств.Вставить("РастягиватьПоГоризонтали", Ложь);
		Если Выборка.Автор = ТекущийПользователь Тогда
			СтруктураСвойств.Вставить("ГоризонтальноеПоложениеВГруппе", ГоризонтальноеПоложениеЭлемента.Право);
		Иначе
			СтруктураСвойств.Вставить("ГоризонтальноеПоложениеВГруппе", ГоризонтальноеПоложениеЭлемента.Лево);
		КонецЕсли;
		ЗаголовокКомментария = Строка(Выборка.Автор) + " " + Выборка.Период;
		Центр_ЭлементыФормы.СздПоле(ЭтотОбъект, "Комментарий" + Индекс, Элементы.Комментарии, ЗаголовокКомментария, ,
			"Комментарий" + Индекс, СтруктураСвойств);
		ЭтотОбъект["Комментарий" + Индекс] = Выборка.Комментарий.Получить();
		Индекс = Индекс + 1;
	КонецЦикла;

КонецПроцедуры
#КонецОбласти


&НаСервере
Процедура ПостановщикПриИзмененииНаСервере()
	Если ТипЗнч(Объект.Постановщик) = Тип("СправочникСсылка.Пользователи") Тогда
		Объект.ГлавныйМенеджер = Объект.Постановщик;
	ИначеЕсли ТипЗнч(Объект.Постановщик) = Тип("СправочникСсылка.Центр_Партнеры") Тогда
		ГлавныйМенеджер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Постановщик, "ГлавныйМенеджер");
		Если ЗначениеЗаполнено(ГлавныйМенеджер) Тогда
			Объект.ГлавныйМенеджер = ГлавныйМенеджер;
		Иначе
			Объект.ГлавныйМенеджер = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти