// Подпись к количеству дней по склонениям
Функция ПолучитьПодписьДней(ЧислоДней) Экспорт
	
	Если ЧислоДней > 10 И ЧислоДней < 20 Тогда
		Подпись = НСтр("ru = 'дней'");
	Иначе
		ПоследниеДвеЦифры = ЧислоДней - Цел(ЧислоДней / 100) * 100;
		ПоследняяЦифра = ЧислоДней - Цел(ЧислоДней / 10) * 10;
		
		Если ПоследняяЦифра = 0 Тогда
			Подпись = НСтр("ru = 'дней'");
		ИначеЕсли ПоследниеДвеЦифры > 10 И ПоследниеДвеЦифры < 20 Тогда
			Подпись = Нстр("ru = 'дней'");
		ИначеЕсли ПоследниеДвеЦифры < 10 Или ПоследниеДвеЦифры > 20 Тогда
			Если ПоследняяЦифра = 1 Тогда
				Подпись = Нстр("ru = 'день'");
			ИначеЕсли ПоследняяЦифра < 5 Тогда
				Подпись = НСтр("ru = 'дня'");
			Иначе
				Подпись = НСтр("ru = 'дней'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Подпись;
	
КонецФункции


// Подпись к количеству часов по склонениям
Функция ПолучитьПодписьЧасов(ЧислоЧасов) Экспорт
	
	Если ЧислоЧасов > 10 И ЧислоЧасов < 20 Тогда
		Подпись = НСтр("ru = 'часов'");
	Иначе
		ПоследниеДвеЦифры = ЧислоЧасов - Цел(ЧислоЧасов / 100) * 100;
		ПоследняяЦифра = ЧислоЧасов - Цел(ЧислоЧасов / 10) * 10;
		
		Если ПоследняяЦифра = 0 Тогда
			Подпись = НСтр("ru = 'часов'");
		ИначеЕсли ПоследниеДвеЦифры > 10 И ПоследниеДвеЦифры < 20 Тогда 
			Подпись = НСтр("ru = 'часов'");
		ИначеЕсли ПоследниеДвеЦифры < 10 Или ПоследниеДвеЦифры > 20 Тогда
			Если ПоследняяЦифра = 1 Тогда
				Подпись = Нстр("ru = 'час'");
			ИначеЕсли ПоследняяЦифра < 5 Тогда
				Подпись = НСтр("ru = 'часа'");
			Иначе
				Подпись = НСтр("ru = 'часов'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Подпись;
	
КонецФункции

// Подпись к количеству минут по склонениям
Функция ПолучитьПодписьМинут(ЧислоМинут) Экспорт
	
	Если ЧислоМинут > 10 И ЧислоМинут < 20 Тогда
		Подпись = НСтр("ru = 'минут'");
	Иначе
		Срок = ЧислоМинут - Цел(ЧислоМинут / 10) * 10;
		Если Срок = 0 Тогда
			Подпись = НСтр("ru = 'минут'");
		ИначеЕсли Срок = 1 Тогда
			Подпись = НСтр("ru = 'минута'");
		ИначеЕсли Срок < 5 Тогда
			Подпись = НСтр("ru = 'минуты'");
		Иначе
			Подпись = НСтр("ru = 'минут'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Подпись;
	
КонецФункции

// Возвращает текстовое представление интервала времени, заданного в секундах
//
// Параметры
//
//  Время - Число - интервал времени в минутах.
//
// Возвращаемое значение:
//   Строка - представление интервала времени.
//
Функция ПредставлениеВремениДокументооборот(Время) Экспорт
	
	Если Время = 0 Тогда
		Возврат НСтр("ru = 'при наступлении события'");
	Иначе
		ПредставлениеВремени = ПредставлениеВремени(Время);
		ПредставлениеПредлога = НСтр("ru = 'за'");
		Возврат СтрШаблон(НСтр("ru = '%1 %2'"), ПредставлениеПредлога, ПредставлениеВремени);
	КонецЕсли;
	
КонецФункции 



// Возвращает текстовое представление интервала времени, заданного в секундах.
//
// Параметры:
//
//  Время - Число - интервал времени в секундах.
//
//  ПолноеПредставление	- Булево - кратное или полное представление времени.
//		Например, интервал 1 000 000 секунд:
//		- полное представление:  11 дней 13 часов 46 минут 40 секунд;
//		- краткое представление: 11 дней 13 часов.
//  
//  ВыводитьСекунды - Булево - Ложь, если секунды не требуются.
//  
// Возвращаемое значение:
//   Строка - представление интервала времени.
//
Функция ПредставлениеВремени(Знач Время, ПолноеПредставление = Истина, ВыводитьСекунды = Истина) Экспорт
	Результат = "";
	
	// Представление единиц измерения времени в винительном падеже для количеств: 1, 2-4, 5-20.
	ПредставлениеНедель = НСтр("ru = ';%1 неделю;;%1 недели;%1 недель;%1 недели'");
	ПредставлениеДней   = НСтр("ru = ';%1 день;;%1 дня;%1 дней;%1 дня'");
	ПредставлениеЧасов  = НСтр("ru = ';%1 час;;%1 часа;%1 часов;%1 часа'");
	ПредставлениеМинут  = НСтр("ru = ';%1 минуту;;%1 минуты;%1 минут;%1 минуты'");
	ПредставлениеСекунд = НСтр("ru = ';%1 секунду;;%1 секунды;%1 секунд;%1 секунды'");
	
	Время = Число(Время);
	
	Если Время < 0 Тогда
		Время = -Время;
	КонецЕсли;
	
	КоличествоНедель = Цел(Время / 60/60/24/7);
	КоличествоДней   = Цел(Время / 60/60/24);
	КоличествоЧасов  = Цел(Время / 60/60);
	КоличествоМинут  = Цел(Время / 60);
	КоличествоСекунд = Цел(Время);
	
	КоличествоСекунд = КоличествоСекунд - КоличествоМинут * 60;
	КоличествоМинут  = КоличествоМинут - КоличествоЧасов * 60;
	КоличествоЧасов  = КоличествоЧасов - КоличествоДней * 24;
	КоличествоДней   = КоличествоДней - КоличествоНедель * 7;
	
	Если Не ВыводитьСекунды Тогда
		КоличествоСекунд = 0;
	КонецЕсли;
	
	Если КоличествоНедель > 0 И КоличествоДней+КоличествоЧасов+КоличествоМинут+КоличествоСекунд=0 Тогда
		Результат = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(ПредставлениеНедель, КоличествоНедель);
	Иначе
		КоличествоДней = КоличествоДней + КоличествоНедель * 7;
		
		Счетчик = 0;
		Если КоличествоДней > 0 Тогда
			Результат = Результат + СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(ПредставлениеДней, КоличествоДней) + " ";
			Счетчик = Счетчик + 1;
		КонецЕсли;
		
		Если КоличествоЧасов > 0 Тогда
			Результат = Результат + СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(ПредставлениеЧасов, КоличествоЧасов) + " ";
			Счетчик = Счетчик + 1;
		КонецЕсли;
		
		Если (ПолноеПредставление Или Счетчик < 2) И КоличествоМинут > 0 Тогда
			Результат = Результат + СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(ПредставлениеМинут, КоличествоМинут) + " ";
			Счетчик = Счетчик + 1;
		КонецЕсли;
		
		Если (ПолноеПредставление Или Счетчик < 2) И (КоличествоСекунд > 0 Или КоличествоНедель+КоличествоДней+КоличествоЧасов+КоличествоМинут = 0) Тогда
			Результат = Результат + СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(ПредставлениеСекунд, КоличествоСекунд);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СокрП(Результат);
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// Работа с часовыми поясами (клиент-сервер).
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Формирует данные смещения по смещению стандартного времени.
//
// Параметры:
//  СмещениеСтандартногоВремени - Число - Смещение стандартного времени.
// 
// Возвращаемое значение:
//  Структура - Данные смещения. См. РаботаСЧасовымиПоясамиКлиентСервер.НовыйДанныеСмещения().
//
Функция ДанныеСмещения(СмещениеСтандартногоВремени) Экспорт
	
	СекундВМинуте = 60;
	СекундВЧасе = 3600;
	
	ДанныеСмещения = НовыйДанныеСмещения();
	ДанныеСмещения.НаправлениеСмещения = ?(СмещениеСтандартногоВремени >= 0, "+", "-");
	ДанныеСмещения.СмещениеЧасов = Цел(СмещениеСтандартногоВремени / СекундВЧасе);
	ДанныеСмещения.СмещениеМинут =
		Цел((СмещениеСтандартногоВремени - ДанныеСмещения.СмещениеЧасов * СекундВЧасе) / СекундВМинуте);
	
	Возврат ДанныеСмещения;
	
КонецФункции

// Возвращает часовой пояс, заданный смещением.
//
// Возвращаемое значение:
//  Строка, Неопределено - Часовой пояс,заданный смещением, в формате GMT{+/-}hh:mm. Если среди допустимых часовых поясов нет допустимого - возвращает Неопределено.
//
Функция ЧасовойПоясСмещением(СмещениеСтандартногоВремени) Экспорт
	
	МинимальноеСмещениеЧасов = 0;
	МаксимальноеСмещениеЧасов = 0;
	ЧасовыеПоясаПоСмещению = Новый Соответствие;
	ИзвестныеЧасовыеПояса = ИзвестныеЧасовыеПояса();
	Для Каждого ДанныеЧасовогоПояса Из ИзвестныеЧасовыеПояса() Цикл
		ЧасовыеПоясаПоСмещению.Вставить(
			ДанныеЧасовогоПояса.НаправлениеСмещения + Строка(ДанныеЧасовогоПояса.СмещениеЧасов),
			ДанныеЧасовогоПояса);
	КонецЦикла;
	
	ДанныеСмещения = ДанныеСмещения(СмещениеСтандартногоВремени);
	Если ДанныеСмещения.СмещениеМинут > 30 Тогда
		ДанныеСмещения.СмещениеЧасов = ДанныеСмещения.СмещениеЧасов + 1;
		ДанныеСмещения.СмещениеМинут = 0;
	Иначе
		ДанныеСмещения.СмещениеМинут = 0;
	КонецЕсли;
	
	ДанныеЧасовогоПояса = ЧасовыеПоясаПоСмещению.Получить(
		ДанныеСмещения.НаправлениеСмещения + Строка(ДанныеСмещения.СмещениеЧасов));
	Если ДанныеЧасовогоПояса = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДанныеЧасовогоПояса.ЧасовойПояс;
	
КонецФункции

// Возвращает данные известного часового пояса.
//
// Параметры:
//  ЧасовойПояс - Строка - Часовой пояс в формате GMT{+/-}hh:mm.
// 
// Возвращаемое значение:
//  Структура, Неопределено - Данные известного часового пояса. Если часовой пояс не известен - возвращает Неопределено.
//
Функция ДанныеЧасовогоПояса(ЧасовойПояс) Экспорт
	
	Для Каждого ДанныеЧасовогоПояса Из ИзвестныеЧасовыеПояса() Цикл
		
		Если ДанныеЧасовогоПояса.ЧасовойПояс <> ЧасовойПояс Тогда
			Продолжить;
		КонецЕсли;
		
		Возврат ДанныеЧасовогоПояса;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Формирует структуру данных часового пояса.
//
// Параметры:
//  Представление       - Строка - Представление часового пояса.
//  НаправлениеСмещения - Строка - Направление смещения часового пояса "+" или "-".
//  СмещениеЧасов       - Число  - Смещение часов.
//  СмещениеМинут       - Число  - Смещение минут.
// 
// Возвращаемое значение:
//  Структура - Структура данных часового пояса:
//   * ЧасовойПояс         - Строка - Часовой пояс в формате GMT{+/-}hh:mm.
//   * Представление       - Строка - Представление часового пояса.
//   * НаправлениеСмещения - Строка - Направление смещения часового пояса "+" или "-".
//   * СмещениеЧасов       - Число  - Смещение часов.
//   * СмещениеМинут       - Число  - Смещение минут.
//
Функция НовыйДанныеЧасовогоПояса(Представление, НаправлениеСмещения, СмещениеЧасов, СмещениеМинут) Экспорт
	
	ДанныеЧасовогоПояса = Новый Структура;
	ДанныеЧасовогоПояса.Вставить("НаправлениеСмещения", НаправлениеСмещения);
	ДанныеЧасовогоПояса.Вставить("СмещениеЧасов", СмещениеЧасов);
	ДанныеЧасовогоПояса.Вставить("СмещениеМинут", СмещениеМинут);
	ДанныеЧасовогоПояса.Вставить("Представление", Представление);
	
	ЧасовойПояс = ЧасовойПоясЧастями(НаправлениеСмещения, СмещениеЧасов, СмещениеМинут);
	ДанныеЧасовогоПояса.Вставить("ЧасовойПояс", ЧасовойПояс);
	
	Возврат ДанныеЧасовогоПояса;
	
КонецФункции

// Преобразует дату в часовом поясе сеанса к местному времени.
//
// Параметры:
//  Дата                    - Дата      - Дата в часовом поясе сеанса.
//  ПараметрыПреобразования - Структура - Параметры преобразования местно времени. См. РаботаСЧасовымиПоясами.ПараметрыПреобразованияМестногоВремени().
// 
// Возвращаемое значение:
//  Дата - Местное время.
//
Функция ПривестиКМестномуВремени(ДатаСеанса, ПараметрыПреобразования) Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаСеанса) Тогда
		Возврат ДатаСеанса;
	КонецЕсли;
	
	Если ПараметрыПреобразования.РежимОтображенияМестногоВремени =
			ПредопределенноеЗначение("Перечисление.РежимыОтображенияМестногоВремени.ВремяСеанса") Тогда
		Возврат ДатаСеанса;
	КонецЕсли;
	
	ДанныеПоясаСеанса = ДанныеЧасовогоПояса(ПараметрыПреобразования.ЧасовойПоясПоУмолчанию);
	ДанныеМестногоПояса = ДанныеЧасовогоПояса(ПараметрыПреобразования.МестныйЧасовойПояс);
	Если ДанныеМестногоПояса = Неопределено Или ДанныеПоясаСеанса = Неопределено Тогда
		Возврат ДатаСеанса;
	КонецЕсли;
	
	УниверсальнаяДата = УниверсальноеВремяПоДаннымПояса(ДатаСеанса, ДанныеПоясаСеанса);
	
	Возврат МестноеВремяПоДаннымПояса(УниверсальнаяДата, ДанныеМестногоПояса);
	
КонецФункции

// Преобразует местное время к дате в часовом поясе сеанса.
//
// Параметры:
//  Дата                    - Дата      - Местное время.
//  ПараметрыПреобразования - Структура - Параметры преобразования местно времени. См. РаботаСЧасовымиПоясами.ПараметрыПреобразованияМестногоВремени().
// 
// Возвращаемое значение:
//  Дата - Дата в часовом поясе сеанс.
//
Функция ПривестиКВремениСеанса(МестнаяДата, ПараметрыПреобразования) Экспорт
	
	Если Не ЗначениеЗаполнено(МестнаяДата) Тогда
		Возврат МестнаяДата;
	КонецЕсли;
	
	Если ПараметрыПреобразования.РежимОтображенияМестногоВремени =
			ПредопределенноеЗначение("Перечисление.РежимыОтображенияМестногоВремени.ВремяСеанса") Тогда
		Возврат МестнаяДата;
	КонецЕсли;
	
	ДанныеПоясаСеанса = ДанныеЧасовогоПояса(ПараметрыПреобразования.ЧасовойПоясПоУмолчанию);
	ДанныеМестногоПояса = ДанныеЧасовогоПояса(ПараметрыПреобразования.МестныйЧасовойПояс);
	Если ДанныеМестногоПояса = Неопределено Или ДанныеПоясаСеанса = Неопределено Тогда
		Возврат МестнаяДата;
	КонецЕсли;
	
	УниверсальнаяДата = УниверсальноеВремяПоДаннымПояса(МестнаяДата, ДанныеМестногоПояса);
	
	Возврат МестноеВремяПоДаннымПояса(УниверсальнаяДата, ДанныеПоясаСеанса);
	
КонецФункции

// Преобразует универсальную дату в дату в часовом поясе.
//
// Параметры:
//  УниверсальноеВремя - Дата      - Универсальная дата
//  ДанныеПояса        - Структура - Данные часового пояса. См. РаботаСЧасовымиПоясамиКлиентСервер.НовыйДанныеЧасовогоПояса().
// 
// Возвращаемое значение:
//  Дата - Дата в часовом поясе.
//
Функция МестноеВремяПоДаннымПояса(УниверсальноеВремя, ДанныеПояса) Экспорт
	
	СекундВМинуте = 60;
	СекундВЧасе = 3600;
	
	МестноеВремя = УниверсальноеВремя;
	Если ДанныеПояса.НаправлениеСмещения = "+" Тогда
		МестноеВремя = МестноеВремя
			+ ДанныеПояса.СмещениеЧасов * СекундВЧасе
			+ ДанныеПояса.СмещениеМинут * СекундВМинуте;
	ИначеЕсли ДанныеПояса.НаправлениеСмещения = "-" Тогда
		МестноеВремя = МестноеВремя
			- ДанныеПояса.СмещениеЧасов * СекундВЧасе
			- ДанныеПояса.СмещениеМинут * СекундВМинуте;
	КонецЕсли;
	
	Возврат МестноеВремя;
	
КонецФункции

// Преобразует дату в часовом поясе в универсальную дату.
//
// Параметры:
//  МестноеВремя - Дата      - Дата в часовом поясе.
//  ДанныеПояса  - Структура - Данные часового пояса. См. РаботаСЧасовымиПоясамиКлиентСервер.НовыйДанныеЧасовогоПояса().
// 
// Возвращаемое значение:
//  Дата - Универсальная дата.
//
Функция УниверсальноеВремяПоДаннымПояса(МестноеВремя, ДанныеПояса) Экспорт
	
	СекундВМинуте = 60;
	СекундВЧасе = 3600;
	
	УниверсальнаяДата = МестноеВремя;
	Если ДанныеПояса.НаправлениеСмещения = "+" Тогда
		УниверсальнаяДата = УниверсальнаяДата
			- ДанныеПояса.СмещениеЧасов * СекундВЧасе
			- ДанныеПояса.СмещениеМинут * СекундВМинуте;
	ИначеЕсли ДанныеПояса.НаправлениеСмещения = "-" Тогда
		УниверсальнаяДата = УниверсальнаяДата
			+ ДанныеПояса.СмещениеЧасов * СекундВЧасе
			+ ДанныеПояса.СмещениеМинут * СекундВМинуте;
	КонецЕсли;
	
	Возврат УниверсальнаяДата;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формирует данные известных часовых поясов.
// 
// Возвращаемое значение:
//  Массив из Структура - Данные известных часовых поясов. См. РаботаСЧасовымиПоясамиКлиентСервер.НовыйДанныеЧасовогоПояса().
//
Функция ИзвестныеЧасовыеПояса()
	
	ИзвестныеЧасовыеПояса = Новый Массив;
	
	ИзвестныеЧасовыеПояса.Добавить(
		НовыйДанныеЧасовогоПояса(
			НСтр("ru = '(UTC-12:00) Линия перемены дат'"),
			"-",
			12,
			0));
	
	ИзвестныеЧасовыеПояса.Добавить(
		НовыйДанныеЧасовогоПояса(
			НСтр("ru = '(UTC-11:00) Время в формате UTC -11'"),
			"-",
			11,
			0));
	
	ИзвестныеЧасовыеПояса.Добавить(
		НовыйДанныеЧасовогоПояса(
			НСтр("ru = '(UTC-10:00) Гавайи'"),
			"-",
			10,
			0));
	
	ИзвестныеЧасовыеПояса.Добавить(
		НовыйДанныеЧасовогоПояса(
			НСтр("ru = '(UTC-09:00) Аляска'"),
			"-",
			9,
			0));
	
	ИзвестныеЧасовыеПояса.Добавить(
		НовыйДанныеЧасовогоПояса(
			НСтр("ru = '(UTC-08:00) Тихоокеанское время (США и Канада)'"),
			"-",
			8,
			0));
	
	ИзвестныеЧасовыеПояса.Добавить(
		НовыйДанныеЧасовогоПояса(
			НСтр("ru = '(UTC-07:00) Горное время (США и Канада)'"),
			"-",
			7,
			0));
	
	ИзвестныеЧасовыеПояса.Добавить(
		НовыйДанныеЧасовогоПояса(
			НСтр("ru = '(UTC-06:00) Центральное время (США и Канада)'"),
			"-",
			6,
			0));
	
	ИзвестныеЧасовыеПояса.Добавить(
		НовыйДанныеЧасовогоПояса(
			НСтр("ru = '(UTC-05:00) Восточное время (США и Канада)'"),
			"-",
			5,
			0));
	
	ИзвестныеЧасовыеПояса.Добавить(
		НовыйДанныеЧасовогоПояса(
			НСтр("ru = '(UTC-04:00) Атлантическое время (Канада)'"),
			"-",
			4,
			0));
	
	ИзвестныеЧасовыеПояса.Добавить(
		НовыйДанныеЧасовогоПояса(
			НСтр("ru = '(UTC-03:00) Бразилия'"),
			"-",
			3,
			0));
	
	ИзвестныеЧасовыеПояса.Добавить(
		НовыйДанныеЧасовогоПояса(
			НСтр("ru = '(UTC-02:00) Время в формате UTC -02'"),
			"-",
			2,
			0));
	
	ИзвестныеЧасовыеПояса.Добавить(
		НовыйДанныеЧасовогоПояса(
			НСтр("ru = '(UTC-01:00) Азорские острова'"),
			"-",
			1,
			0));
	
	ИзвестныеЧасовыеПояса.Добавить(
		НовыйДанныеЧасовогоПояса(
			НСтр("ru = '(UTC+00:00) Лондон'"),
			"+",
			0,
			0));
	
	ИзвестныеЧасовыеПояса.Добавить(
		НовыйДанныеЧасовогоПояса(
			НСтр("ru = '(UTC+01:00) Берлин'"),
			"+",
			1,
			0));
	
	ИзвестныеЧасовыеПояса.Добавить(
		НовыйДанныеЧасовогоПояса(
			НСтр("ru = '(UTC+02:00) Калининград'"),
			"+",
			2,
			0));
	
	ИзвестныеЧасовыеПояса.Добавить(
		НовыйДанныеЧасовогоПояса(
			НСтр("ru = '(UTC+03:00) Москва'"),
			"+",
			3,
			0));
	
	ИзвестныеЧасовыеПояса.Добавить(
		НовыйДанныеЧасовогоПояса(
			НСтр("ru = '(UTC+04:00) Саратов'"),
			"+",
			4,
			0));
	
	ИзвестныеЧасовыеПояса.Добавить(
		НовыйДанныеЧасовогоПояса(
			НСтр("ru = '(UTC+05:00) Екатеринбург'"),
			"+",
			5,
			0));
	
	ИзвестныеЧасовыеПояса.Добавить(
		НовыйДанныеЧасовогоПояса(
			НСтр("ru = '(UTC+06:00) Омск'"),
			"+",
			6,
			0));
	
	ИзвестныеЧасовыеПояса.Добавить(
		НовыйДанныеЧасовогоПояса(
			НСтр("ru = '(UTC+07:00) Новосибирск'"),
			"+",
			7,
			0));
	
	ИзвестныеЧасовыеПояса.Добавить(
		НовыйДанныеЧасовогоПояса(
			НСтр("ru = '(UTC+08:00) Иркутск'"),
			"+",
			8,
			0));
	
	ИзвестныеЧасовыеПояса.Добавить(
		НовыйДанныеЧасовогоПояса(
			НСтр("ru = '(UTC+09:00) Якутск'"),
			"+",
			9,
			0));
	
	ИзвестныеЧасовыеПояса.Добавить(
		НовыйДанныеЧасовогоПояса(
			НСтр("ru = '(UTC+09:30) Дарвин'"),
			"+",
			9,
			30));
	
	ИзвестныеЧасовыеПояса.Добавить(
		НовыйДанныеЧасовогоПояса(
			НСтр("ru = '(UTC+10:00) Владивосток'"),
			"+",
			10,
			0));
	
	ИзвестныеЧасовыеПояса.Добавить(
		НовыйДанныеЧасовогоПояса(
			НСтр("ru = '(UTC+11:00) Сахалин'"),
			"+",
			11,
			0));
	
	ИзвестныеЧасовыеПояса.Добавить(
		НовыйДанныеЧасовогоПояса(
			НСтр("ru = '(UTC+12:00) Петропавловск-Камчатский'"),
			"+",
			12,
			0));
	
	ИзвестныеЧасовыеПояса.Добавить(
		НовыйДанныеЧасовогоПояса(
			НСтр("ru = '(UTC+13:00) Самоа'"),
			"+",
			13,
			0));
	
	ИзвестныеЧасовыеПояса.Добавить(
		НовыйДанныеЧасовогоПояса(
			НСтр("ru = '(UTC+14:00) Острова Киритимати'"),
			"+",
			14,
			0));
	
	Возврат ИзвестныеЧасовыеПояса;
	
КонецФункции

// Формирует новую структуру данных смещения.
// 
// Возвращаемое значение:
//  Структура - Пустая структура данных смещения.
//   * НаправлениеСмещения - Строка - Направление смещения часового пояса "+" или "-".
//   * СмещениеЧасов       - Число  - Смещение часов.
//   * СмещениеМинут       - Число  - Смещение минут.
//
Функция НовыйДанныеСмещения()
	
	ДанныеСмещения = Новый Структура("НаправлениеСмещения, СмещениеЧасов, СмещениеМинут");
	ДанныеСмещения.НаправлениеСмещения = "";
	ДанныеСмещения.СмещениеЧасов = 0;
	ДанныеСмещения.СмещениеМинут = 0;
	
	Возврат ДанныеСмещения;
	
КонецФункции

// Формирует часовой пояс, заданный частями.
//
// Параметры:
//  НаправлениеСмещения - Строка - Направление смещения часового пояса "+" или "-".
//  СмещениеЧасов       - Число  - Смещение часов.
//  СмещениеМинут       - Число  - Смещение минут.
// 
// Возвращаемое значение:
//  Строка - Часовой пояс в формате GMT{+/-}hh:mm.
//
Функция ЧасовойПоясЧастями(НаправлениеСмещения, СмещениеЧасов, СмещениеМинут)
	
	Возврат СтрШаблон("GMT%1%2:%3",
		НаправлениеСмещения,
		Формат(СмещениеЧасов, "ЧЦ=2; ЧН=00; ЧВН="),
		Формат(СмещениеМинут, "ЧЦ=2; ЧН=00; ЧВН="));
	
КонецФункции

#КонецОбласти




//////////////////////////////////////////////////////////////////////////////////
//// Модуль для работы с рабочим календарем.
////
//////////////////////////////////////////////////////////////////////////////////

//#Область ПрограммныйИнтерфейс

// Процедура обновляет отображение текущей записи календаря в планировщике.
//
// Параметры:
//  Планировщик - Планировщик - Планировщик.
//  НастройкиОтображения - Структура - Настройки отображения.
//
Процедура ОбновитьТекущуюЗапись(Планировщик, НастройкиОтображения) Экспорт
	
	ТекущаяЗаписьВПериодеОтображения = ВПериодеОтображенияПланировщика(
		Планировщик,
		НастройкиОтображения.ТекущаяЗаписьДатаНачала,
		НастройкиОтображения.ТекущаяЗаписьДатаОкончания);
	
	Если Не ТекущаяЗаписьВПериодеОтображения Тогда
		Центр_КалендарьСервер.ОтобразитьКалендарь(Планировщик, НастройкиОтображения);
	Иначе
		ОтобразитьТекущуюЗапись(Планировщик, НастройкиОтображения);
		ПрименитьНастройкиОтображения(Планировщик, НастройкиОтображения);
	КонецЕсли;
	
КонецПроцедуры

//// Процедура отображает текущую запись календаря в планировщике.
////
//// Параметры:
////  Планировщик - Планировщик - Планировщик.
////  НастройкиОтображения - Структура - Настройки отображения.
////  Ссылка - СправочникСсылка.ЗаписиРабочегоКалендаря - Ссылка.
////  ДатаНачала - Дата - Дата начала.
////  ДатаОкончания - Дата - Дата окончания.
////
Процедура ОтобразитьТекущуюЗапись(Планировщик, НастройкиОтображения) Экспорт
	
	УдалитьЭлементТекущейЗаписи(Планировщик, НастройкиОтображения);
	ДобавитьЭлементТекущейЗаписи(Планировщик, НастройкиОтображения);
	
КонецПроцедуры

// Формирует структуру элемента текущей записи календаря.
//
// Параметры:
//  ЗаписьКалендаря	 - СтрокаТаблицыЗначений,
//                     СправочникОбъект.ЗаписиРабочегоКалендаря,
//                     СправочникСсылка.ЗаписиРабочегоКалендаря - Данные записи календаря.
// 
// Возвращаемое значение:
//  Структура - Структура данных записи календаря.
//
Функция СформироватьЭлементТекущейЗаписиКалендаря(ДатаНачала, ДатаОкончания) Экспорт
	
	ЭлементЗаписиКалендаря = НовыйЭлементЗаписиКалендаря();
	ЭлементЗаписиКалендаря.ДатаНачала = ДатаНачала;
	ЭлементЗаписиКалендаря.ДатаОкончания = ДатаОкончания;
	ЭлементЗаписиКалендаря.ЭтоТекущаяЗапись = Истина;
	
	Возврат ЭлементЗаписиКалендаря;
	
КонецФункции

//// Применяет настройки отображения планировщика.
//// Параметры:
////  Планировщик - Планировщик - Планировщик на форме
////  НастройкиОтображения - Структура - Структура настроек отображения календаря.
////
Процедура ПрименитьНастройкиОтображения(Планировщик, НастройкиОтображения) Экспорт
	
		
	ПериодОтображения = ПолучитьПериодОтображения(НастройкиОтображения);
	ВыделенныеДаты = ПолучитьВыделенныеДаты(НастройкиОтображения);
	ОтображатьВремяС = НастройкиОтображения.ОтображатьВремяС;
	ОтображатьВремяПо = НастройкиОтображения.ОтображатьВремяПо - 1;
	
	// Заполнение текущих периодов отображения
	Планировщик.ТекущиеПериодыОтображения.Очистить();
	Для Каждого ВыделеннаяДата Из ВыделенныеДаты Цикл
		
		ОтображаемаяДатаНачала = ПолучитьДатуНачалаОтображаемогоПериода(ПериодОтображения, ВыделеннаяДата);
		ОтображаемаяДатаОкончания = ПолучитьДатуОкончанияОтображаемогоПериода(ПериодОтображения, ВыделеннаяДата);
		Планировщик.ТекущиеПериодыОтображения.Добавить(ОтображаемаяДатаНачала, ОтображаемаяДатаОкончания);
		
	КонецЦикла;
	
	// Отображаемые часы
	Если НастройкиОтображения.ОтображатьСкрытыеЭлементы Тогда
		Для Каждого Событие Из Планировщик.Элементы Цикл
			
			//Если ОтображатьВремяС = 0 И ОтображатьВремяПо = 0 Тогда
			//	Прервать;
			//КонецЕсли;
			//
			////Если Событие.Значение.ВесьДень Тогда
			////	Продолжить;
			////КонецЕсли;
			//
			//// Определяем час начала и окончания.
			//// Если окончание приходится на начало дня - то час окончания 24.
			//ЧасНачала = Цел((Событие.Начало - НачалоДня(Событие.Начало)) / 3600);
			//ЧасОкончания = Цел((Событие.Конец - НачалоДня(Событие.Конец - 1)) / 3600);
			//
			//// Определяем минимальное время для отображения.
			//// Час начала берем как есть.
			//// Час окончания берем предыдущий.
			////МинВремя = Мин(ЧасНачала, Макс(ЧасОкончания - 1, 0));
			////Если МинВремя < ОтображатьВремяС Тогда
			////	ОтображатьВремяС = МинВремя;
			////КонецЕсли;
			//
			//// Определяем максимальное время для отображения.
			//// Час начала берем следующий.
			//// Час окончания берем как есть, если час окончания приходится на начало часа, иначе следующий.
			//СмещениеЧасаОкончания = ?(Событие.Конец = НачалоЧаса(Событие.Конец), 0, 1);
			//МаксВремя = Макс(Мин(ЧасНачала + 1, 24), Мин(ЧасОкончания + СмещениеЧасаОкончания, 24));
			//ОтображатьВремяПоНормализованное = 24 - ОтображатьВремяПо;
			//Если МаксВремя > ОтображатьВремяПоНормализованное Тогда
			//	ОтображатьВремяПо = 24 - МаксВремя;
			//КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// Настройки общие для всех периодов отображения
	Планировщик.ОтображениеВремениЭлементов = НастройкиОтображения.НастройкаОтображениеВремениЭлементов;
	Планировщик.ВыравниватьГраницыЭлементовПоШкалеВремени = Истина;
	Планировщик.ЦветТекста = НастройкиОтображения.ЦветКалендаряПодпись;
	
	Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='ddd, d MMM yyyy'";
		
	// Фон календаря.
	ДобавитьФонКалендаря(Планировщик.ИнтервалыФона, НастройкиОтображения);
	
	// Настройки специфичные для периода отображения
	Если ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.День")
		Или ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ТриДня")
		Или ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Неделя")
		Или ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ДвеНедели") Тогда
		
		Планировщик.ЦветФона = НастройкиОтображения.ЦветКалендаряФонШапки;
		
		// Планировщик по часам
		Планировщик.ОтображатьТекущуюДату = Истина;
		Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Час;
		Планировщик.КратностьПериодическогоВарианта = 24;
		Планировщик.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Ложь;
		Планировщик.ОтображатьПеренесенныеЗаголовки = Истина;
		
		// Отображать только рабочее время
		Планировщик.ОтступСНачалаПереносаШкалыВремени = ОтображатьВремяС;
		Планировщик.ОтступСКонцаПереносаШкалыВремени = ОтображатьВремяПо;
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Месяц") Тогда
		
		Планировщик.ЦветФона = Новый Цвет();
		
		// Планировщик по дням
		Планировщик.ОтображатьТекущуюДату = Ложь;
		Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.День;
		Планировщик.КратностьПериодическогоВарианта = 7;
		Планировщик.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Истина;
		Планировщик.ОтображатьПеренесенныеЗаголовки = Ложь;
		Планировщик.ОтображатьПеренесенныеЗаголовки = Ложь;

		// Отображать только рабочее время
		Планировщик.ОтступСНачалаПереносаШкалыВремени = 0;
		Планировщик.ОтступСКонцаПереносаШкалыВремени = 0;

	КонецЕсли;
	
	// Шкала времени
	УстановитьШкалуВремени(Планировщик, НастройкиОтображения, ПериодОтображения);
	
	// Измерение Сотрудник
	Планировщик.Измерения.Очистить();
	
	Если НастройкиОтображения.ОтображатьСобытия Тогда
		
		Если НастройкиОтображения.ФизЛица.Количество() > 1 Тогда
			
			ИзмерениеПланировщика = Планировщик.Измерения.Добавить("ФизическоеЛицо");
			ИзмерениеПланировщика.Текст = НСтр("ru = 'Сотрудник'");
			
			Для Каждого ФизЛицо Из НастройкиОтображения.ФизЛица Цикл
				ЭлементИзмеренияПомещение = ИзмерениеПланировщика.Элементы.Добавить(ФизЛицо);
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли НастройкиОтображения.ОтображатьЗанятость Тогда
		
		ИзмерениеПланировщика = Планировщик.Измерения.Добавить("ФизическоеЛицо");
		
		ЭлементИзмеренияПомещение = ИзмерениеПланировщика.Элементы.Добавить("Общее");
		ЭлементИзмеренияПомещение.Текст = НСтр("ru = 'Общее'");
		
		Для Каждого ФизЛицо Из НастройкиОтображения.ФизЛица Цикл
			
			ЭлементИзмеренияПомещение = ИзмерениеПланировщика.Элементы.Добавить(ФизЛицо);
			Если НастройкиОтображения.ПредставленияИзмерений[ФизЛицо] <> Неопределено Тогда
				ЭлементИзмеренияПомещение.Текст =
					НастройкиОтображения.ПредставленияИзмерений[ФизЛицо];
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Выделение текущего дня.
	ДобавитьФонТекущегоДня(Планировщик.ИнтервалыФона, НастройкиОтображения);
	
КонецПроцедуры

// Корректирует дату начала и окончания события с учетом настройки "Весь день" и пустых дат.
Процедура СкорректироватьДатуНачалаИОкончания(
	ДатаНачала,
	ДатаОкончания,
	ВесьДень,
	НачальноеЗначениеДатаНачала = Неопределено,
	НачальноеЗначениеДатаОкончания = Неопределено,
	СохранятьДлительностьПриПереносеДатыОкончания = Ложь,
	ИзменилсяВесьДень = Ложь,
	СохранятьДлительностьПриПереносеДатыНачалаВПределахДня = Истина,
	ДлительностьСобытияПоУмолчанию = 3600,
	ИзменятьДатуНачалаИОкончания = Истина
	) Экспорт
	
	// Очистка времени
	Если Не ЗначениеЗаполнено(ДатаНачала) И Не ЗначениеЗаполнено(ДатаОкончания) Тогда
		НачальноеЗначениеДатаНачала = ДатаНачала;
		НачальноеЗначениеДатаОкончания = ДатаОкончания;
		Возврат;
	КонецЕсли;
	
	// Ввод пустого времени начала
	Если ЗначениеЗаполнено(НачальноеЗначениеДатаНачала)
		И ДатаНачала <> НачальноеЗначениеДатаНачала
		И Не ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаОкончания = ДатаНачала;
		НачальноеЗначениеДатаНачала = ДатаНачала;
		НачальноеЗначениеДатаОкончания = ДатаОкончания;
		Возврат;
	КонецЕсли;
	
	// Ввод пустого времени окончания
	Если ЗначениеЗаполнено(НачальноеЗначениеДатаОкончания)
		И ДатаОкончания <> НачальноеЗначениеДатаОкончания
		И Не ЗначениеЗаполнено(ДатаОкончания) Тогда
		ДатаНачала = ДатаОкончания;
		НачальноеЗначениеДатаНачала = ДатаНачала;
		НачальноеЗначениеДатаОкончания = ДатаОкончания;
		Возврат;
	КонецЕсли;
	
	Если ИзменятьДатуНачалаИОкончания Тогда
		
		// Сохранение длительность при переносе дата начала.
		Если СохранятьДлительностьПриПереносеДатыНачалаВПределахДня Тогда
			Если ЗначениеЗаполнено(НачальноеЗначениеДатаНачала)
				И ДатаНачала <> НачальноеЗначениеДатаНачала
				И НачальноеЗначениеДатаНачала <= НачальноеЗначениеДатаОкончания Тогда
				НачальнаяДлительность = НачальноеЗначениеДатаОкончания - НачальноеЗначениеДатаНачала;
				ДатаОкончания = ДатаНачала + НачальнаяДлительность;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(НачальноеЗначениеДатаНачала)
				И НачалоДня(ДатаНачала) <> НачалоДня(НачальноеЗначениеДатаНачала)
				И НачальноеЗначениеДатаНачала <= НачальноеЗначениеДатаОкончания Тогда
				НачальнаяДлительность = НачальноеЗначениеДатаОкончания - НачальноеЗначениеДатаНачала;
				ДатаОкончания = ДатаНачала + НачальнаяДлительность;
			КонецЕсли;
		КонецЕсли;
		
		Если ВесьДень Тогда
			
			Если ЗначениеЗаполнено(ДатаНачала) И НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
				ДатаОкончания = КонецДня(ДатаНачала);
			ИначеЕсли НЕ ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания) Тогда
				ДатаНачала = НачалоДня(ДатаОкончания);
			КонецЕсли;
			
			Если ДатаНачала <> НачалоДня(ДатаНачала) Тогда
				ДатаНачала = НачалоДня(ДатаНачала);
			КонецЕсли;
			
			Если ДатаОкончания <> КонецДня(ДатаОкончания) Тогда
				ДатаОкончания = КонецДня(ДатаОкончания);
			КонецЕсли;
			
		Иначе
			
			Если ИзменилсяВесьДень Тогда
				ДатаОкончания = ДатаНачала + ДлительностьСобытияПоУмолчанию;
			ИначеЕсли ЗначениеЗаполнено(ДатаНачала) И НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
				ДатаОкончания = ДатаНачала + ДлительностьСобытияПоУмолчанию;
			ИначеЕсли НЕ ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания) Тогда
				Если ДатаОкончания = НачалоДня(ДатаОкончания) Тогда
					ДатаНачала = НачалоДня(ДатаОкончания);
					ДатаОкончания = ДатаНачала + ДлительностьСобытияПоУмолчанию;
				Иначе
					ДатаНачала = ДатаОкончания - ДлительностьСобытияПоУмолчанию;
				КонецЕсли;
			ИначеЕсли СохранятьДлительностьПриПереносеДатыОкончания
				И ЗначениеЗаполнено(НачальноеЗначениеДатаОкончания)
				И ДатаОкончания <> НачальноеЗначениеДатаОкончания
				И НачальноеЗначениеДатаНачала <= НачальноеЗначениеДатаОкончания Тогда
				
				НачальнаяДлительность = НачальноеЗначениеДатаОкончания - НачальноеЗначениеДатаНачала;
				ДатаНачала = ДатаОкончания - НачальнаяДлительность;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НачальноеЗначениеДатаНачала = ДатаНачала;
	НачальноеЗначениеДатаОкончания = ДатаОкончания;
	
КонецПроцедуры

// Возвращает дату приведенную к началу периода отображения календаря
Функция ПолучитьДатуНачалаОтображаемогоПериода(ПериодОтображения, Дата) Экспорт
	
	ДатаНачалаПериода = Неопределено;
	
	Если ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.День") Тогда
		
		ДатаНачалаПериода = НачалоДня(Дата);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ТриДня") Тогда
		
		ДатаНачалаПериода = НачалоДня(Дата);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Неделя") Тогда
		
		ДатаНачалаПериода = НачалоНедели(Дата);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ДвеНедели") Тогда
		
		ДатаНачалаПериода = НачалоНедели(Дата);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Месяц") Тогда
		
		ДатаНачалаПериода = НачалоНедели(НачалоМесяца(Дата));
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДня") Тогда
		
		Если НачалоДня(Дата) = НачалоДня(ТекущаяДата()) Тогда
			ДатаНачалаПериода = НачалоДня(Дата) - 2 * 86400; // 86400 - число секунд в сутках
		Иначе
			ДатаНачалаПериода = НачалоДня(Дата);
		КонецЕсли;
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДняРабочийСтол") Тогда
		
		ДатаНачалаПериода = НачалоДня(Дата);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДняДень") Тогда
		
		ДатаНачалаПериода = НачалоДня(Дата);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.НеделяСТекущейДаты") Тогда
		
		ДатаНачалаПериода = НачалоДня(Дата);
		
	КонецЕсли;
	Возврат ДатаНачалаПериода;
	
КонецФункции

// Возвращает дату приведенную к концу периода отображения календаря
Функция ПолучитьДатуОкончанияОтображаемогоПериода(ПериодОтображения, Дата) Экспорт
	
	ДатаОкончанияПериода = Неопределено;
	
	Если ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.День") Тогда
		
		ДатаОкончанияПериода = КонецДня(Дата);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ТриДня") Тогда
		
		ДатаОкончанияПериода = КонецДня(Дата) + 2 *86400;
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Неделя") Тогда
		
		ДатаОкончанияПериода = КонецНедели(Дата);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ДвеНедели") Тогда
		
		ДатаОкончанияПериода = КонецНедели(Дата) + 604800; // 604800 - число секунд в неделе
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Месяц") Тогда
		
		ДатаОкончанияПериода = КонецНедели(КонецМесяца(Дата));
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДня") Тогда
		
		ДатаОкончанияПериода = КонецДня(Дата) + 6 * 86400; // 86400 - число секунд в сутках
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДняРабочийСтол") Тогда
		
		ДатаОкончанияПериода = КонецДня(Дата) + 2 * 86400; // 86400 - число секунд в сутках
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДняДень") Тогда
		
		ДатаОкончанияПериода = КонецДня(Дата);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.НеделяСТекущейДаты") Тогда
		
		ДатаОкончанияПериода = (НачалоДня(Дата) - 1) + 604800; // 604800 - число секунд в неделе
		
	КонецЕсли;
	
	Возврат ДатаОкончанияПериода;
	
КонецФункции

// Возвращает дату приведенную к началу следующего периода отображения календаря
Функция ПолучитьДатуНачалаСледующегоПериода(ПериодОтображения, Дата) Экспорт
	
	ДатаНачалаСледующегоПериода = Неопределено;
	
	Если ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.День") Тогда
		
		ДатаНачалаСледующегоПериода = КонецДня(Дата) + 1;
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ТриДня") Тогда
		
		ДатаНачалаСледующегоПериода = КонецДня(Дата) + 2 *86400 + 1;
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Неделя")
		Или ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ДвеНедели") Тогда
		
		ДатаНачалаСледующегоПериода = КонецНедели(Дата) + 1;
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Месяц") Тогда
		
		ДатаНачалаСледующегоПериода = КонецМесяца(Дата) + 1;
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.НеделяСТекущейДаты")
		Или ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДня") Тогда
		
		ДатаНачалаСледующегоПериода = НачалоДня(Дата) + 604800; // 604800 - число секунд в неделе
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат ДатаНачалаСледующегоПериода;
	
КонецФункции

//// Возвращает дату приведенную к началу предыдущего периода отображения календаря
Функция ПолучитьДатуНачалаПредыдущегоПериода(ПериодОтображения, Дата) Экспорт
	
	ДатаНачалаПредыдущегоПериода = Неопределено;
	
	Если ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.День") Тогда
		
		ДатаНачалаПредыдущегоПериода = НачалоДня(НачалоДня(Дата) - 1);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ТриДня") Тогда
		
		ДатаНачалаПредыдущегоПериода = НачалоДня(НачалоДня(Дата - 2 * 86400) - 1);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Неделя")
		Или ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ДвеНедели") Тогда
		
		ДатаНачалаПредыдущегоПериода = НачалоНедели(НачалоНедели(Дата) - 1);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Месяц") Тогда
		
		ДатаНачалаПредыдущегоПериода = НачалоМесяца(НачалоМесяца(Дата) - 1);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.НеделяСТекущейДаты")
		Или ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДня") Тогда
		
		ДатаНачалаПредыдущегоПериода = НачалоДня(Дата) - 604800; // 604800 - число секунд в неделе
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат ДатаНачалаПредыдущегоПериода;
	
КонецФункции

// Приводит переданную дату к концу получаса
Функция КонецПолучаса(Дата) Экспорт
	
	Если Дата = НачалоЧаса(Дата) ИЛИ Дата = (НачалоЧаса(Дата) + 1800) Тогда
		Возврат Дата;
	КонецЕсли;
	
	КонецПолучаса = КонецЧаса(Дата) + 1;
	
	Если КонецПолучаса - Дата > 1800 Тогда
		
		КонецПолучаса = КонецПолучаса - 1800;
		
	КонецЕсли;
	
	Возврат КонецПолучаса;
	
КонецФункции

//// Возвращает период отображения с учетом настроек отображения.
////
//// Параметры:
////  НастройкиОтображения - Структура - Структура настроек отображения календаря.
////
//// Возвращаемое значение:
////  ПеречислениеСсылка.ПериодОтображенияРабочегоКалендаря - Период отображения.
//
Функция ПолучитьПериодОтображения(НастройкиОтображения) Экспорт
	
	Если НастройкиОтображения.ВыделенныеДаты.Количество() > 1 Тогда   
		
		Если НастройкиОтображения.ПериодОтображения =
			ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДня") Тогда
			ПериодОтображения =
				ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДняДень");
		Иначе
			ПериодОтображения =
				ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.День");
		КонецЕсли;
	Иначе
		ПериодОтображения = НастройкиОтображения.ПериодОтображения;
	КонецЕсли;
	
	Возврат ПериодОтображения;
КонецФункции

// Возвращает выделенные даты в планировщике.
//
// Параметры:
//  НастройкиОтображения - Структура - Структура настроек отображения календаря.
//
// Возвращаемое значение:
//  Массив из Дата
//
Функция ПолучитьВыделенныеДаты(НастройкиОтображения) Экспорт
	
	ВыделенныеДаты = НастройкиОтображения.ВыделенныеДаты;
	
	Если ВыделенныеДаты.Количество() = 0 Тогда
		ВыделенныеДаты.Добавить(НастройкиОтображения.ОтображаемаяДата);
	КонецЕсли;
	
	СписокДат = Новый СписокЗначений;
	СписокДат.ЗагрузитьЗначения(ВыделенныеДаты);
	СписокДат.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	ВыделенныеДаты = СписокДат.ВыгрузитьЗначения();
	
	Возврат ВыделенныеДаты;
	
КонецФункции

//// Возвращает необходимость отображения занятости в планировщике.
////
//// Параметры:
////  НастройкиОтображения - Структура - Структура настроек отображения календаря.
////
//// Возвращаемое значение:
////  Булево - Необходимость отображения занятости в планировщике.
////
Функция ПолучитьОтобразитьЗанятостьВДне(НастройкиОтображения) Экспорт
	
	ПериодОтображения = ПолучитьПериодОтображения(НастройкиОтображения);
	ОтобразитьЗанятостьВДне =
		(НастройкиОтображения.ОтображатьЗанятость
			И 
			((ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.День"))
				Или (ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ТриДня"))
				Или (ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Неделя"))
				Или (ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ДвеНедели")))
		)
		Или 
		НастройкиОтображения.ОтображатьОбщуюЗанятость;
	
	Возврат ОтобразитьЗанятостьВДне;  
	
	Возврат НастройкиОтображения.ОтображатьОбщуюЗанятость;
	
КонецФункции

// Возвращает общую дату начала.
//
// Параметры:
//  НастройкиОтображения - Структура - Структура настроек отображения календаря.
//
// Возвращаемое значение:
//  Дата - Общая дата начала.
//
Функция ПолучитьДатаНачалаОбщая(НастройкиОтображения) Экспорт
	
	ПериодОтображения = ПолучитьПериодОтображения(НастройкиОтображения);
	ВыделенныеДаты = ПолучитьВыделенныеДаты(НастройкиОтображения);
	
	ДатаНачалаОбщая = Неопределено;
	Для Каждого ВыделеннаяДата Из ВыделенныеДаты Цикл
		
		ОтображаемаяДатаНачала = ПолучитьДатуНачалаОтображаемогоПериода(ПериодОтображения, ВыделеннаяДата);
		Если ДатаНачалаОбщая = Неопределено Тогда
			ДатаНачалаОбщая = ОтображаемаяДатаНачала;
		Иначе
			ДатаНачалаОбщая = Мин(ДатаНачалаОбщая, ОтображаемаяДатаНачала);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДатаНачалаОбщая;
	
КонецФункции

// Возвращает общую дату окончания.
//
// Параметры:
//  НастройкиОтображения - Структура - Структура настроек отображения календаря.
//
// Возвращаемое значение:
//  Дата - Общая дата начала.
//
Функция ПолучитьДатаОкончанияОбщая(НастройкиОтображения) Экспорт
	
	ПериодОтображения = ПолучитьПериодОтображения(НастройкиОтображения);
	ВыделенныеДаты = ПолучитьВыделенныеДаты(НастройкиОтображения);
	
	ДатаОкончанияОбщая = Неопределено;
	Для Каждого ВыделеннаяДата Из ВыделенныеДаты Цикл
		
		ОтображаемаяДатаОкончания = ПолучитьДатуОкончанияОтображаемогоПериода(ПериодОтображения, ВыделеннаяДата);
		Если ДатаОкончанияОбщая = Неопределено Тогда
			ДатаОкончанияОбщая = ОтображаемаяДатаОкончания;
		Иначе
			ДатаОкончанияОбщая = Макс(ДатаОкончанияОбщая, ОтображаемаяДатаОкончания);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДатаОкончанияОбщая;
	
КонецФункции

// Формирует структуру элемента записи календаря.
//
// Параметры:
//  ЗаписьКалендаря	 - СтрокаТаблицыЗначений,
//                     СправочникОбъект.ЗаписиРабочегоКалендаря,
//                     СправочникСсылка.ЗаписиРабочегоКалендаря - Данные записи календаря.
// 
// Возвращаемое значение:
//  Структура - Структура данных записи календаря.
//
Функция СформироватьЭлементЗаписиКалендаря(ЗаписьКалендаря) Экспорт
	
	ЭлементЗаписиКалендаря = НовыйЭлементЗаписиКалендаря();
	ЗаполнитьЗначенияСвойств(ЭлементЗаписиКалендаря, ЗаписьКалендаря);
	
	//Если ЗаписьКалендаря.ТипЗаписиКалендаря
	//		= ПредопределенноеЗначение("Перечисление.ТипЗаписиКалендаря.ПовторяющеесяСобытие") Тогда
	//	ЭлементЗаписиКалендаря.ВидЭлемента =
	//		ПредопределенноеЗначение("Перечисление.ЭлементыРабочегоКалендаря.СобытиеПовторяющееся");
	//КонецЕсли;
	ЭлементЗаписиКалендаря.ДатаНачалаИсходная = ЗаписьКалендаря.ДатаНачала;
	
	Возврат ЭлементЗаписиКалендаря;
	
КонецФункции

// Проверяет что переданное значение является элементов записи календаря.
//
// Параметры:
//  ЭлементЗаписиКалендаря - Структура - Проверяемое значение
//
// Возвращаемое значение:
//  Булево - Переданное значение является элементом записи календаря.
//
Функция ЭтоЭлементЗаписиКалендаря(ЭлементЗаписиКалендаря) Экспорт
	
	Если ТипЗнч(ЭлементЗаписиКалендаря) <> Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЭлементЗаписиКалендаря.Свойство("Ссылка")
		И ЭлементЗаписиКалендаря.Свойство("ДатаНачала")
		И ЭлементЗаписиКалендаря.Свойство("ДатаОкончания")
		И ЭлементЗаписиКалендаря.Свойство("ВесьДень")
		И ЭлементЗаписиКалендаря.Свойство("ТипЗаписиКалендаря")
		И ЭлементЗаписиКалендаря.Свойство("ПометкаУдаления")
		И ЭлементЗаписиКалендаря.Свойство("Сотрудник")
		И ЭлементЗаписиКалендаря.Свойство("ФизическоеЛицо")
		И ЭлементЗаписиКалендаря.Свойство("ВидЭлемента")
		И ЭлементЗаписиКалендаря.Свойство("ДатаНачалаИсходная")
		И ЭлементЗаписиКалендаря.Свойство("УникальныйИдентификатор");
//	
КонецФункции

// Устанавливает значение измерения интервала фона.
//
// Параметры:
//  ИнтервалФона - ИнтервалФонаПланировщика
//  Измерение - Строка
//  ЗначениеИзмерения - Произвольный
//
Процедура УстановитьЗначениеИзмеренияИнтервалаФона(ИнтервалФона, Измерение, ЗначениеИзмерения) Экспорт
	
	СоответствиеИзмерений = Новый Соответствие();
	СоответствиеИзмерений.Вставить(Измерение, ЗначениеИзмерения);
	ИнтервалФона.ЗначенияИзмерений = Новый ФиксированноеСоответствие(СоответствиеИзмерений);
	
КонецПроцедуры

// Добавляем в интервалы фона фон текущего дня.
//
// Параметры:
//  ИнтервалыФона - КоллекцияИнтерваловФонаПланировщика - Интервалы фоны, в которые следует добавить фон текущего дня.
//  НастройкиОтображения - Структура - Структура настроек отображения календаря.
//
Процедура ДобавитьФонТекущегоДня(ИнтервалыФона, НастройкиОтображения)
	
	Для Каждого ФизическоеЛицо Из НастройкиОтображения.ФизЛица Цикл
		
		ИнтервалыФонаТекущегоДня = Новый Массив;
		ВозможныеИнтервалыФонаТекущегоДня = Новый Массив;
		ВозможныеИнтервалыФонаТекущегоДня.Добавить(
			СформироватьВремяИнтервалаФона(НачалоДня(ТекущаяДата()), КонецДня(ТекущаяДата())));
		
		Пока ВозможныеИнтервалыФонаТекущегоДня.Количество() <> 0 Цикл
			
			ВозможныйИнтервалФона = ВозможныеИнтервалыФонаТекущегоДня[0];
			
			ЕстьПересечения = Ложь;
			Для Каждого ИнтервалФона Из ИнтервалыФона Цикл
				
				// Для каждого пользователя рассчитываем отдельно.
				Если ИнтервалФона.ЗначенияИзмерений["ФизическоеЛицо"] <> ФизическоеЛицо Тогда
					Продолжить;
				КонецЕсли;
				
				// Интервал фона пустой.
				Если ИнтервалФона.Цвет = НастройкиОтображения.ЦветКалендаряДоступноеВремя Тогда
					Продолжить;
				КонецЕсли;
				
				// Интервал фона до текущего дня.
				Если ИнтервалФона.Конец <= ВозможныйИнтервалФона.Начало Тогда
					Продолжить;
				КонецЕсли;
				
				// Интервал фона после текущего дня.
				Если ИнтервалФона.Начало >= ВозможныйИнтервалФона.Конец Тогда
					Продолжить;
				КонецЕсли;
				
				ЕстьПересечения = Истина;
				
				// Интервал фона покрывает текущий день.
				Если ИнтервалФона.Начало <= ВозможныйИнтервалФона.Начало
					И ИнтервалФона.Конец >= ВозможныйИнтервалФона.Конец Тогда
					Прервать;
				КонецЕсли;
				
				// Интервал фона закрывает начало текущего дня.
				Если ИнтервалФона.Начало <= ВозможныйИнтервалФона.Начало
					И ИнтервалФона.Конец > ВозможныйИнтервалФона.Начало
					И ИнтервалФона.Конец < ВозможныйИнтервалФона.Конец Тогда
					ВозможныеИнтервалыФонаТекущегоДня.Добавить(
						СформироватьВремяИнтервалаФона(ИнтервалФона.Конец, ВозможныйИнтервалФона.Конец));
					Прервать;
				КонецЕсли;
				
				// Интервал фона закрывает конец текущего дня.
				Если ИнтервалФона.Начало > ВозможныйИнтервалФона.Начало
					И ИнтервалФона.Начало < ВозможныйИнтервалФона.Конец
					И ИнтервалФона.Конец >= ВозможныйИнтервалФона.Конец Тогда
					ВозможныеИнтервалыФонаТекущегоДня.Добавить(
						СформироватьВремяИнтервалаФона(ВозможныйИнтервалФона.Начало, ИнтервалФона.Начало));
					Прервать;
				КонецЕсли;
				
				// Интервал фона входит в текущий день.
				Если ИнтервалФона.Начало > ВозможныйИнтервалФона.Начало
					И ИнтервалФона.Начало < ВозможныйИнтервалФона.Конец
					И ИнтервалФона.Конец > ВозможныйИнтервалФона.Начало
					И ИнтервалФона.Конец < ВозможныйИнтервалФона.Конец Тогда
					ВозможныеИнтервалыФонаТекущегоДня.Добавить(
						СформироватьВремяИнтервалаФона(ИнтервалФона.Конец, ВозможныйИнтервалФона.Конец));
					ВозможныеИнтервалыФонаТекущегоДня.Добавить(
						СформироватьВремяИнтервалаФона(ВозможныйИнтервалФона.Начало, ИнтервалФона.Начало));
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если Не ЕстьПересечения Тогда
				ИнтервалыФонаТекущегоДня.Добавить(ВозможныйИнтервалФона);
			КонецЕсли;
			
			ВозможныеИнтервалыФонаТекущегоДня.Удалить(0);
			
		КонецЦикла;
		
		Для Каждого ИнтервалФона Из ИнтервалыФонаТекущегоДня Цикл
			ФонТекущегоДня = ИнтервалыФона.Добавить(
				ИнтервалФона.Начало, ИнтервалФона.Конец);
			ФонТекущегоДня.Цвет = НастройкиОтображения.ЦветФонаТекущегоДня;
			УстановитьЗначениеИзмеренияИнтервалаФона(
				ФонТекущегоДня,
				"ФизическоеЛицо",
				ФизическоеЛицо);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляем в интервалы фона фон календаря.
//
// Параметры:
//  ИнтервалыФона - КоллекцияИнтерваловФонаПланировщика - Интервалы фоны, в которые следует добавить фон текущего дня.
//  НастройкиОтображения - Структура - Структура настроек отображения календаря.
//
Процедура ДобавитьФонКалендаря(ИнтервалыФона, НастройкиОтображения)
	
	Если НастройкиОтображения.ОтображатьЗанятость И НастройкиОтображения.ОтображатьСобытия Тогда
		Возврат;
	КонецЕсли;
	
	ДатаНачалаОбщая = ПолучитьДатаНачалаОбщая(НастройкиОтображения);
	ДатаОкончанияОбщая = ПолучитьДатаОкончанияОбщая(НастройкиОтображения);
	Если ДатаНачалаОбщая = Неопределено Или ДатаОкончанияОбщая = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ИнтервалФона Из ИнтервалыФона Цикл
		
		// Интервал фона пустой.
		Если ИнтервалФона.Цвет = НастройкиОтображения.ЦветКалендаряДоступноеВремя
			И ИнтервалФона.Начало = ДатаНачалаОбщая
			И ИнтервалФона.Конец = ДатаОкончанияОбщая Тогда
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ФизическоеЛицо Из НастройкиОтображения.ФизЛица Цикл
		ФонПланировщика = ИнтервалыФона.Добавить(ДатаНачалаОбщая, ДатаОкончанияОбщая);
		ФонПланировщика.Цвет = НастройкиОтображения.ЦветКалендаряДоступноеВремя;
		УстановитьЗначениеИзмеренияИнтервалаФона(
			ФонПланировщика,
			"ФизическоеЛицо",
			ФизическоеЛицо);
	КонецЦикла;
	
КонецПроцедуры

// Формирует структуру времени интервала фона.
//
// Параметры:
//  Начало	 - Дата	 - Начало времени интервала фона.
//  Конец	 - Дата	 - Конец времени интервала фона.
// 
// Возвращаемое значение:
//  Структура - Структура времени интервала фона.
//
Функция СформироватьВремяИнтервалаФона(Начало, Конец)
	
	Время = Новый Структура("Начало, Конец");
	Время.Начало = Начало;
	Время.Конец = Конец;
	
	Возврат Время;
	
КонецФункции

// Проверяет, что переданный период находится в периоде отображения планировщика.
//
// Параметры:
//  Планировщик - Планировщик - Планировщик.
//  ДатаНачала - Дата - Дата начала.
//  ДатаОкончания - Дата - Дата окончания.
//
// Возвращаемое значение:
//  Булево - Период в периоде отображения планировщика.
//
Функция ВПериодеОтображенияПланировщика(Планировщик, ДатаНачала, ДатаОкончания)
	
	ВПериодеОтображенияПланировщика = ДатаНачала >= Планировщик.НачалоПериодаОтображения
		И ДатаОкончания <= Планировщик.КонецПериодаОтображения;
	
	Возврат ВПериодеОтображенияПланировщика;
	
КонецФункции

// Добавляет элемент текущей записи в планировщик.
//
// Параметры:
//  Планировщик - Планировщик - Планировщик.
//  НастройкиОтображения - Структура - Настройки отображения.
//
Процедура ДобавитьЭлементТекущейЗаписи(Планировщик, НастройкиОтображения)
	
	Если НастройкиОтображения.ТекущаяЗаписьВесьДень Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементПланировщика = Планировщик.Элементы.Добавить(
		НастройкиОтображения.ТекущаяЗаписьДатаНачала,
		НастройкиОтображения.ТекущаяЗаписьДатаОкончания);
	ЭлементПланировщика.Значение = СформироватьЭлементТекущейЗаписиКалендаря(
		НастройкиОтображения.ТекущаяЗаписьДатаНачала,
		НастройкиОтображения.ТекущаяЗаписьДатаОкончания);
	ЭлементПланировщика.ЦветФона = НастройкиОтображения.ЦветКалендаряТекущаяЗапись;
	ЭлементПланировщика.ЦветТекста = НастройкиОтображения.ЦветКалендаряПодпись;
	ЭлементПланировщика.ЦветРамки = НастройкиОтображения.ЦветРамкиТекущаяЗапись;
	ЭлементПланировщика.Текст = НСтр("ru = 'Текущая запись календаря'");
	
КонецПроцедуры

// Формирует структуру элемента записи календаря.
// 
// Возвращаемое значение:
//  Структура - Элемент записи календаря.
//
Функция НовыйЭлементЗаписиКалендаря() Экспорт
	
	ЭлементЗаписиКалендаря = Новый Структура;
	
	ЭлементЗаписиКалендаря.Вставить("Ссылка",
		ПредопределенноеЗначение("Справочник.Центр_Календарь.ПустаяСсылка"));
	ЭлементЗаписиКалендаря.Вставить("ДатаНачала", Дата(1,1,1));
	ЭлементЗаписиКалендаря.Вставить("ДатаОкончания", Дата(1,1,1));
	ЭлементЗаписиКалендаря.Вставить("ВесьДень", Ложь);
	ЭлементЗаписиКалендаря.Вставить("ТипЗаписиКалендаря",
		ПредопределенноеЗначение("Перечисление.ТипЗаписиКалендаря.ПустоеЗначение"));
	ЭлементЗаписиКалендаря.Вставить("ПометкаУдаления", Ложь);
	ЭлементЗаписиКалендаря.Вставить("Сотрудник",
		ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
	ЭлементЗаписиКалендаря.Вставить("ФизическоеЛицо",
		ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
	ЭлементЗаписиКалендаря.Вставить("Предмет", Неопределено);
	ЭлементЗаписиКалендаря.Вставить("Связанная", Ложь);
	ЭлементЗаписиКалендаря.Вставить("ЭтоТекущаяЗапись", Ложь);
	//ЭлементЗаписиКалендаря.Вставить("ВидЭлемента",
	//	ПредопределенноеЗначение("Перечисление.ЭлементыРабочегоКалендаря.ПустоеЗначение"));
	ЭлементЗаписиКалендаря.Вставить("ДатаНачалаИсходная", Дата(1,1,1));
	ЭлементЗаписиКалендаря.Вставить("УникальныйИдентификатор", Новый УникальныйИдентификатор);
	
	Возврат ЭлементЗаписиКалендаря;
	
КонецФункции

// Удаляет элемент текущей записи из планировщика.
//
// Параметры:
//  Планировщик - Планировщик - Планировщик.
//  НастройкиОтображения - Структура - Настройки отображения.
//
Процедура УдалитьЭлементТекущейЗаписи(Планировщик, НастройкиОтображения)
	
	КоличествоЭлементов = Планировщик.Элементы.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		ЭлементПланировщика = Планировщик.Элементы[КоличествоЭлементов - Индекс];
		Если ЭлементПланировщика.Значение.Ссылка = НастройкиОтображения.ТекущаяЗаписьСсылка 
			Или ЭлементПланировщика.Значение.ЭтоТекущаяЗапись Тогда
			Планировщик.Элементы.Удалить(ЭлементПланировщика);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//// Устанавливает шкалу времени планировщика в соответствии с персональными настройками.
//
Процедура УстановитьШкалуВремени(Планировщик, НастройкиОтображения, ПериодОтображения)
	
	КоличествоЭлементов = Планировщик.ШкалаВремени.Элементы.Количество();
	Если КоличествоЭлементов >= 2 Тогда
		Для Индекс = 1 По КоличествоЭлементов - 1 Цикл
			ЭтотЭлемент = Планировщик.ШкалаВремени.Элементы[КоличествоЭлементов - Индекс];
			Планировщик.ШкалаВремени.Элементы.Удалить(ЭтотЭлемент);
		КонецЦикла;
	КонецЕсли;
	
	Если ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.День")
		Или ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ТриДня")
		Или ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Неделя")
		Или ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ДвеНедели") Тогда
		
		Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Лево;
		
		ШкалаВремениЧас = Планировщик.ШкалаВремени.Элементы[0];
		ШкалаВремениЧас.ОтображатьПериодическиеМетки = Истина;
		ШкалаВремениЧас.Единица = ТипЕдиницыШкалыВремени.Час;
		ШкалаВремениЧас.Кратность = 1;
		ШкалаВремениЧас.Формат = "DF='HH:mm'";
		ШкалаВремениЧас.ЦветТекста = НастройкиОтображения.ЦветКалендаряПодпись;
		ШкалаВремениЧас.ЦветФона = НастройкиОтображения.ЦветКалендаряФонШапки;
		
		ШкалаВремениМинута = Планировщик.ШкалаВремени.Элементы.Добавить();
		ШкалаВремениМинута.ОтображатьПериодическиеМетки = Ложь;
		ШкалаВремениМинута.Единица = ТипЕдиницыШкалыВремени.Минута;
		ШкалаВремениМинута.Кратность = НастройкиОтображения.РазмерЯчейкиВремени;
		ШкалаВремениМинута.Формат = "";
		ШкалаВремениМинута.ЦветТекста = НастройкиОтображения.ЦветКалендаряПодпись;
		ШкалаВремениМинута.ЦветФона = НастройкиОтображения.ЦветКалендаряФонШапки;
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Месяц") Тогда
		
		Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Верх;
		
		ШкалаВремени = Планировщик.ШкалаВремени.Элементы[0];
		ШкалаВремени.ОтображатьПериодическиеМетки = Истина;
		ШкалаВремени.Единица = ТипЕдиницыШкалыВремени.День;
		ШкалаВремени.Кратность = 1;
		
		ШкалаВремени.Формат = "ДФ='ddd, d MMM yyyy'";
		ШкалаВремени.ЦветТекста = НастройкиОтображения.ЦветКалендаряПодпись;
		ШкалаВремени.ЦветФона = Новый Цвет();
		
	КонецЕсли;
	
КонецПроцедуры

//#КонецОбласти
