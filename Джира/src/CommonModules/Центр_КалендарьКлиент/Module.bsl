
//////////////////////////////////////////////////////////////////////////////////
//// Модуль для работы с рабочим календарем.
////
//////////////////////////////////////////////////////////////////////////////////


//// Обрабатывает удаление элемента планировщика.
////
//// Параметры:
////  Планировщик	 - Планировщик	 - Планировщик.
////  Отказ		 - Булево		 - Отказ.
////
Процедура ОбработкаПередУдалениемЭлемента(Планировщик, Отказ) Экспорт
	
	Отказ = Истина;
	
	ПометкаУдаления = Ложь;
	События = ПолучитьСобытияВВыделеннойОбласти(Планировщик, ПометкаУдаления, Ложь);
	Если События.Количество() = 0  Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПометкиУдаления(События, Не ПометкаУдаления);
	
КонецПроцедуры

//// Обрабатывает начало редактирования элемента планировщика.
////
//// Параметры:
////  Планировщик				 - Планировщик						 - Планировщик.
////  НовыйЭлемент			 - Булево							 - Признак создания нового элемента.
////  СтандартнаяОбработка	 - Булево							 - Стандартная обработка.
////  ФизЛицоКалендаря		 - СправочникСсылка.ФизическиеЛица	 - физ. лицо, для календаря которого выполняется обработка.
////
Процедура ОбработкаПередНачаломРедактированиемЭлемента(Планировщик, НовыйЭлемент,
	СтандартнаяОбработка, ФизЛицоКалендаря) Экспорт
//	
//	СтандартнаяОбработка = Ложь;
//	Если НовыйЭлемент Тогда
//		ОбработкаНачалаСозданияЭлемента(Планировщик, ФизЛицоКалендаря);
//		Возврат;
//	КонецЕсли;
//	
//	ПоказатьЭлементПланировщика(Планировщик);
//	
КонецПроцедуры

//// Обрабатывает окончание редактирования элемента планировщика.
////
//// Параметры:
////  Планировщик				 - Планировщик					 - Планировщик.
////  НовыйЭлемент			 - Булево						 - Признак создания нового элемента.
////  ОтменаРедактирования	 - Булево						 - Отмена редактирования.
////  УникальныйИдентификатор	 - УникальныйИдентификатор		 - Уникальный идентификатор элемента.
////  ФизЛицоКалендаря		 - СправочникСсылка.ФизическиеЛица - физ. лицо, для календаря которого выполняется обработка.
////
Процедура ОбработкаОкончанияРедактированияЭлемента(Планировщик, НовыйЭлемент, ОтменаРедактирования,
	ДанныеФормыПланировщик, НастройкиОтображения, УникальныйИдентификатор, ФизЛицоКалендаря) Экспорт
	
	Если НастройкиОтображения.ЗапретИзменения Тогда
		ОтменаРедактирования = Истина;
		Возврат;
	КонецЕсли;
	
	Попытка
		
		Если НовыйЭлемент Тогда
			
			// Запрет массового копирования
			Если Планировщик.ВыделенныеЭлементы.Количество() <> 1 Тогда
				ОтменаРедактирования = Истина;
				Возврат;
			КонецЕсли;
			
			ОбработкаСозданиеЭлемента(Планировщик, ДанныеФормыПланировщик, НастройкиОтображения, ФизЛицоКалендаря);
			
		Иначе
			ОбработкаОкончанияРедактирования(Планировщик, ДанныеФормыПланировщик, НастройкиОтображения, УникальныйИдентификатор);
		КонецЕсли;
		
	Исключение
		ОтменаРедактирования = Истина;
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры


//// Обрабатывает создание элемента планировщика.
////
//// Параметры:
////  Планировщик			 - Планировщик	 - Планировщик.
////  СтандартнаяОбработка - Булево		 - Стандартная обработка.
////
Процедура ОбработкаПриАктивизации(Планировщик, СтандартнаяОбработка) Экспорт
	
	КонтекстноеМеню =
		Планировщик.КонтекстноеМеню.ПодчиненныеЭлементы["ПланировщикКонтекстноеМенюКомандыЭлемента"];
	Если Планировщик.ВыделенныеЭлементы = Неопределено Тогда
		ЕстьВыделенныеЭлементы = Ложь;
		ЕстьТекущаяЗапись = Ложь;
	Иначе
		ЕстьВыделенныеЭлементы = Планировщик.ВыделенныеЭлементы.Количество() <> 0;
		ЕстьТекущаяЗапись = Ложь;
		Для Каждого Элемент Из Планировщик.ВыделенныеЭлементы Цикл
			Если Элемент.Значение.ЭтоТекущаяЗапись Тогда
				ЕстьТекущаяЗапись = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ДоступностьКонтекстногоМеню = ЕстьВыделенныеЭлементы И Не ЕстьТекущаяЗапись;
	
	УстановитьДоступностьКонтекстногоМеню(КонтекстноеМеню, ДоступностьКонтекстногоМеню);
	
КонецПроцедуры

//// Обрабатывает создание элемента планировщика.
////
//// Параметры:
////  Планировщик							 - Планировщик		 - Планировщик.
////  Начало								 - Дата				 - Дата начала нового элемента.
////  Конец								 - Дата				 - Дата окончания нового элемента.
////  Значения							 - Массив			 - Значения измерений нового элемента.
////  Текст								 - Строка			 - Текст нового элемента.
////  СтандартнаяОбработка				 - Булево			 - Стандартная обработка.
////  ИспользоватьБыстроеРедактирование	 - Булево			 - Признак использования быстрого редактирования элемента.
////  ФизЛицоКалендаря					 - СправочникСсылка.ФизическиеЛица - физ. лицо, для календаря которого выполняется обработка.
////
Процедура ОбработкаПередСозданием(Планировщик, Начало, Конец, Значения, Текст, СтандартнаяОбработка,
	ИспользоватьБыстроеРедактирование,
	ФизЛицоКалендаря,
	НастройкиОтображения,
	УникальныйИдентификатор) Экспорт
	
	Если ИспользоватьБыстроеРедактирование Тогда
		Возврат;
	КонецЕсли;   
	
		
	СтандартнаяОбработка = Ложь;
	
	Если НастройкиОтображения.ЗапретСоздания Тогда
		// Если выделили время, отличное от одной ячейки времени.
		Если (Конец - Начало) <> (НастройкиОтображения.РазмерЯчейкиВремени * 60) Тогда
			ПараметрОповещения = Новый Структура("ДатаНачала, ДатаОкончания");
			ПараметрОповещения.Вставить("ДатаНачала", Начало);
			ПараметрОповещения.Вставить("ДатаОкончания", Конец);
			Оповестить("ИзменениеДатыТекущейЗаписи", ПараметрОповещения, УникальныйИдентификатор);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ДляФизЛица = Значения.Получить("ФизическоеЛицо");
	Если ДляФизЛица = Неопределено Тогда
		ДляФизЛица = ФизЛицоКалендаря;
	КонецЕсли;
	
	ВесьДень = Ложь;
	Если НастройкиОтображения.ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Месяц") Тогда
		Если Начало <> Конец Тогда
			Конец = Конец - 1;
		КонецЕсли;
		ВесьДень = Истина;
	КонецЕсли;
	
	//СотрудникФизЛица = СотрудникиКлиентПовтИсп.ОсновнойСотрудникФизЛица(ДляФизЛица);

	СоздатьЗаписьКалендаря(, Начало, Конец, ВесьДень, Текст, ФизЛицоКалендаря);
	
	
КонецПроцедуры

//// Обрабатывает выбора элемента планировщика.
////
//// Параметры:
////  Планировщик			 - Планировщик	 - Планировщик.
////  СтандартнаяОбработка - Булево		 - Стандартная обработка.
////
Процедура ОбработкаВыбораЭлемента(Планировщик, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЭлементПланировщика(Планировщик);
	
КонецПроцедуры

//// Обрабатывает начало быстрого редактирования элемента планировщика.
////
//// Параметры:
////  Планировщик			 - Планировщик	 - Планировщик.
////  СтандартнаяОбработка - Булево		 - Стандартная обработка.
////
Процедура ПланировщикПередНачаломБыстрогоРедактирования(Планировщик, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

//// Обновляет отображение планировщика.
////
//// Параметры:
////  Планировщик			 - Планировщик	 - Планировщик.
////  НастройкиОтображения - Структура	 - Настройки отображения планировщика.
////  ИзмененнаяНастройка	 - Строка		 - Имя измененной настройки.
////
Процедура ОбновитьОтображениеПланировщика(Планировщик, НастройкиОтображения,
	ИзмененнаяНастройка = Неопределено) Экспорт
	
	Планировщик.ИнтервалыФона.Очистить();
	
	// Данные планировщика.
	ДанныеПланировщика = Центр_КалендарьСервер.ПолучитьДанныеПланировщика(
		НастройкиОтображения, ИзмененнаяНастройка);
	ОбновитьДанныеПланировщика(
		Планировщик, НастройкиОтображения, ДанныеПланировщика, Истина);
	
	// Настройки отображения.
	Центр_КаленарьКлиентСервер.ПрименитьНастройкиОтображения(
		Планировщик, НастройкиОтображения);
	
КонецПроцедуры

//// Обновляет элемент календаря в планировщике.
////
//// Параметры:
////  Планировщик			 - Планировщик							 - Планировщик.
////  НастройкиОтображения - Структура							 - Настройки отображения планировщика.
////  Параметр			 - Массив, СправочникСсылка.ЗаписиРабочегоКалендаря	 - Записи календаря, которые необходимо обновить.
////
Процедура ОбновитьЗаписиКалендаряВПланировщике(Планировщик, НастройкиОтображения, Параметр) Экспорт
	
	Если ТипЗнч(Параметр) = Тип("Массив") Тогда
		ЗаписиКалендаря = Параметр;
	Иначе
		ЗаписиКалендаря = Новый Массив;
		ЗаписиКалендаря.Добавить(Параметр);
	КонецЕсли;
	
	// Данные планировщика.
	УдалитьЗаписиКалендаряИзПланировщика(Планировщик, ЗаписиКалендаря);   
	ДанныеПланировщика = Центр_КалендарьСервер.ОбновитьДанныеПланировщика(НастройкиОтображения, ЗаписиКалендаря);
	ОбновитьДанныеПланировщика(
		Планировщик, НастройкиОтображения, ДанныеПланировщика);
	
	// Настройки отображения.
	Центр_КаленарьКлиентСервер.ПрименитьНастройкиОтображения(
		Планировщик, НастройкиОтображения);
	
КонецПроцедуры


//// Создает событие календаря с заполнением предмета, даты начала, даты окончания по необходимости.
////
//// Параметры:
////  Предмет			 - СправочникСсылка			 - Предмет.
////  ДатаНачала		 - Дата						 - Дата начала.
////  ДатаОкончания	 - Дата						 - Дата окончания.
////  ВесьДень		 - Булево					 - Признак длительность на весь день.
////  Описание		 - Строка					 - Описание записи календаря.
////  Сотрудник	 - СправочникСсылка.Сотрудники   - Сотрудник записи календаря.
////
Процедура СоздатьЗаписьКалендаря(Предмет = Неопределено, ДатаНачала = Неопределено,	
	ДатаОкончания = Неопределено, ВесьДень = Неопределено,
	Описание = Неопределено, Сотрудник = Неопределено) Экспорт
	
	СтруктураОснование = Новый Структура;
	Если Предмет <> Неопределено Тогда
		СтруктураОснование.Вставить("Предмет", Предмет);
	КонецЕсли;
	Если ДатаНачала <> Неопределено Тогда
		СтруктураОснование.Вставить("ДатаНачала", ДатаНачала);
	КонецЕсли;
	Если ДатаОкончания <> Неопределено Тогда
		СтруктураОснование.Вставить("ДатаОкончания", ДатаОкончания);
	КонецЕсли;
	Если ВесьДень <> Неопределено Тогда
		СтруктураОснование.Вставить("ВесьДень", Предмет);
	КонецЕсли;
	Если Описание <> Неопределено Тогда
		СтруктураОснование.Вставить("Описание", Описание);
	КонецЕсли;
	Если Сотрудник <> Неопределено Тогда
		СтруктураОснование.Вставить("Сотрудник", Сотрудник);
	КонецЕсли;  
		
	ПараметрыФормы = Новый Структура("Основание");
	ПараметрыФормы.Основание = СтруктураОснование;
	
	ОткрытьФормуЗаписиКалендаря(ПараметрыФормы);
		
КонецПроцедуры

//// Создает занятость с заполнением даты начала и даты окончания.
////
//// Параметры:
////  ДатаНачала		 - Дата	 - Дата начала.
////  ДатаОкончания	 - Дата	 - Дата окончания.
////  ВесьДень		 - Булево	 - Признак длительность на весь день.
////
Процедура СоздатьЗанятость(ДатаНачала = Неопределено,
	ДатаОкончания = Неопределено, ВесьДень = Ложь) Экспорт
//	
//	Если ВесьДень Тогда
//		
//		Если ЗначениеЗаполнено(ДатаНачала) Тогда
//			ДатаНачала = НачалоДня(ДатаНачала);
//		КонецЕсли;
//		
//		Если ЗначениеЗаполнено(ДатаОкончания) Тогда
//			ДатаОкончания = НачалоДня(ДатаОкончания);
//		КонецЕсли;
//		
	//КонецЕсли;
//	
//	СтруктураОснование = Новый Структура("ДатаНачала, ДатаОкончания");
//	СтруктураОснование.ДатаНачала = ДатаНачала;
//	СтруктураОснование.ДатаОкончания = ДатаОкончания;
//	
//	ПараметрыФормы = Новый Структура("Основание");
//	ПараметрыФормы.Основание = СтруктураОснование;
//	
//	ОткрытьФорму("РегистрСведений.ЗанятостьФизическихЛиц.Форма.ВводЗанятости", ПараметрыФормы);
//	
КонецПроцедуры

// Устанавливает пометку удаления записи и оповещает другие формы.
//
// Параметры:
//  Запись			 - СправочникСсылка.ЗаписиРабочегоКалендаря	 - Запись календаря, для которой устанавливается пометка..
//  ПометкаУдаления	 - Булево									 - Новая пометка удаления.
//
Процедура УстановитьПометкуУдаления(Запись, ПометкаУдаления) Экспорт
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Запись", Запись);
	ПараметрыОбработчика.Вставить("ПометкаУдаления", ПометкаУдаления);
	
	ОписаниеОповещения =
		Новый ОписаниеОповещения("УстановитьПометкуУдаленияЗавершение",
			ЭтотОбъект, ПараметрыОбработчика);
	
	Если ПометкаУдаления Тогда
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Пометить ""%1"" на удаление?'"), Запись);
	Иначе
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Снять с ""%1"" пометку на удаление?'"), Запись);
	КонецЕсли;
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

// Устанавливает пометки удаления записей и оповещает другие формы.
//
// Параметры:
//  Записи				 - Массив	 - Записи рабочего календаря, для которых устанавливается пометка
//  ПовторяющиесяСобытия - Массив	 - Повторяющиеся записи рабочего календаря, для которых устанавливается пометка
//  ПометкаУдаления		 - Булево	 - Новая пометка удаления.
//  ОбработанныеВопросы	 - Структура - Обработанные вопросы.
//
Процедура УстановитьПометкиУдаления(Записи, 
	ПометкаУдаления, ОбработанныеВопросы = Неопределено) Экспорт
	
	Если ТипЗнч(Записи) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбработанныеВопросы = Неопределено Тогда
		ОбработанныеВопросы = Новый Структура;
	КонецЕсли;
	
		
	Если Записи.Количество() = 1  Тогда
		УстановитьПометкуУдаления(Записи[0], ПометкаУдаления);
		Возврат;
	ИначеЕсли Записи.Количество() = 0  Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбработанныеВопросы.Свойство("ИзмененаПометкаУдаления") Тогда
		
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("Записи", Записи);
		ПараметрыОбработчика.Вставить("ПовторяющиесяСобытия", Ложь);
		ПараметрыОбработчика.Вставить("ПометкаУдаления", ПометкаУдаления);
		ПараметрыОбработчика.Вставить("ОбработанныеВопросы", ОбработанныеВопросы);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"УстановитьПометкиУдаленияПослеВопросаОбИзмененииПометкиУдаления",
			ЭтотОбъект,
			ПараметрыОбработчика);
		
		Если ПометкаУдаления Тогда
			ТекстВопроса = НСтр("ru = 'Пометить выделенные элементы на удаление?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Снять с выделенных элементов пометку на удаление?'");
		КонецЕсли;
		
		ПоказатьВопрос(ОписаниеОповещения,
			ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Возврат;
		
	КонецЕсли;
	
	УстановленаПометкаУдаления = Центр_КалендарьСервер.УстановитьПометкиУдаления(
		Записи, Ложь, ПометкаУдаления);
	
	СсылкиИзмененныхЗаписейКалендаря = Новый Массив;
	Для Каждого Запись Из Записи Цикл
		СсылкиИзмененныхЗаписейКалендаря.Добавить(Запись);
	КонецЦикла;
	
	Если УстановленаПометкаУдаления Тогда
		Оповестить("Запись_ЗаписьКалендаря", СсылкиИзмененныхЗаписейКалендаря);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает массив записей календаря, содержащихся в выделенной области.
//
Функция ПолучитьСобытияВВыделеннойОбласти(Планировщик, ПометкаУдаления = Ложь, ВключаяПовторяющиеся = Истина) Экспорт
	
	ВыделенныеЭлементы = Новый Массив;
	
	Для Каждого ВыделенныйЭлемент Из Планировщик.ВыделенныеЭлементы Цикл
		
		ЗначениеЭлемента = ВыделенныйЭлемент.Значение;
		
		Если ЗначениеЭлемента.ЭтоТекущаяЗапись Тогда
			Продолжить;
		КонецЕсли;
		
				
		ДобавитьЗначениеВМассив(ЗначениеЭлемента.Ссылка, ВыделенныеЭлементы);
		ПометкаУдаления = ПометкаУдаления Или ЗначениеЭлемента.ПометкаУдаления;
		
	КонецЦикла;
	
	Возврат ВыделенныеЭлементы;
	
КонецФункции

//// Возвращает элемент календаря, содержащихся в выделенной области.
////
//// Параметры:
////  Планировщик			 - Планировщик	 - Планировщик.
////  ПометкаУдаления		 - Булево	 - Общая пометка удаления.
////  ВключаяПовторяющиеся - Булево	 - Получать повторяющиеся события.
//// 
//// Возвращаемое значение:
////  Массив - Выделенные элементы.
////
Функция ВыделенныеЭлементы(Планировщик) Экспорт
//	
//	ВыделенныеЭлементы = Новый Массив;
//	
//	Для Каждого ВыделенныйЭлемент Из Планировщик.ВыделенныеЭлементы Цикл
//		
//		ЗначениеЭлемента = ВыделенныйЭлемент.Значение;
//		ВыделенныеЭлементы.Добавить(ЗначениеЭлемента);
//		
//	КонецЦикла;
//	
//	Возврат ВыделенныеЭлементы;
//	
КонецФункции

//// Получает выделенные в плане дня элементы.
////
//// Параметры:
////  ЭлементПланДня - ТаблицаФормы - Элемент плана дня.
////  ПланДня - ДанныеФормыКоллекция - Данные плана дня.
////  ВыбиратьДни - Булево - Если выбраны только дни, то выбирать выделенные элементы этих дней.
////
//// Возвращаемое значение:
////  Массив - Выделенные элементы.
////
Функция ВыделенныеЭлементыПланДня(ЭлементПланДня, ПланДня, ВыбиратьДни = Ложь) Экспорт
//	
//	ВыделенныеЭлементы = Новый Массив;
//	
//	Для Каждого Элемент Из ЭлементПланДня.ВыделенныеСтроки Цикл
//		
//		ДанныеСтроки = ПланДня.НайтиПоИдентификатору(Элемент);
//		
//		Если ДанныеСтроки.ЭтоГруппа Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		ЭлементЗаписиКалендаря =
//			Центр_КаленарьКлиентСервер.СформироватьЭлементЗаписиКалендаря(ДанныеСтроки);
//		ВыделенныеЭлементы.Добавить(ЭлементЗаписиКалендаря);
//		
//	КонецЦикла;
//	
//	Если ВыбиратьДни И ВыделенныеЭлементы.Количество() = 0 Тогда
//		
//		ВыделенныеДни = ВыделенныеДниПланДня(ЭлементПланДня, ПланДня);
//		Для Каждого ВыделенныйДень Из ВыделенныеДни Цикл
//			
//			ЭлементыПланаДня = ПланДня.ПолучитьЭлементы();
//			Для Каждого ЭлементПланаДня Из ЭлементыПланаДня Цикл
//				
//				Если ЭлементПланаДня.ДатаДень <> ВыделенныйДень Тогда
//					Продолжить;
//				КонецЕсли;
//				
//				ЭлементыВДне = ЭлементПланаДня.ПолучитьЭлементы();
//				Для Каждого ЭлементВДне Из ЭлементыВДне Цикл
//					
//					ЭлементЗаписиКалендаря =
//						Центр_КаленарьКлиентСервер.СформироватьЭлементЗаписиКалендаря(ЭлементВДне);
//					ВыделенныеЭлементы.Добавить(ЭлементЗаписиКалендаря);
//					
//				КонецЦикла;
//				
//			КонецЦикла;
//			
//		КонецЦикла;
//		
//	КонецЕсли;
//	
//	Возврат ВыделенныеЭлементы;
//	
КонецФункции

//// Переносит элементы планировщика на указанную дату.
////
//// Параметры:
////  МассивЗаписейКалендаря	 - Массив	 - Записи календаря.
////  ДатаПереноса			 - Дата	 - Новая дата.
////
Процедура ПеренестиЭлементыПланировщикаНаДату(Планировщик, ДанныеФормыПланировщик, НастройкиОтображения, Элементы, ДатаПереноса, УникальныйИдентификатор) Экспорт
	
	ИсключенияПовторения = Новый Массив;
	ИзмененныеЗаписиКалендаря = Новый Массив;
	Для Каждого Элемент Из Элементы Цикл
		
		ИзмененнаяЗаписьКалендаря = Элемент.Значение;
		
		Если ИзмененнаяЗаписьКалендаря.ТипЗаписиКалендаря =
				ПредопределенноеЗначение("Перечисление.ТипЗаписиКалендаря.ПовторяющеесяСобытие") Тогда
			ИсключенияПовторения.Добавить(ИзмененнаяЗаписьКалендаря);
		КонецЕсли;
		
		ИзмененныеЗаписиКалендаря.Добавить(ИзмененнаяЗаписьКалендаря);
		
	КонецЦикла;
	
	Результат = Центр_КалендарьСервер.ПеренестиЭлементыПланировщикаНаДату(ИзмененныеЗаписиКалендаря, ДатаПереноса, НастройкиОтображения);
	
	ОбработатьРезультатИзмененияЭлементовПланировщика(Результат, ИсключенияПовторения,
		ДанныеФормыПланировщик, НастройкиОтображения, УникальныйИдентификатор);
	
КонецПроцедуры

//// Переносит элементы плана дня на указанную дату.
////
//// Параметры:
////  ЭлементыЗаписейКалендаря	 - Массив	 - Элементы записей календаря.
////  ДатаПереноса			 - Дата	 - Новая дата.
////
Процедура ПеренестиЭлементыЗаписейКалендаряНаДату(ЭлементыЗаписейКалендаря, ДатаПереноса) Экспорт
//	
//	Результат = Центр_КалендарьСервер.ПеренестиЭлементыПланировщикаНаДату(ЭлементыЗаписейКалендаря, ДатаПереноса);
//	
//	Оповестить("Запись_ЗаписьКалендаря", Результат.СсылкиИзмененныхЗаписейКалендаря);
//	
КонецПроцедуры

//// Обрабатывает изменение признака весь день у записи календаря.
//// Если снимают признак - устанавливает длительность час с начала отображаемого времени в дне.
////
//// Параметры:
////  Объект							 - ДанныеФормы	 - Запись календаря.
////  НачальноеЗначениеДатаНачала		 - Дата			 - Начальное значение даты начала.
////  НачальноеЗначениеДатаОкончания	 - Дата			 - Начальное значение даты окончания.
////  ОтображатьВремяС				 - Число		 - Настройка отображения времени в дне.
////
Процедура ПриИзмененииВесьДень(Объект,
	НачальноеЗначениеДатаНачала, НачальноеЗначениеДатаОкончания, ОтображатьВремяС,ОтображатьВремяПо = Неопределено) Экспорт
	
	Если Объект.ВесьДень Тогда
		Центр_КаленарьКлиентСервер.СкорректироватьДатуНачалаИОкончания(
			Объект.ДатаНачала, Объект.ДатаОкончания, Объект.ВесьДень,
			НачальноеЗначениеДатаНачала, НачальноеЗначениеДатаОкончания, Ложь, Истина);
		Возврат;
	КонецЕсли;
	
	Объект.ДатаНачала = НачалоДня(Объект.ДатаНачала) + ОтображатьВремяС * 3600;
	Объект.ДатаОкончания = Объект.ДатаНачала + 3600;
	
	НачальноеЗначениеДатаНачала = Объект.ДатаНачала;
	НачальноеЗначениеДатаОкончания = Объект.ДатаОкончания;
	
КонецПроцедуры

//// Выполняет создание записи календаря из плана дня.
////
//// Параметры:
////  ЭлементПланДня	 - ТаблицаФормы					 - Элемент формы План дня.
////  НастройкиОтображения - Структура					 - Настройки отображения.
////  ФизЛицо	 - СправочникСсылка.ФизическиеЛица - физ. лицо, в календаре которого будет создана запись.
////
Процедура СоздатьЗаписьКалендаряПланДня(ЭлементПланДня, НастройкиОтображения, ФизЛицо = Неопределено) Экспорт
		СоздатьЗаписьКалендаря(, , , , ,Неопределено );	
	КонецПроцедуры       
	
//// Выполняет создание записи календаря из плана дня.
////
//// Параметры:
////  ЭлементПланДня	 - ТаблицаФормы					 - Элемент формы План дня.
////  НастройкиОтображения - Структура					 - Настройки отображения.
////  ФизЛицо	 - СправочникСсылка.ФизическиеЛица - физ. лицо, в календаре которого будет создана запись.
////
Процедура СоздатьЗаписьКалендаряЗадача(Предмет, Сотрудник) Экспорт
		СоздатьЗаписьКалендаря(Предмет, , , , ,Сотрудник);	
КонецПроцедуры


//// Выполняет создание записи календаря из задачи.
////
//// Параметры:
////  НастройкиОтображения - Структура					 - Настройки отображения.
////  ФизЛицо	 - СправочникСсылка.ФизическиеЛица - физ. лицо, в календаре которого будет создана запись.
////
Процедура ОтобразитьКалендарьЗадача(ЗадачаСсылка = Неопределено, Исполнитель = Неопределено) Экспорт
	СоздатьЗаписьКалендаря(ЗадачаСсылка,,,,,Исполнитель);		
КонецПроцедуры

//// Выполняет создание записи календаря из планировщика.
////
//// Параметры:
////  НастройкиОтображения - Структура					 - Настройки отображения.
////  ФизЛицо	 - СправочникСсылка.ФизическиеЛица - физ. лицо, в календаре которого будет создана запись.
////
Процедура СоздатьЗаписьКалендаряПланировщик(НастройкиОтображения, ФизЛицо) Экспорт
	
	СотрудникФизЛица = Центр_КалендарьКлиент.ОсновнойСотрудникФизЛица(ФизЛицо);

//	Если Не ЗначениеЗаполнено(СотрудникФизЛица) Тогда
//		СотрудникФизЛица = СотрудникиКлиент.ОсновнойСотрудник();
//	КонецЕсли;
	
	Если НастройкиОтображения.ОтображаемаяДата = НачалоДня(ТекущаяДата()) Тогда
		СоздатьЗаписьКалендаря(,,,,,СотрудникФизЛица);
		Возврат;
	КонецЕсли;
//	
	ДатаНачалаНовойЗаписи = НастройкиОтображения.ОтображаемаяДата + НастройкиОтображения.ОтображатьВремяС * 3600;
	ДатаОкончанияНовойЗаписи = ДатаНачалаНовойЗаписи + 3600;
	СоздатьЗаписьКалендаря(, ДатаНачалаНовойЗаписи, ДатаОкончанияНовойЗаписи, Ложь, , СотрудникФизЛица);
	
КонецПроцедуры

//// Восстанавливает развернутые элементы плана дня.
////
//// Параметры:
////  ЭлементПланДня		 - ТаблицаФормы													 - Элемент плана дня.
////  ПланДня				 - ДанныеФормыКоллекция											 - Данные плана дня.
////  СвернутыеЭлементы	 - Массив														 - Развернутые элементы плана дня.
////  ТекущийЭлемент		 - СправочникСсылка.ЗаписиРабочегоКалендаря, ДокументСсылка.Отсутствие	 - Текущий элемент.
////  ТекущаяДата			 - Дата																	 - Текущая дата элемента.
////
Процедура ВосстановитьСостояниеПланаДня(ЭлементПланДня, ПланДня, СвернутыеЭлементы, ТекущийЭлемент, ТекущаяДата) Экспорт
	
	Для Каждого ЭлементДерева Из ПланДня.ПолучитьЭлементы() Цикл
		Свернут = Ложь;
		Для Каждого СвернутыйЭлемент Из СвернутыеЭлементы Цикл
			Если ЭлементДерева.ДатаДень = СвернутыйЭлемент Тогда
				ЭлементПланДня.Свернуть(ЭлементДерева.ПолучитьИдентификатор());
				Свернут = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Свернут Тогда
			ЭлементПланДня.Свернуть(ЭлементДерева.ПолучитьИдентификатор());
		Иначе
			ЭлементПланДня.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
		КонецЕсли;
		
	КонецЦикла;
	
	ВосстановитьТекущийЭлементДерева(ЭлементПланДня, ПланДня.ПолучитьЭлементы(), ТекущийЭлемент, ТекущаяДата);
	
КонецПроцедуры

//// Возвращает свернутые элементы плана дня.
////
//// Параметры:
////  ЭлементПланДня	 - ТаблицаФормы	 - Элемент плана дня.
////  ПланДня			 - ДанныеФормыКоллекция	 - Данные плана дня.
//// 
//// Возвращаемое значение:
////  Массив - Развернутые элементы плана дня.
////
Функция ПолучитьСвернутыеЭлементыПланаДня(ЭлементПланДня, ПланДня) Экспорт
	
	СвернутыеЭлементы = Новый Массив;
	
	Для Каждого ЭлементДерева Из ПланДня.ПолучитьЭлементы() Цикл
		
		Если Не ЭлементПланДня.Развернут(ЭлементДерева.ПолучитьИдентификатор()) Тогда
			СвернутыеЭлементы.Добавить(ЭлементДерева.ДатаДень);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СвернутыеЭлементы;
	
КонецФункции

//// Обработка активизации области в плане дня.
////
//// Параметры:
////  ЭлементПланДня	 - ТаблицаФормы														 - Элемент плана дня.
////  ТекущийЭлемент	 - СправочникСсылка.ЗаписиРабочегоКалендаря, ДокументСсылка.Отсутствие	 - Текущий элемент.
////  ТекущаяДата		 - Дата																	 - Текущая дата элемента.
////
Процедура ОбработкаАктивизацииОбластиПланДня(ЭлементПланДня, ТекущийЭлемент, ТекущаяДата) Экспорт
//	
//	НовыйТекущийЭлемент = ПолучитьТекущуюЗаписьКалендаря(ЭлементПланДня);
//	НоваяТекущаяДата = ПолучитьТекущуюДатуПланДня(ЭлементПланДня);
//	Если НовыйТекущийЭлемент <> ТекущийЭлемент
//		Или НоваяТекущаяДата <> ТекущаяДата Тогда
//		
//		ТекущийЭлемент = НовыйТекущийЭлемент;
//		ТекущаяДата = НоваяТекущаяДата;
//		
//	КонецЕсли;
//	
КонецПроцедуры

//// Обработка выбора в плане дня.
////
//// Параметры:
////  ЭлементПланДня		 - ТаблицаФормы	 - Элемент плана дня.
////  ВыбраннаяСтрока		 - Число		 - Идентификатор строки.
////  Поле				 - ПолеФормы	 - Активное поле.
////  СтандартнаяОбработка - Булево		 - Стандартная обработка.
////
Процедура ОбработкаВыбораПланДня(ЭлементПланДня, ВыбраннаяСтрока, Поле, СтандартнаяОбработка) Экспорт
//	
//	СтандартнаяОбработка = Ложь;
//	ДанныеСтроки = ЭлементПланДня.ДанныеСтроки(ВыбраннаяСтрока);
//	Если ЗначениеЗаполнено(ДанныеСтроки.Ссылка) Тогда
//		Если ДанныеСтроки.ТипЗаписиКалендаря = ПредопределенноеЗначение("Перечисление.ТипЗаписиКалендаря.ПовторяющеесяСобытие") Тогда
//			ОбработкаВыбораПовторяющегосяСобытия(ДанныеСтроки.Ссылка, ДанныеСтроки.ДатаНачала);
//		Иначе
//			ПоказатьЗначение(, ДанныеСтроки.Ссылка);
//		КонецЕсли;
//	КонецЕсли;
//	
КонецПроцедуры

//// Обработка перед началом добавления в плане дня.
////
//// Параметры:
////  ЭлементПланДня	 - ТаблицаФормы				 - Элемент плана дня.
////  Отказ			 - Булево					 - Признак отказа от добавления объекта.
////  Копирование		 - Булево					 - Определяет режим копирования.
////  Родитель		 - 							 - Ссылка на элемент родителя.
////  Группа			 - 							 - Признак добавления группы.
////  НастройкиОтображения - Структура					 - Настройки отображения.
////  ФизЛицо	 - СправочникСсылка.ФизическиеЛица - физ. лицо, в календаре которого будет создана запись.
////
Процедура ОбработкаПередНачаломДобавленияПланДня(
	ЭлементПланДня, Отказ, Копирование, Родитель, Группа, НастройкиОтображения, ФизЛицо = Неопределено) Экспорт
//	
//	Отказ = Истина;
//	
//	Если НастройкиОтображения.ЗапретСоздания Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если Копирование Тогда
//		СкопироватьЗаписьКалендаряПланДня(ЭлементПланДня);
//		Возврат;
//	КонецЕсли;
//	
//	СоздатьЗаписьКалендаряПланДня(ЭлементПланДня, НастройкиОтображения, ФизЛицо);
//	
КонецПроцедуры

//// Обработка перед началом изменения в плане дня.
////
//// Параметры:
////  ЭлементПланДня	 - ТаблицаФормы	 - Элемент плана дня.
////  Отказ			 - Булево		 - Отказ.
////
Процедура ОбработкаПередНачаломИзмененияПланДня(ЭлементПланДня, Отказ) Экспорт
//	
//	Отказ = Истина;
//	ОбработкаВыбораПланДня(ЭлементПланДня, ЭлементПланДня.ТекущаяСтрока, ЭлементПланДня.ТекущийЭлемент, Истина);
//	
КонецПроцедуры

//// Обработка перед удалением в плане дня.
////
//// Параметры:
////  ЭлементПланДня	 - ТаблицаФормы	 - Элемент плана дня.
////  ПланДня - ДанныеФормыКоллекция - Данные плана дня.
////  Отказ			 - Булево		 - Отказ.
////
Процедура ОбработкаПередУдалениемПланДня(ЭлементПланДня, ПланДня, Отказ) Экспорт
//	
//	Отказ = Истина;
//	УстановитьПометкуУдаленияПланДня(ЭлементПланДня, ПланДня);
//	
КонецПроцедуры

//// Обработка проверки перетаскивания в плане дня.
////
//// Параметры:
////  ЭлементПланДня			 - ТаблицаФормы				 - Элемент плана дня.
////  ПараметрыПеретаскивания	 - ПараметрыПеретаскивания	 - Содержит системные параметры перетаскивания.
////  Выполнение				 - Булево					 - Управляет выполнением перетаскивания.
////  НастройкиОтображения	- Структура					 - Настройки отображения.
////
Процедура ОбработкаНачалаПеретаскиванияПланДня(ЭлементПланДня, ПараметрыПеретаскивания, Выполнение, НастройкиОтображения) Экспорт
//	
//	Если НастройкиОтображения.ЗапретИзменения Тогда
//		Выполнение = Ложь;
//		Возврат;
//	КонецЕсли;
//	
//	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
//	
//	ЗначениеПеретаскивания = Новый Массив;
//	Для Каждого НомерСтроки Из ПараметрыПеретаскивания.Значение Цикл
//		
//		ДанныеСтроки = ЭлементПланДня.ДанныеСтроки(НомерСтроки);
//		Если ДанныеСтроки.ЭтоГруппа Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		ЭлементЗаписиКалендаря =
//			Центр_КаленарьКлиентСервер.СформироватьЭлементЗаписиКалендаря(ДанныеСтроки);
//		ЗначениеПеретаскивания.Добавить(ЭлементЗаписиКалендаря);
//		
//	КонецЦикла;
//	
//	Выполнение = ЗначениеПеретаскивания.Количество() <> 0;
//	ПараметрыПеретаскивания.Значение = ЗначениеПеретаскивания;
//	
КонецПроцедуры

//// Обработка проверки перетаскивания в плане дня.
////
//// Параметры:
////  ЭлементПланДня			 - ТаблицаФормы				 - Элемент плана дня.
////  ПараметрыПеретаскивания	 - ПараметрыПеретаскивания	 - Содержит системные параметры перетаскивания.
////  СтандартнаяОбработка	 - Булево					 - Признак стандартной обработки события.
////  Строка					 - Число					 - Содержит идентификатор строки над которой находится курсор.
////  Поле					 - ПолеФормы				 - Поле, с которым связана данная колонка таблицы, над которой находится объект.
////  НастройкиОтображения - Структура					 - Настройки отображения.
////
Процедура ОбработкаПроверкиПеретаскиванияПланДня(
	ЭлементПланДня, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле, НастройкиОтображения) Экспорт
	
//	Если НастройкиОтображения.ЗапретИзменения Тогда
//		СтандартнаяОбработка = Ложь;
//		Возврат;
//	КонецЕсли;
//	
//	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Массив") 
//		Или ПараметрыПеретаскивания.Значение.Количество() = 0
//		Или ТипЗнч(ПараметрыПеретаскивания.Значение[0]) <> Тип("Структура") 
//		Или Не Центр_КаленарьКлиентСервер.ЭтоЭлементЗаписиКалендаря(
//			ПараметрыПеретаскивания.Значение[0]) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	СтандартнаяОбработка = Ложь;
//	
КонецПроцедуры

//// Обработка перетаскивания в плане дня.
////
//// Параметры:
////  ЭлементПланДня			 - ТаблицаФормы				 - Элемент плана дня.
////  ПараметрыПеретаскивания	 - ПараметрыПеретаскивания	 - Содержит системные параметры перетаскивания.
////  СтандартнаяОбработка	 - Булево					 - Признак стандартной обработки события.
////  Строка					 - Число					 - Содержит идентификатор строки над которой находится курсор.
////  Поле					 - ПолеФормы				 - Поле, с которым связана данная колонка таблицы, над которой находится объект.
////  НастройкиОтображения 	- Структура					 - Настройки отображения.
////
Процедура ОбработкаПеретаскиванияПланДня(
	ЭлементПланДня, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле, НастройкиОтображения) Экспорт
	
//	СтандартнаяОбработка = Ложь;
//	
//	Если НастройкиОтображения.ЗапретИзменения Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Массив") 
//		Или ПараметрыПеретаскивания.Значение.Количество() = 0
//		Или ТипЗнч(ПараметрыПеретаскивания.Значение[0]) <> Тип("Структура") 
//		Или Не Центр_КаленарьКлиентСервер.ЭтоЭлементЗаписиКалендаря(
//			ПараметрыПеретаскивания.Значение[0]) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДанныеСтроки = ЭлементПланДня.ДанныеСтроки(Строка);
//	Если ДанныеСтроки = Неопределено Или Не ЗначениеЗаполнено(ДанныеСтроки.ДатаДень) Тогда 
//		Возврат;
//	КонецЕсли;
//	
//	ПеренестиЭлементыЗаписейКалендаряНаДату(ПараметрыПеретаскивания.Значение, ДанныеСтроки.ДатаДень);
//	
КонецПроцедуры

//// Выполняет отработку выделенных записей календаря в плане дня.
////
//// Параметры:
////  ЭлементПланДня	 - ТаблицаФормы					 - Элемент план дня.
////  ПланДня			 - ДанныеФормыКоллекция			 - План дня.
////
Процедура ОтработатьВыделенныеЗаписиКалендаряПланДня(ЭлементПланДня, ПланДня) Экспорт
//	
//	ЗаписиКалендаря = ВыделенныеЭлементыПланДня(ЭлементПланДня, ПланДня);
//	Если ЗаписиКалендаря.Количество() = 0 Тогда
//		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось отработать, т.к. не выбраны записи календаря.'"));
//		Возврат;
//	КонецЕсли;
//	
//	Результат =
//		Центр_КалендарьСервер.ОтработатьВыделенныеЗаписиКалендаря(ЗаписиКалендаря);
//	
//	Для Каждого Напоминание Из Результат.ОтключенныеНапоминания Цикл
//		НапоминанияПользователяКлиент.УдалитьЗаписьИзКэшаОповещений(Напоминание);
//	КонецЦикла;
//	
//	Оповестить("Запись_ЗаписьКалендаря", Результат.СсылкиИзмененныхЗаписейКалендаря);
//	
КонецПроцедуры

// Показывает запись календаря в отдельной форме.
//
// Параметры:
//  ЗаписьКалендаря - СправочникСсылка.ЗаписиРабочегоКалендаря - Запись календаря.
//  СотрудникЗаписиКалендаря - СправочникСсылка.Сотрудники - Сотрудник записи календаря.
//
Процедура ПоказатьЗаписьКалендаря(ЗаписьКалендаря, СотрудникЗаписиКалендаря = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ЗаписьКалендаря) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ЗаписьКалендаря);
	Уникальность = ЗаписьКалендаря.УникальныйИдентификатор();
	Если ЗначениеЗаполнено(СотрудникЗаписиКалендаря) Тогда
		ПараметрыФормы.Вставить("СотрудникЗаписиКалендаря", СотрудникЗаписиКалендаря);
	КонецЕсли;
	
	Если ТипЗнч(ЗаписьКалендаря) = Тип("СправочникСсылка.Центр_Календарь") Тогда
		ОткрытьФормуЗаписиКалендаря(ПараметрыФормы, Уникальность);
	ИначеЕсли ТипЗнч(ЗаписьКалендаря) = Тип("СправочникСсылка.Мероприятия") Тогда
		ОткрытьФорму("Справочник.Мероприятия.ФормаОбъекта", ПараметрыФормы);
	ИначеЕсли ТипЗнч(ЗаписьКалендаря) = Тип("ДокументСсылка.Отсутствие") Тогда
		ОткрытьФорму("Документ.Отсутствие.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

//// Копирует текущую запись календаря в плане дня.
////
//// Параметры:
////  ЭлементПланДня - ТаблицаФормы - Элемент плана дня.
////
Процедура СкопироватьЗаписьКалендаряПланДня(ЭлементПланДня)
//	
//	ЗаписьКалендаря = ПолучитьТекущуюЗаписьКалендаря(ЭлементПланДня);
//	Если Не ЗначениеЗаполнено(ЗаписьКалендаря) Тогда
//		ТекстПредупреждения = НСтр("ru = 'Не выбрана запись календаря.'");
//		ПоказатьПредупреждение(, ТекстПредупреждения);
//		Возврат;
//	КонецЕсли;
//	
//	ТекущиеДанные = ЭлементПланДня.ТекущиеДанные;
//	Если ТекущиеДанные = Неопределено Тогда
//		Возврат;
//	КонецЕсли;
//	
//	СкопироватьЗаписьКалендаря(
//		ЗаписьКалендаря,
//		ТекущиеДанные.ДатаНачала,
//		ТекущиеДанные.ДатаОкончания);
//	
КонецПроцедуры

// Восстанавливает текущий элемент в дереве.
//
// Параметры:
//  ЭлементПланДня	 - ТаблицаФормы	  - Элемент плана дня.
//  ЭлементыДерева	 - ДанныеФормыКоллекцияЭлементовДерева	  - Данные плана дня.
//  ТекущийЭлемент	 - СправочникСсылка.ЗаписиРабочегоКалендаря, ДокументСсылка.Отсутствие	 - Текущий элемент.
//  ТекущаяДата		 - Дата	  - Текущая дата элемента.
//
Процедура ВосстановитьТекущийЭлементДерева(ЭлементПланДня, ЭлементыДерева, ТекущийЭлемент, ТекущаяДата)
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		
		Если ЭлементДерева.Ссылка = ТекущийЭлемент И Не ЗначениеЗаполнено(ТекущаяДата) Тогда
			ТекущаяДата = ЭлементДерева.ДатаНачала;
			ЭлементПланДня.ТекущаяСтрока = ЭлементДерева.ПолучитьИдентификатор();
			Возврат;
		КонецЕсли;
		
		Если ЭлементДерева.Ссылка = ТекущийЭлемент И НачалоДня(ЭлементДерева.ДатаНачала) = ТекущаяДата Тогда
			ЭлементПланДня.ТекущаяСтрока = ЭлементДерева.ПолучитьИдентификатор();
			Возврат;
		КонецЕсли;
		
		Если ТекущийЭлемент = Неопределено
			И ЭлементДерева.ЭтоГруппа
			И НачалоДня(ЭлементДерева.ДатаДень) = ТекущаяДата Тогда
			ЭлементПланДня.ТекущаяСтрока = ЭлементДерева.ПолучитьИдентификатор();
			Возврат;
		КонецЕсли;
		
		ВосстановитьТекущийЭлементДерева(
			ЭлементПланДня, ЭлементДерева.ПолучитьЭлементы(), ТекущийЭлемент, ТекущаяДата);
		
	КонецЦикла;
	
КонецПроцедуры

// Обрабатывает редактирование элементов планировщика.
//
// Параметры:
//  Планировщик				 - Планировщик				 - Планировщик.
//  УникальныйИдентификатор	 - УникальныйИдентификатор	 - Уникальный идентификатор элемента.
//
Процедура ОбработкаОкончанияРедактирования(Планировщик, ДанныеФормыПланировщик, НастройкиОтображения, УникальныйИдентификатор)
	
	ИсключенияПовторения = Новый Массив;
	ИзмененныеЗаписиКалендаря = Новый Массив;
	Для Каждого ВыделенныйЭлемент Из Планировщик.ВыделенныеЭлементы Цикл
		
		ИзмененнаяЗаписьКалендаря = ВыделенныйЭлемент.Значение;
		
		Если ИзмененнаяЗаписьКалендаря.ЭтоТекущаяЗапись Тогда
			ПараметрОповещения = Новый Структура("ДатаНачала, ДатаОкончания");
			ПараметрОповещения.Вставить("ДатаНачала", ВыделенныйЭлемент.Начало);
			ПараметрОповещения.Вставить("ДатаОкончания", ВыделенныйЭлемент.Конец);
			Оповестить("ИзменениеДатыТекущейЗаписи", ПараметрОповещения, УникальныйИдентификатор);
			Продолжить;
		КонецЕсли;
		
		// Корректировка времени при перетаскивании в месяце.
		Если НастройкиОтображения.ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Месяц") Тогда
			
			СмещениеНачала = ИзмененнаяЗаписьКалендаря.ДатаНачала - НачалоДня(ИзмененнаяЗаписьКалендаря.ДатаНачала);
			Если СмещениеНачала <> 0 Тогда
				ВыделенныйЭлемент.Начало = НачалоДня(ВыделенныйЭлемент.Начало) + СмещениеНачала;
			КонецЕсли;
			
			СмещениеКонца = ИзмененнаяЗаписьКалендаря.ДатаОкончания - НачалоДня(ИзмененнаяЗаписьКалендаря.ДатаОкончания);
			Если СмещениеКонца <> 0 Тогда
				ВыделенныйЭлемент.Конец = НачалоДня(ВыделенныйЭлемент.Конец - 1) + СмещениеКонца;
			КонецЕсли;
			
		ИначеЕсли ИзмененнаяЗаписьКалендаря.ВесьДень Тогда
			Длительность = ВыделенныйЭлемент.Конец - ВыделенныйЭлемент.Начало;
			СмещениеНачала = ВыделенныйЭлемент.Начало - НачалоДня(ВыделенныйЭлемент.Начало);
			СмещениеКонца = КонецДня(ВыделенныйЭлемент.Конец) - ВыделенныйЭлемент.Конец;
			Если СмещениеНачала <= СмещениеКонца Тогда
				ВыделенныйЭлемент.Начало = НачалоДня(ВыделенныйЭлемент.Начало);
				ВыделенныйЭлемент.Конец = ВыделенныйЭлемент.Начало + Длительность;
			Иначе
				ВыделенныйЭлемент.Конец = КонецДня(ВыделенныйЭлемент.Конец);
				ВыделенныйЭлемент.Начало = ВыделенныйЭлемент.Конец - Длительность;
			КонецЕсли;
		КонецЕсли;
		ИзмененнаяЗаписьКалендаря.ДатаНачала = ВыделенныйЭлемент.Начало;
		ИзмененнаяЗаписьКалендаря.ДатаОкончания = ВыделенныйЭлемент.Конец;
		
				
		ИзмененныеЗаписиКалендаря.Добавить(ИзмененнаяЗаписьКалендаря);
		
	КонецЦикла;
	
	Если ИзмененныеЗаписиКалендаря.Количество() > 0 Тогда
		Результат = Центр_КалендарьСервер.СохранитьЗаписиКалендаря(
			ИзмененныеЗаписиКалендаря,
			НастройкиОтображения);
		ОбработатьРезультатИзмененияЭлементовПланировщика(
			Результат,
			ИсключенияПовторения,
			ДанныеФормыПланировщик,
			НастройкиОтображения,
			УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает создание элементов планировщика.
//
// Параметры:
//  Планировщик				 - Планировщик					 - Планировщик.
//  ФизЛицоКалендаря		 - СправочникСсылка.ФизическиеЛица - физ. лицо, для календаря которого выполняется обработка.
//
Процедура ОбработкаСозданиеЭлемента(Планировщик, ДанныеФормыПланировщик, НастройкиОтображения, ФизЛицоКалендаря)
	
	Если Планировщик.ВыделенныеЭлементы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныйЭлемент = Планировщик.ВыделенныеЭлементы[0];
	ДляФизЛица = ВыделенныйЭлемент.ЗначенияИзмерений.Получить("ФизическоеЛицо");
	Если ДляФизЛица = Неопределено Тогда
		ДляФизЛица = ФизЛицоКалендаря;
	КонецЕсли;

	СозданнаяЗаписьКалендаря = Новый Структура;
	СозданнаяЗаписьКалендаря.Вставить("ДатаНачала", ВыделенныйЭлемент.Начало);
	СозданнаяЗаписьКалендаря.Вставить("ДатаОкончания", ВыделенныйЭлемент.Конец);
	СозданнаяЗаписьКалендаря.Вставить("Описание", ВыделенныйЭлемент.Текст);
	СозданнаяЗаписьКалендаря.Вставить("Цвет", ВыделенныйЭлемент.ЦветФона);
	СозданнаяЗаписьКалендаря.Вставить("ФизическоеЛицо", ДляФизЛица);
	СозданнаяЗаписьКалендаря.Вставить("Сотрудник", Центр_КалендарьКлиент.ОсновнойСотрудникФизЛица(ДляФизЛица));
	
	ЗначениеКопирования = Неопределено;
	Если ВыделенныйЭлемент.Значение <> Неопределено Тогда
		Если ТипЗнч(ВыделенныйЭлемент.Значение.Ссылка) =
			Тип("СправочникСсылка.Центр_Календарь") Тогда
			ЗначениеКопирования = ВыделенныйЭлемент.Значение.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Результат = Центр_КалендарьСервер.СоздатьЗаписьКалендаря(
		СозданнаяЗаписьКалендаря, ЗначениеКопирования, НастройкиОтображения);
	
	Если Результат.Напоминание <> Неопределено Тогда
		НапоминанияПользователяКлиент.ОбновитьЗаписьВКэшеОповещений(Результат.Напоминание);
		Оповестить("Запись_НапоминанияПользователя_Документооборот",
			Результат.Напоминание, Результат.Напоминание.Источник);
	КонецЕсли;
	
	ВыделенныйЭлемент.Загрузить(Результат.НовыйЭлемент);
	
	ОбновитьДанныеПланировщика(ДанныеФормыПланировщик, НастройкиОтображения, Результат.ДанныеПланировщика);
	
КонецПроцедуры

// Удаляет записи календаря из планировщика.
////
//// Параметры:
////  Планировщик		 - Планировщик	 - Планировщик.
////  ЗаписиКалендаря	 - Массив		 - Записи календаря.
////
Процедура УдалитьЗаписиКалендаряИзПланировщика(Планировщик, ЗаписиКалендаря)
	
	КоличествоЭлементов = Планировщик.Элементы.Количество();
	Для Инд = 1 По КоличествоЭлементов Цикл
		Планировщик.Элементы.Удалить(Планировщик.Элементы[КоличествоЭлементов - Инд]);
		
	КонецЦикла;
	
КонецПроцедуры

//// Обновляет элемент календаря в планировщике.
////
//// Параметры:
////  Планировщик						 - Планировщик	 - Планировщик.
////  СтруктураЭлемента				 - Структура	 - Структура элемента планировщика.
////  ОтображатьПомеченныеНаУдаление	 - Булево		 - Отображение помеченных на удаление элементов.
////
Процедура ДобавитьЗаписьКалендаряВПланировщик(Планировщик, СтруктураЭлемента,
	ОтображатьПомеченныеНаУдаление)
	
	Если Не ОтображатьПомеченныеНаУдаление И СтруктураЭлемента.Значение.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийЭлементПланировщика = Планировщик.Элементы.Добавить(
		СтруктураЭлемента.Начало, СтруктураЭлемента.Конец);
	
	ТекущийЭлементПланировщика.Загрузить(СтруктураЭлемента);
	
КонецПроцедуры

//// Добавляет интервал фона в планировщик.
////
//// Параметры:
////  Планировщик						 - Планировщик	 - Планировщик.
////  СтруктураЭлемента				 - Структура	 - Структура элемента планировщика.
////
Процедура ДобавитьИнтервалФонаВПланировщик(Планировщик, СтруктураИнтервалаФона)
//	
//	ТекущийИнтервалФона = Планировщик.ИнтервалыФона.Добавить(
//		СтруктураИнтервалаФона.Начало, СтруктураИнтервалаФона.Конец);
//	ТекущийИнтервалФона.Цвет = СтруктураИнтервалаФона.Цвет;
//	Центр_КаленарьКлиентСервер.УстановитьЗначениеИзмеренияИнтервалаФона(
//		ТекущийИнтервалФона,
//		"ФизическоеЛицо",
//		СтруктураИнтервалаФона.ФизическоеЛицо);
//	
КонецПроцедуры

// Устанавливает пометку удаления записи и оповещает другие формы.
//
Процедура УстановитьПометкуУдаленияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УстановленаПометкаУдаления = Центр_КалендарьСервер.УстановитьПометкуУдаления(
		ДополнительныеПараметры.Запись,
		ДополнительныеПараметры.ПометкаУдаления);
	
	Если УстановленаПометкаУдаления Тогда
		Оповестить("Запись_ЗаписьКалендаря", ДополнительныеПараметры.Запись);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет значение в массив, если данного значения нет в массиве.
//
// Параметры:
//  Значение - СправочникеСсылка - Значение.
//  Массив	 - Массив			 - Массив, в который будет добавлено значение.
//
Процедура ДобавитьЗначениеВМассив(Значение, Массив)
	
	Если ТипЗнч(Значение) = Тип("Структура")
		И Значение.Свойство("ЗаписьКалендаря")
		И Значение.Свойство("ДатаИсключения") Тогда
		
		Для Каждого ЭлементМассива Из Массив Цикл
			
			Если ЭлементМассива.ЗаписьКалендаря = Значение.ЗаписьКалендаря
				И ЭлементМассива.ДатаИсключения = Значение.ДатаИсключения Тогда
				Возврат;
			КонецЕсли;
			
		КонецЦикла;
		
		Массив.Добавить(Значение);
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Структура")
		И Значение.Свойство("Ссылка")
		И Значение.Свойство("ДеньНачала") Тогда
		
		Для Каждого ЭлементМассива Из Массив Цикл
			
			Если ЭлементМассива.Ссылка = Значение.Ссылка
				И ЭлементМассива.ДеньНачала = Значение.ДеньНачала Тогда
				Возврат;
			КонецЕсли;
			
		КонецЦикла;
		
		Массив.Добавить(Значение);
		
	Иначе
		
		Если Массив.Найти(Значение) = Неопределено Тогда
			Массив.Добавить(Значение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//// Устанавливает доступность элементов контекстного меню.
////
//// Параметры:
////  КонтекстноеМеню	 - ГруппаФормы	 - Контекстное меню.
////  Доступность		 - Булево		 - Новая доступность контекстного меню.
////
Процедура УстановитьДоступностьКонтекстногоМеню(КонтекстноеМеню, Доступность)
	
	Для Каждого ЭлементМеню Из КонтекстноеМеню.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ЭлементМеню) = Тип("ГруппаФормы") Тогда
			УстановитьДоступностьКонтекстногоМеню(ЭлементМеню, Доступность)
		ИначеЕсли ТипЗнч(ЭлементМеню) = Тип("КнопкаФормы") Тогда
			ЭлементМеню.Доступность = Доступность;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//// Обновить данные в планировщике.
////
//// Параметры:
////  Планировщик - Планировщик - Планировщик.
////  НастройкиОтображения - Структура - Настройки отображения.
////  ДанныеПланировщика - Структура - Данные планировщика.
////  ОчиститьЭлементы - Булево - Признак необходимости очистить элементы перед обновлением.
////
Процедура ОбновитьДанныеПланировщика(Планировщик, НастройкиОтображения, ДанныеПланировщика, ОчиститьЭлементы = Ложь)
	
	Если ОчиститьЭлементы Тогда
		Планировщик.Элементы.Очистить();
	КонецЕсли;
	
	Для Каждого СтруктураЭлемента Из ДанныеПланировщика.Элементы Цикл
		ДобавитьЗаписьКалендаряВПланировщик(
			Планировщик,
			СтруктураЭлемента,
			НастройкиОтображения.ОтображатьПомеченныеНаУдаление);
	КонецЦикла;
	
	Если НастройкиОтображения.ОтображатьЗанятость И НастройкиОтображения.ОтображатьСобытия Тогда
		Планировщик.ИнтервалыФона.Очистить();
		Для Каждого СтруктураИнтервалаФона Из ДанныеПланировщика.ИнтервалыФона Цикл
			ДобавитьИнтервалФонаВПланировщик(
				Планировщик,
				СтруктураИнтервалаФона);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

//// Обрабатывает результат изменения элементов планировщика.
////
Процедура ОбработатьРезультатИзмененияЭлементовПланировщика(Результат, ИсключенияПовторения, 
	ДанныеФормыПланировщик, НастройкиОтображения, УникальныйИдентификатор)
//	
//	Для Каждого НовоеИсключениеПовторения Из Результат.НовыеИсключенияПовторения Цикл
//		
//		Для Каждого ИсключениеПовторения Из ИсключенияПовторения Цикл
//			
//			Если ИсключениеПовторения.Ссылка = НовоеИсключениеПовторения.СтараяСсылка
//				И ИсключениеПовторения.ДатаНачалаИсходная = НовоеИсключениеПовторения.ДатаНачалаИсходная Тогда
//				
//				ИсключениеПовторения.Ссылка = НовоеИсключениеПовторения.НоваяСсылка;
//				ИсключениеПовторения.ВидЭлемента =
//					ПредопределенноеЗначение("Перечисление.ЭлементыРабочегоКалендаря.Событие");
//				ИсключениеПовторения.ТипЗаписиКалендаря =
//					ПредопределенноеЗначение("Перечисление.ТипЗаписиКалендаря.ЭлементПовторяющегосяСобытия");
//				Прервать;
//				
//			КонецЕсли;
//			
//		КонецЦикла;
//		
//	КонецЦикла;
//	
//	Если Результат.ОбновитьПринудительно Тогда
//		Оповестить("Запись_ЗаписьКалендаря", Результат.СсылкиИзмененныхЗаписейКалендаря);
//	Иначе
//		ОбновитьДанныеПланировщика(ДанныеФормыПланировщик, НастройкиОтображения, Результат.ДанныеПланировщика);
//		Центр_КаленарьКлиентСервер.ПрименитьНастройкиОтображения(
//			ДанныеФормыПланировщик, НастройкиОтображения);
//		Оповестить("Запись_ЗаписьКалендаря", Результат.СсылкиИзмененныхЗаписейКалендаря, УникальныйИдентификатор);
//	КонецЕсли;
//	
КонецПроцедуры

//// Открывает форму записи календаря.
////
//// Параметры:
////  Параметры	 - Структура	 - Параметры формы.
////  Уникальность - Произвольный	 - Уникальность формы.
////
Процедура ОткрытьФормуЗаписиКалендаря(Параметры, Уникальность = Неопределено)
	
	Если Уникальность = Неопределено Тогда
		Уникальность = Новый УникальныйИдентификатор;
	КонецЕсли;

	ОткрытьФорму("Справочник.Центр_Календарь.ФормаОбъекта", Параметры,, Уникальность);
	
КонецПроцедуры

// Обрабатывает показа элемента планировщика.
//
// Параметры:
//  Планировщик				 - Планировщик					 - Планировщик.
//
Процедура ПоказатьЭлементПланировщика(Планировщик)
	
	Если Планировщик.ВыделенныеЭлементы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныйЭлемент = Планировщик.ВыделенныеЭлементы[0];
	ЗначениеЭлемента = ВыделенныйЭлемент.Значение;
	
	Если ЗначениеЭлемента.ЭтоТекущаяЗапись Тогда
		Возврат;
	КонецЕсли;
		Если  ЗначениеЗаполнено(ЗначениеЭлемента.Предмет) Тогда
			СсылкаДляПерехода = ЗначениеЭлемента.Предмет;
		Иначе
			СсылкаДляПерехода = ЗначениеЭлемента.Ссылка;
		КонецЕсли;
		ПоказатьЗаписьКалендаря(СсылкаДляПерехода, ЗначениеЭлемента.Сотрудник);
	
КонецПроцедуры

//#КонецОбласти   


// Возвращает основного сотрудника для физ. лица.
//
// Параметры:
//  ФизическоеЛицо - СправочникССылка.ФизическиеЛица
//
// Возвращаемое значение:
//   СправочникССылка.Сотрудники
//
Функция ОсновнойСотрудникФизЛица(ФизическоеЛицо) Экспорт
		
	Возврат Центр_КалендарьСервер.ОсновнойСотрудникФизЛица(ФизическоеЛицо);
	
КонецФункции


// Открывает адресную книгу для выбора сотрудника и, если указано, их контейнеров и автоподстановок.
//
// Параметры:
//   ЭлементФормы - ЭлементФормы - элемент, оповещаемый о выборе.
//   ВыбранноеЗначение - СправочникСсылка.Сотрудники - ранее выбранное значение.
//   ЗаголовокФормы - Строка - необязательный, заголовок формы (по умолчанию - "Выбор пользователя").
//   ДополнениеТипа - ОписаниеТипов - необязательный, дополнение типа выбираемых объектов (по умолчанию - только
//     пользователи. Для автоподстановок указывается тип "Строка".
//   ТипОбъекта - ПеречислениеСсылка.ТипыОбъектов - Тип объекта, для дополнения типа "СправочникСсылка.АвтоподстановкиДляОбъектов".
//
Процедура ВыбратьСотрудникаИзАдреснойКниги(ЭлементФормы, ВыбранноеЗначение,
	ЗаголовокФормы = Неопределено, Знач ДополнениеТипа = Неопределено, ТипОбъекта = Неопределено) Экспорт
	
	Если ДополнениеТипа = Неопределено Тогда
		ДополнениеТипа = Новый ОписаниеТипов("СправочникСсылка.Сотрудники");
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимРаботыФормы", 1);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("УпрощенныйИнтерфейс", Истина);
	ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
	ПараметрыФормы.Вставить("ПодменятьПользователейСотрудниками", Истина);
	
	// Роли.
	Если ДополнениеТипа.СодержитТип(Тип("СправочникСсылка.РолиИсполнителей"))
		Или ДополнениеТипа.СодержитТип(Тип("СправочникСсылка.ПолныеРоли")) Тогда
		
		ПараметрыФормы.Вставить("ОтображатьРоли", Истина);
	КонецЕсли;
	
	// Группы и подразделения
	Если ДополнениеТипа.СодержитТип(Тип("СправочникСсылка.РабочиеГруппы"))
		Или ДополнениеТипа.СодержитТип(Тип("СправочникСсылка.СтруктураПредприятия"))
		Или ДополнениеТипа.СодержитТип(Тип("СправочникСсылка.ПодразделенияКонтейнеры")) Тогда
		
		ПараметрыФормы.Вставить("ВыбиратьКонтейнерыПользователей", Истина);
	КонецЕсли;
	
	// Автоподстановки документов.
	Если ДополнениеТипа.СодержитТип(Тип("СправочникСсылка.АвтоподстановкиДляОбъектов")) Тогда
		Если ТипОбъекта = ПредопределенноеЗначение("Перечисление.ТипыОбъектов.ДокументыПредприятия") Тогда
			ПараметрыФормы.Вставить("ОтображатьАвтоподстановкиПоДокументам", Истина);
		ИначеЕсли ТипОбъекта = ПредопределенноеЗначение("Перечисление.ТипыОбъектов.Мероприятия") Тогда
			ПараметрыФормы.Вставить("ОтображатьАвтоподстановкиПоМероприятиям", Истина);
		Иначе
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неизвестный тип объекта %1.'"),
				ТипОбъекта);
		КонецЕсли;
	КонецЕсли;
	
	// Автоподстановки процессов.
	Если ДополнениеТипа.СодержитТип(Тип("СправочникСсылка.АвтоподстановкиДляПроцессов")) Тогда
		ПараметрыФормы.Вставить("ОтображатьАвтоподстановкиПоПроцессам", Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ПараметрыФормы.Вставить("ВыбранныеАдресаты", ВыбранноеЗначение);
	КонецЕсли;
	
	Если ЗаголовокФормы = Неопределено Тогда
		ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Выбор сотрудника'"));
	Иначе
		ПараметрыФормы.Вставить("ЗаголовокФормы", ЗаголовокФормы);
	КонецЕсли;
	
	//РаботаСАдреснойКнигойКлиент.ВыбратьАдресатов(ПараметрыФормы, ЭлементФормы, Неопределено);
	
КонецПроцедуры
// Обработка выбора сотрудников
//
// Параметры:
//  Объект - ФормаКлиентскогоПриложения, ДанныеФормыЭлементКоллекции, ДанныеФормыСтруктура - 
//      Если реквизит формы, то ФормаКлиентскогоПриложения 
//      Если реквизит объекта, то ДанныеФормыСтруктура
//      Если реквизит ТЧ, то ДанныеФормыЭлементКоллекции (ТекущиеДанные)
//  Реквизит - Строка - Имя реквизита. Новое начение устанавливается в Объект[Реквизит]
//  ВыбранноеЗначение - СправочникСсылка.Сотрудники
//  СтандартнаяОбработка - Булево
//
Процедура СотрудникОбработкаВыбора(Объект, Реквизит, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.Пользователи") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	//Если ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение, "Действует") = Ложь Тогда
	//	
	//	СтандартнаяОбработка = Ложь;
	//	ДопПараметры = Новый Структура;
	//	ДопПараметры.Вставить("Объект", Объект);
	//	ДопПараметры.Вставить("Реквизит", Реквизит);
	//	ДопПараметры.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
	//	
	//	ОбработчикОтвета = Новый ОписаниеОповещения("ОбработатьОтветНедействующийСотрудник", ЭтотОбъект, ДопПараметры);
	//	ТекстВопроса = НСтр("ru='Вы выбрали недействительного сотрудника. Продолжить?'");
	//	
	//	ОбщегоНазначенияДокументооборотКлиент.ПоказатьВопросДаНет(ОбработчикОтвета,
	//		ТекстВопроса,,, КодВозвратаДиалога.Нет);
	//	
	//КонецЕсли;
	//
КонецПроцедуры


      