//////////////////////////////////////////////////////////////////////////////////
//// Сотрудники
////  
//////////////////////////////////////////////////////////////////////////////////
// Возвращает физ. лицо сотрудника.
// 
// Параметры:
//  Сотрудник - СправочникСсылка.Сотрудники
// 
// Возвращаемое значение:
//  СправочникСсылка.ФизическиеЛица
//  
Функция ФизЛицоСотрудника(Сотрудник) Экспорт
		
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "Владелец");
	
КонецФункции





//// Возвращает физ лиц сотрудников.
//// 
//// Параметры:
////  МассивСотрудников
////   * СправочникСсылка.Сотрудники
//// 
//// Возвращаемое значение:
////  Массив
////   * СправочникСсылка.ФизическиеЛица
////
Функция ФизЛицаСотрудников(МассивСотрудников) Экспорт
	
	Возврат Центр_КалендарьСервер.ФизЛицаСотрудников(МассивСотрудников);
	
КонецФункции

//// Возвращает основного сотрудника для физ. лица.
////
//// Параметры:
////  ФизическоеЛицо - СправочникССылка.ФизическиеЛица
////
//// Возвращаемое значение:
////   СправочникССылка.Сотрудники
////
Функция ОсновнойСотрудникФизЛица(ФизическоеЛицо) Экспорт
	 Если ФизическоеЛицо = Справочники.Пользователи.ПустаяСсылка() Тогда
	 	Возврат Справочники.Пользователи.ПустаяСсылка()
	 КонецЕсли;	
	Возврат ФизическоеЛицо;
	
КонецФункции


//////////////////////////////////////////////////////////////////////////////////
//// Работа с часовыми поясами (сервер).
////
//////////////////////////////////////////////////////////////////////////////////

//// Возвращает часовой пояс пользователя.
//// 
//// Параметры:
////  ПользовательИлиСотрудник - СправочникСсылка.Пользователи, СправочникСсылка.Сотрудники.
////
//// Возвращаемое значение:
////  Строка - Часовой пояс пользователя в формате GMT{+/-}hh:mm.
////
Функция ЧасовойПоясПользователя(ПользовательИлиСотрудник) Экспорт
	
	//Пользователь = Сотрудники.ПользовательСотрудника(ПользовательИлиСотрудник);
	//
	//Если Не ЗначениеЗаполнено(Пользователь) Тогда
		Возврат ЧасовойПоясПоУмолчанию();
	//КонецЕсли;
	//
	//Возврат ЧасовыеПоясаПользователей(
	//	ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Пользователь))[Пользователь];
	//
КонецФункции
 
//// Возвращает действующий режим отображения местного времени.
//// 
//// Возвращаемое значение:
////  ПеречислениеСсылка.РежимыОтображенияМестногоВремени - Действующий режим отображения местного времени.
////
Функция РежимОтображенияМестногоВремени() Экспорт
//	
//	// Персональная настройка.
//	РежимОтображенияМестногоВремени = РежимОтображенияМестногоВремениПерсональный();
//	Если ЗначениеЗаполнено(РежимОтображенияМестногоВремени) Тогда
//		Возврат РежимОтображенияМестногоВремени;
//	КонецЕсли;
//	
//	// Общая настройка.
//	РежимОтображенияМестногоВремени = РаботаСЧасовымиПоясамиПовтИсп.НастройкаРежимОтображенияМестногоВремени();
//	Если ЗначениеЗаполнено(РежимОтображенияМестногоВремени) Тогда
//		Возврат РежимОтображенияМестногоВремени;
//	КонецЕсли;
//	
//	// Поведение по умолчанию.
	РежимОтображенияМестногоВремени = Перечисления.РежимыОтображенияМестногоВремени.МестноеВремяСЧасовымПоясом;
	
	Возврат РежимОтображенияМестногоВремени;
	
КонецФункции

//// Возвращает часовой пояс по умолчанию.
////
//// Возвращаемое значение:
////  Строка - Часовой пояс по умолчанию в формате GMT{+/-}hh:mm.
////
Функция ЧасовойПоясПоУмолчанию() Экспорт
	
	Возврат Центр_КаленарьКлиентСервер.ЧасовойПоясСмещением(
		СмещениеСтандартногоВремени(
			ЧасовойПоясСеанса()));

	
КонецФункции




//////////////////////////////////////////////////////////////////////////////////
//// Модуль для работы с рабочим календарем.
////
//////////////////////////////////////////////////////////////////////////////////
   
// Возвращает по цвету стиля цвет календаря.
//
// Параметры:
//  ЦветСтиля - Цвет - Цвет стиля.
//
// Возвращаемое значение:
//  Перечисление.ЦветаРабочегоКалендаря - Цвет календаря.
//
Функция ПолучитьЦветКалендаря(ЦветСтиля) Экспорт
	
	Если ЦветСтиля = ЦветаСтиля.ЦветКалендаряКрасный Тогда
		ЦветКалендаря = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Красный");
	ИначеЕсли ЦветСтиля = ЦветаСтиля.ЦветКалендаряСиний Тогда
		ЦветКалендаря = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Синий");
	ИначеЕсли ЦветСтиля = ЦветаСтиля.ЦветКалендаряЖелтый Тогда
		ЦветКалендаря = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Желтый");
	ИначеЕсли ЦветСтиля = ЦветаСтиля.ЦветКалендаряЗеленый Тогда
		ЦветКалендаря = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Зеленый");
	ИначеЕсли ЦветСтиля = ЦветаСтиля.ЦветКалендаряОранжевый  Тогда
		ЦветКалендаря = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Оранжевый");
	Иначе
		ЦветКалендаря = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Нет");
	КонецЕсли;
	
	Возврат ЦветКалендаря;
	
КонецФункции

//// Формирует структуру элемент планировщика по событию.
////
//// Параметры:
////  НастройкиОтображения - Структура - Структура настроек отображения календаря.
////  ЗаписиКалендаря - Массив - Записи календаря.
//// 
//// Возвращаемое значение:
////  Массив - Структуры элементов планировщика.
////
Функция ПолучитьСтруктурыЭлементовПланировщика(НастройкиОтображения, ЗаписиКалендаря = Неопределено) Экспорт
	
	ПериодОтображения = Центр_КаленарьКлиентСервер.ПолучитьПериодОтображения(НастройкиОтображения);
	ВыделенныеДаты = Центр_КаленарьКлиентСервер.ПолучитьВыделенныеДаты(НастройкиОтображения);
	
	// Получение отображаемых данных
	ЗаписиКалендаряСНапоминаниями = ЗаписиКалендаряСНапоминаниямиТекущегоПользователя();
	СобытияПоЧасам = СформироватьТаблицуСобытий();
	Для Каждого ВыделеннаяДата Из ВыделенныеДаты Цикл
		
		ОтображаемаяДатаНачала =
			Центр_КаленарьКлиентСервер.ПолучитьДатуНачалаОтображаемогоПериода(
				ПериодОтображения, ВыделеннаяДата);
		ОтображаемаяДатаОкончания =
			Центр_КаленарьКлиентСервер.ПолучитьДатуОкончанияОтображаемогоПериода(
				ПериодОтображения, ВыделеннаяДата);
		
		СобытияНаДату = ПолучитьТаблицуСобытий(
			ОтображаемаяДатаНачала,
			ОтображаемаяДатаОкончания,
			НастройкиОтображения.ОтображатьПомеченныеНаУдаление,
			НастройкиОтображения.ФизЛица,
			НастройкиОтображения.ОтображатьОтклоненные,
			ЗаписиКалендаряСНапоминаниями,
			ЗаписиКалендаря,
			НастройкиОтображения.ОтображатьДействующиеЗадачи,
			НастройкиОтображения.ЗадачаФильтр);
		
		Для Каждого Событие Из СобытияНаДату Цикл
			НоваяСтрока = СобытияПоЧасам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Событие);
		КонецЦикла;
		
	КонецЦикла;
	
	СтруктурыЭлементов = Новый Массив;
	
	Для Каждого ЗаписьКалендаря Из СобытияПоЧасам Цикл
		СтруктурыЭлементовЗаписи = СтруктурыЭлементовЗаписи(
			ЗаписьКалендаря,
			НастройкиОтображения.ИспользоватьНапоминания,
			НастройкиОтображения.ОтключеноОтображениеВремени,
			НастройкиОтображения.ФизЛица);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтруктурыЭлементов, СтруктурыЭлементовЗаписи);
	КонецЦикла;
	
	Возврат СтруктурыЭлементов;
	
КонецФункции

//// Формирует структуры интервалов фона планировщика.
////
//// Параметры:
////  НастройкиОтображения - Структура - Структура настроек отображения календаря.
////
//// Возвращаемое значение:
////  Массив - Структуры интервалов планировщика.
////
Функция ПолучитьСтруктурыИнтерваловФонаПланировщика(НастройкиОтображения) Экспорт
	
	ИнтервалыФонаПланировщика = Новый Массив;
	
	Если Не (НастройкиОтображения.ОтображатьЗанятость И НастройкиОтображения.ОтображатьСобытия) Тогда
		Возврат ИнтервалыФонаПланировщика;
	КонецЕсли;
	
	ТаблицаЗанятости = ПолучитьТаблицуЗанятостиПланировщика(НастройкиОтображения);
	
	Для Каждого Занятость Из ТаблицаЗанятости Цикл
		СтруктураИнтервалаФона = ПолучитьСтруктуруИнтервалаФонаПланировщика(Занятость, НастройкиОтображения);
		ИнтервалыФонаПланировщика.Добавить(СтруктураИнтервалаФона);
	КонецЦикла;
	
	Возврат ИнтервалыФонаПланировщика;
	
КонецФункции

//// Формирует структуры элементов планировщика по записи календаря.
//// 
//// Параметры:
////  ЗаписьКалендаря - СтрокаТаблицыЗначений,
////                    СправочникОбъект.ЗаписиРабочегоКалендаря,
////                    СправочникСсылка.ЗаписиРабочегоКалендаря - Запись календаря.
////  ИспользоватьНапоминания - Булево, Неопределено - Использовать напоминания.
////  ОтключеноОтображениеВремени - Булево, Неопределено - Отключено отображение времени.
////  ОтображаемыеФизЛица - Массив из СправочникСсылка.ФизическиеЛица, Неопределено - Отображаемые физ лица.
//// 
//// Возвращаемое значение:
////  Массив из Структура - Структуры элементов планировщика по записи календаря.
////
Функция СтруктурыЭлементовЗаписи(ЗаписьКалендаря,
	ИспользоватьНапоминания,
	ОтключеноОтображениеВремени,
	ОтображаемыеФизЛица) Экспорт
	
	Если ИспользоватьНапоминания = Неопределено Тогда
		ИспользоватьНапоминания = ПолучитьФункциональнуюОпцию("ИспользоватьНапоминанияПользователя");
	КонецЕсли;
	
	Если ОтключеноОтображениеВремени = Неопределено Тогда
		НастройкаОтображениеВремениЭлементов = ПолучитьНастройкуОтображениеВремениЭлементов();
		ОтключеноОтображениеВремени =
			НастройкаОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.НеОтображать;
	КонецЕсли;
	
	Если ТипЗнч(ЗаписьКалендаря) = Тип("СтрокаТаблицыЗначений") Тогда
		УстановленоНапоминание = ЗаписьКалендаря.УстановленоНапоминание;
		Отработана = ЗаписьКалендаря.Отработана;
		Сотрудник = ЗаписьКалендаря.Сотрудник;   
	 
	ИначеЕсли ТипЗнч(ЗаписьКалендаря) = Тип("СправочникОбъект.Центр_Календарь") Тогда
		Отработана = ЗаписьКалендаряОтработана(ЗаписьКалендаря.Ссылка);
		Сотрудник = ЗаписьКалендаря.Сотрудник;
	ИначеЕсли ТипЗнч(ЗаписьКалендаря) = Тип("СправочникСсылка.Центр_Календарь") Тогда
		//Цвет = ПолучитьЦветСобытияКалендаря(ЗаписьКалендаря);
		Отработана = ЗаписьКалендаряОтработана(ЗаписьКалендаря);
		Сотрудник = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаписьКалендаря, "Сотрудник");
	Иначе
		УстановленоНапоминание = Ложь;
		Цвет = Перечисления.ЦветаРабочегоКалендаря.Нет;
		Отработана = Ложь;
		Сотрудник = Неопределено;
	КонецЕсли;
	
	ЭлементПланировщика = Новый ЭлементПланировщика;
	
	ЭлементПланировщика.Начало = ЗаписьКалендаря.ДатаНачала;
	ЭлементПланировщика.Конец = ЗаписьКалендаря.ДатаОкончания;
	ЭлементПланировщика.Текст =  ЗаписьКалендаря.Текст;
	
	ЭлементПланировщика.Значение =  Центр_КаленарьКлиентСервер.СформироватьЭлементЗаписиКалендаря(ЗаписьКалендаря);
	ЭлементПланировщика.ЦветФона = ПолучитьЦветТабличногоДокумента(ЗаписьКалендаря.ТипЗаписиКалендаря);
	ЭлементПланировщика.ЦветТекста = ЦветаСтиля.ЦветКалендаряПодпись;
	ЭлементПланировщика.ЦветРамки = ПолучитьЦветРамкиЭлементаПланировщика(ЭлементПланировщика.ЦветФона);
	
	Если ИспользоватьНапоминания И ОтключеноОтображениеВремени И УстановленоНапоминание Тогда
		ДатаНачалаСобытияСтрокой = Формат(ЗаписьКалендаря.ДатаНачала, "ДФ=HH:mm");
		ЭлементПланировщика.Текст = ДатаНачалаСобытияСтрокой + " " + ЭлементПланировщика.Текст;
	КонецЕсли;
	
	СтруктурыЭлементов = Новый Массив;
	
	УстановитьЗначениеИзмерения(ЭлементПланировщика, "ФизическоеЛицо", Сотрудник);
	СтруктураЭлемента = ЭлементПланировщика.Выгрузить();
	СтруктурыЭлементов.Добавить(СтруктураЭлемента);

	
	Возврат СтруктурыЭлементов;
	
КонецФункции

// Формирует структуру элемент планировщика по занятости.
//
Функция ПолучитьСтруктуруЭлементаПланировщикаЗанятость(Занятость, ФизическоеЛицо = Неопределено) Экспорт
	
	ЭлементПланировщика = Новый ЭлементПланировщика;
	
	Если ФизическоеЛицо = Неопределено Тогда
		ФизическоеЛицо = Занятость.ФизическоеЛицо;
	КонецЕсли;
	УстановитьЗначениеИзмерения(ЭлементПланировщика, "ФизическоеЛицо", ФизическоеЛицо);
	
	ЭлементПланировщика.Начало = Занятость.ДатаНачала;
	ЭлементПланировщика.Конец = Занятость.ДатаОкончания;
	ЭлементПланировщика.ЦветТекста = ЦветаСтиля.ЦветКалендаряПодпись;
	ЭлементПланировщика.Текст = Строка(Занятость.Занят);
	ЭлементПланировщика.ЦветФона = ПолучитьЦветЗанятости(Занятость);
	
	Возврат ЭлементПланировщика.Выгрузить();
	
КонецФункции

//// Формирует структуру настроек отображения планировщика.
////
Функция ПолучитьНастройкиОтображения() Экспорт
//	
	НастройкиОтображения = Новый Структура;
	
	// Период отображения
	НастройкиОтображения.Вставить(
		"ПериодОтображения",
		ПолучитьПерсональнуюНастройку("ПериодОтображенияРабочегоКалендаря"));
	
	// Физ. лица
	ФизЛица = Новый Массив();
	ФизЛица.Добавить( Пользователи.АвторизованныйПользователь());
	НастройкиОтображения.Вставить(
		"ФизЛица",
		ФизЛица);
	
	// Представления измерений
	ПредставленияИзмерений = Новый Соответствие;
	НастройкиОтображения.Вставить(
		"ПредставленияИзмерений",
		ПредставленияИзмерений);
	
	// Отображаемая дата
	ОтображаемаяДата = НачалоДня(ТекущаяДата());
	НастройкиОтображения.Вставить(
		"ОтображаемаяДата",
		ОтображаемаяДата);
	
	// Выделенные даты
	ВыделенныеДаты = Новый Массив;
	ВыделенныеДаты.Добавить(ОтображаемаяДата);
	НастройкиОтображения.Вставить(
		"ВыделенныеДаты",
		ВыделенныеДаты);
	
	// Отображать события
	НастройкиОтображения.Вставить(
		"ОтображатьСобытия",
		Истина);
	
	// Отображать занятость
	НастройкиОтображения.Вставить(
		"ОтображатьЗанятость",
		ПолучитьПерсональнуюНастройку("ОтображатьЗанятость"));
	
	// Отображать общую занятость
	НастройкиОтображения.Вставить(
		"ОтображатьОбщуюЗанятость",
		Ложь);
	
	// Исключения занятости
	ИсключенияЗанятости = Новый Массив;
	НастройкиОтображения.Вставить(
		"ИсключенияЗанятости",
		ИсключенияЗанятости);
	
	// Использовать напоминания
	НастройкиОтображения.Вставить(
		"ИспользоватьНапоминания",
		ПолучитьФункциональнуюОпцию("ИспользоватьНапоминанияПользователя"));
	
	// Настройка отображения времени элементов и 
	НастройкаОтображениеВремениЭлементов = ПолучитьНастройкуОтображениеВремениЭлементов();
	НастройкиОтображения.Вставить(
		"НастройкаОтображениеВремениЭлементов",
		НастройкаОтображениеВремениЭлементов);
	
	// Отключено отображение времени
	НастройкиОтображения.Вставить(
		"ОтключеноОтображениеВремени",
		НастройкаОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.НеОтображать);
	
	// Отображать помеченные на удаление
	НастройкиОтображения.Вставить(
		"ОтображатьПомеченныеНаУдаление",
		ПолучитьПерсональнуюНастройку("ОтображатьПомеченныеНаУдаление"));
	
	// Отображать отклоненные
	НастройкиОтображения.Вставить(
		"ОтображатьОтклоненные",
		ПолучитьПерсональнуюНастройку("ОтображатьОтклоненные"));
	
	// Цвет календаря подпись
	НастройкиОтображения.Вставить(
		"ЦветКалендаряПодпись",
		ЦветаСтиля.ЦветКалендаряПодпись);
	
	// Цвет календаря фон шапки
	НастройкиОтображения.Вставить(
		"ЦветКалендаряФонШапки",
		ЦветаСтиля.ЦветКалендаряФонШапки);
	
	// Отображать время с
	НастройкиОтображения.Вставить(
		"ОтображатьВремяС",
		ПолучитьПерсональнуюНастройку("ОтображатьВремяС"));
	
	// Отображать время по
	НастройкиОтображения.Вставить(
		"ОтображатьВремяПо",
		ПолучитьПерсональнуюНастройку("ОтображатьВремяПо"));
	
	// Отображать скрытые элементы
	НастройкиОтображения.Вставить(
		"ОтображатьСкрытыеЭлементы",
		Истина);
	
	// Размер ячейки времени
	НастройкиОтображения.Вставить(
		"РазмерЯчейкиВремени",
		ПолучитьПерсональнуюНастройку("РазмерЯчейкиВремени"));
	
	// Цвет фона текущего дня.
	НастройкиОтображения.Вставить(
		"ЦветФонаТекущегоДня",
		ЦветаСтиля.ЦветКалендаряФонТекущегоДня);
	
	// Цвет пустого фона.
	НастройкиОтображения.Вставить(
		"ЦветКалендаряДоступноеВремя",
		ЦветаСтиля.ЦветКалендаряДоступноеВремя);
	
	// Цвет текущей записи.
	НастройкиОтображения.Вставить(
		"ЦветКалендаряТекущаяЗапись",
		ЦветаСтиля.ЦветКалендаряТекущаяЗапись);
	
	// Цвет текущей записи.
	НастройкиОтображения.Вставить(
		"ЦветКалендаряТекущаяЗапись",
		ЦветаСтиля.ЦветКалендаряТекущаяЗапись);
	
	// Цвет рамки текущей записи.
	НастройкиОтображения.Вставить(
		"ЦветРамкиТекущаяЗапись",
		ПолучитьЦветРамкиЭлементаПланировщика(ЦветаСтиля.ЦветКалендаряТекущаяЗапись));
	
	// Отобразить текущую запись.
	НастройкиОтображения.Вставить(
		"ОтобразитьТекущуюЗапись",
		Ложь);
	
	// Ссылка текущей записи.
	НастройкиОтображения.Вставить(
		"ТекущаяЗаписьСсылка",
		Справочники.Центр_Календарь.ПустаяСсылка());
	
	// Дата начала текущей записи.
	НастройкиОтображения.Вставить(
		"ТекущаяЗаписьДатаНачала",
		Дата(1,1,1));
	
	// Дата окончания текущей записи.
	НастройкиОтображения.Вставить(
		"ТекущаяЗаписьДатаОкончания",
		Дата(1,1,1));
	
	// Текущая запись на весь день.
	НастройкиОтображения.Вставить(
		"ТекущаяЗаписьВесьДень",
		Ложь);
	
	// Запрет создания.
	НастройкиОтображения.Вставить(
		"ЗапретСоздания",
		Ложь);
	
	// Запрет изменения.
	НастройкиОтображения.Вставить(
		"ЗапретИзменения",
		Ложь);
	
	// Скрыть пустые дни в плане дня.
	НастройкиОтображения.Вставить(
		"ПланДняСкрытьПустые",
		Ложь);  
		
		// Скрыть пустые дни в плане дня.
	НастройкиОтображения.Вставить(
		"ОтображатьДействующиеЗадачи",
		Ложь);  
	НастройкиОтображения.Вставить(
		"ЗадачаФильтр",
		Ложь);


	
	Возврат НастройкиОтображения;
	
КонецФункции


 
// Процедура отображает события физ. лица в календаре на указанный период
Процедура ОтобразитьКалендарь(Планировщик, НастройкиОтображения) Экспорт
	
	ЗагрузитьДанныеПланировщика(Планировщик, НастройкиОтображения);
	Если НастройкиОтображения.ОтобразитьТекущуюЗапись Тогда
		Центр_КаленарьКлиентСервер.ОтобразитьТекущуюЗапись(
			Планировщик,
			НастройкиОтображения);
	КонецЕсли;
	
	Центр_КаленарьКлиентСервер.ПрименитьНастройкиОтображения(Планировщик, НастройкиОтображения);
	
КонецПроцедуры      

Процедура ОтобразитьКалендарьПоЗадаче(Планировщик, НастройкиОтображения) Экспорт
	
	ЗагрузитьДанныеПланировщика(Планировщик, НастройкиОтображения);
	Центр_КаленарьКлиентСервер.ПрименитьНастройкиОтображения(Планировщик, НастройкиОтображения);
	
КонецПроцедуры

//// Процедура заполняет таблицу плана дня
////
//// Параметры:
////  ДеревоПланДня - ДеревоЗначений - План дня.
////  НастройкиОтображения - Структура - Структура настроек отображения календаря.
////
Процедура ОтобразитьПланДня(ДеревоПланДня, НастройкиОтображения) Экспорт
	
	ДеревоПланДня.Строки.Очистить();
	
	ПериодОтображения =
		Центр_КаленарьКлиентСервер.ПолучитьПериодОтображения(НастройкиОтображения);
	ВыделенныеДаты =
		Центр_КаленарьКлиентСервер.ПолучитьВыделенныеДаты(НастройкиОтображения);
	ОтображатьФизЛицо = НастройкиОтображения.ФизЛица.Количество() <> 1;
	
	// Получение отображаемых данных.
	ЗаписиКалендаряСНапоминаниями = ЗаписиКалендаряСНапоминаниямиТекущегоПользователя();
	СобытияПоЧасам = СформироватьТаблицуСобытий();
	Для Каждого ВыделеннаяДата Из ВыделенныеДаты Цикл
		ОтображаемаяДатаНачала =
			Центр_КаленарьКлиентСервер.ПолучитьДатуНачалаОтображаемогоПериода(
				ПериодОтображения, ВыделеннаяДата);
		ОтображаемаяДатаОкончания =
			Центр_КаленарьКлиентСервер.ПолучитьДатуОкончанияОтображаемогоПериода(
				ПериодОтображения, ВыделеннаяДата);
		СобытияНаДату = ПолучитьТаблицуСобытий(
			ОтображаемаяДатаНачала,
			ОтображаемаяДатаОкончания,
			НастройкиОтображения.ОтображатьПомеченныеНаУдаление,
			НастройкиОтображения.ФизЛица,
			НастройкиОтображения.ОтображатьОтклоненные,
			ЗаписиКалендаряСНапоминаниями,
			,
			НастройкиОтображения.ОтображатьДействующиеЗадачи,
			НастройкиОтображения.ЗадачаФильтр);
		Для Каждого Событие Из СобытияНаДату Цикл
			НоваяСтрока = СобытияПоЧасам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Событие);
		КонецЦикла;
	КонецЦикла;
	
	// Отображение плана дня.
	СобытияДняПоЧасам = СобытияПоЧасам.СкопироватьКолонки();
	Для Каждого ВыделеннаяДата Из ВыделенныеДаты Цикл
		ОтображаемаяДатаНачала =
			Центр_КаленарьКлиентСервер.ПолучитьДатуНачалаОтображаемогоПериода(
				ПериодОтображения, ВыделеннаяДата);
		ОтображаемаяДатаОкончания =
			Центр_КаленарьКлиентСервер.ПолучитьДатуОкончанияОтображаемогоПериода(
				ПериодОтображения, ВыделеннаяДата);
		
		НачалоТекущегоДняНедели = ОтображаемаяДатаНачала;
		Пока НачалоТекущегоДняНедели < ОтображаемаяДатаОкончания Цикл
			
			// Отображение строки дня.
			СобытияДняПоЧасам.Очистить();
			НачалоТекущегоДняНедели = НачалоДня(НачалоТекущегоДняНедели);
			КонецТекущегоДняНедели = КонецДня(НачалоТекущегоДняНедели) + 1;
			
			Для Каждого Событие Из СобытияПоЧасам Цикл
				
				Если НастройкиОтображения.ОтобразитьТекущуюЗапись
					И Событие.Ссылка = НастройкиОтображения.ТекущаяЗаписьСсылка Тогда
					Продолжить;
				КонецЕсли;
				
				Если Событие.ДатаНачала < КонецТекущегоДняНедели
					И Событие.ДатаОкончания > НачалоТекущегоДняНедели Тогда
					ЗаполнитьЗначенияСвойств(СобытияДняПоЧасам.Добавить(), Событие);
				КонецЕсли;
				
			КонецЦикла;
			
			Если НастройкиОтображения.ПланДняСкрытьПустые Тогда
				Если СобытияДняПоЧасам.Количество() = 0 Тогда
					НачалоТекущегоДняНедели = НачалоТекущегоДняНедели + 86400; // 86400 - число секунд в сутках
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			СобытияДняПоЧасам.Сортировать("ДатаНачала, Наименование");
			
			КоличествоСобытий = СобытияДняПоЧасам.Количество();
			ДополнительноеПредставлениеДня = "";
			Если НачалоТекущегоДняНедели = НачалоДня(ТекущаяДатаСеанса()) Тогда
				ДополнительноеПредставлениеДня = НСтр("ru = 'Сегодня'");
			ИначеЕсли НачалоТекущегоДняНедели = (НачалоДня(ТекущаяДатаСеанса()) + 86400) Тогда // 86400 - число секунд в сутках
				ДополнительноеПредставлениеДня = НСтр("ru = 'Завтра'");
			ИначеЕсли НачалоТекущегоДняНедели = (НачалоДня(ТекущаяДатаСеанса()) - 86400) Тогда // 86400 - число секунд в сутках
				ДополнительноеПредставлениеДня = НСтр("ru = 'Вчера'");
			ИначеЕсли НачалоТекущегоДняНедели = (НачалоДня(ТекущаяДатаСеанса()) - 2 * 86400) Тогда // 86400 - число секунд в сутках
				ДополнительноеПредставлениеДня = НСтр("ru = 'Позавчера'");
			КонецЕсли;
			
			СтрокаТекущегоДня = ДеревоПланДня.Строки.Добавить();
			СтрокаТекущегоДня.ЭтоГруппа = Истина;
			СтрокаТекущегоДня.ДатаДень = НачалоТекущегоДняНедели;
			СтрокаТекущегоДня.ИндексЦвета = -1;
			
			ПредставлениеДня = Формат(НачалоТекущегоДняНедели, "ДФ='дддд'");
			ПредставлениеДаты = Формат(НачалоТекущегоДняНедели, "ДФ='д ММММ гггг'");
			Если ЗначениеЗаполнено(ДополнительноеПредставлениеДня) Тогда
				СтрокаТекущегоДня.ОписаниеКраткое = СтрШаблон("%1, %2, %3",
					ДополнительноеПредставлениеДня,
					ПредставлениеДня,
					ПредставлениеДаты);
			Иначе
				СтрокаТекущегоДня.ОписаниеКраткое = СтрШаблон("%1, %2",
					ТРег(ПредставлениеДня),
					ПредставлениеДаты);
			КонецЕсли;
			Если ЗначениеЗаполнено(КоличествоСобытий) Тогда
				СтрокаТекущегоДня.ОписаниеКраткое = СтрШаблон("%1 (%2)",
					СтрокаТекущегоДня.ОписаниеКраткое,
					КоличествоСобытий);
			КонецЕсли;
			
			// Отображений событий в дне.
			Для Каждого СтрокаСобытие Из СобытияДняПоЧасам Цикл
				СтрокаСобытиеТекущегоДня = СтрокаТекущегоДня.Строки.Добавить();
				ЭлементЗаписиКалендаря =
					Центр_КаленарьКлиентСервер.СформироватьЭлементЗаписиКалендаря(СтрокаСобытие);
				ЗаполнитьЗначенияСвойств(СтрокаСобытиеТекущегоДня, ЭлементЗаписиКалендаря);
				СтрокаСобытиеТекущегоДня.ДатаДень = НачалоТекущегоДняНедели;
				СтрокаСобытиеТекущегоДня.ОписаниеКраткое =
					СформироватьТекстовоеОписаниеСобытия(СтрокаСобытие, Не СтрокаСобытие.ВесьДень, ОтображатьФизЛицо);
				//Если СтрокаСобытие.Цвет = Перечисления.ЦветаРабочегоКалендаря.Нет И СтрокаСобытие.Отработана Тогда
				//	СтрокаСобытиеТекущегоДня.ИндексЦвета = 6;
				//Иначе
				//	СтрокаСобытиеТекущегоДня.ИндексЦвета =
				//		Центр_КаленарьКлиентСервер.ПолучитьИндексЦвета(СтрокаСобытие.Цвет);
				//КонецЕсли;
				СтрокаСобытиеТекущегоДня.Цвет = СтрокаСобытие.Цвет;
			КонецЦикла;
			
			НачалоТекущегоДняНедели = НачалоТекущегоДняНедели + 86400; // 86400 - число секунд в сутках
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает персональную настройку рабочего календаря текущего пользователя по ключу.
Функция ПолучитьПерсональнуюНастройку(Настройка) Экспорт
	
	Если Настройка = "ПериодОтображенияРабочегоКалендаря" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"ПериодОтображенияРабочегоКалендаря",
			Перечисления.ПериодОтображенияРабочегоКалендаря.Неделя);
		
	ИначеЕсли Настройка = "ОтображатьПомеченныеНаУдаление" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"ОтображатьПомеченныеНаУдаление",
			Ложь);
		
	ИначеЕсли Настройка = "ОтображатьОтклоненные" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"ОтображатьОтклоненные",
			Ложь);
	
	ИначеЕсли Настройка = "ОтображатьНавигационныйКалендарь" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"ОтображатьНавигационныйКалендарь",
			Ложь);
		
	ИначеЕсли Настройка = "СвернутьСобытияВесьДеньВКалендаре" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"СвернутьСобытияВесьДеньВКалендаре",
			Ложь);
		
	ИначеЕсли Настройка = "ВремяНачалаОтображения" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"ВремяНачалаОтображения",
			Дата("00010101080000"));
		
	ИначеЕсли Настройка = "ВремяОкончанияОтображения" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"ВремяОкончанияОтображения",
			Дата("00010101190000"));
		
	ИначеЕсли Настройка = "МасштабСтандартный" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"МасштабСтандартный",
			100);
		
	ИначеЕсли Настройка = "МасштабСПанельюИнформации" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"МасштабСПанельюИнформации",
			70);
		
	ИначеЕсли Настройка = "ОтображатьЛегенду" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"ОтображатьЛегенду",
			Истина);
		
	ИначеЕсли Настройка = "ОтображатьВремяС" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"ОтображатьВремяС",
			9);
		
	ИначеЕсли Настройка = "ОтображатьВремяПо" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"ОтображатьВремяПо",
			6);
		
	ИначеЕсли Настройка = "ОтображениеВремениЭлементов" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"ОтображениеВремениЭлементов",
			Перечисления.ОтображениеВремениЭлементов.ВремяНачалаИКонца);
		
	ИначеЕсли Настройка = "ОтображатьЗанятость" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"ОтображатьЗанятость",
			Истина);
		
	ИначеЕсли Настройка = "ИспользоватьБыстроеРедактирование" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"ИспользоватьБыстроеРедактирование",
			Ложь);
		
	ИначеЕсли Настройка = "РазмерЯчейкиВремени" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"РазмерЯчейкиВремени",
			15);
		
	ИначеЕсли Настройка = "ТекущиеКалендариВсеКалендари" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"ТекущиеКалендариВсеКалендари",
			Новый Массив);
		
	ИначеЕсли Настройка = "ОтображатьПолеСотрудник" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"ОтображатьПолеСотрудник",
			Ложь);
		
	ИначеЕсли Настройка = "ОтображатьКалендарьВЗаписиКалендаря" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"ОтображатьКалендарьВЗаписиКалендаря",
			Истина);
		
	ИначеЕсли Настройка = "СкрытьОтсутствияБудуРазбиратьЗадачи" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"СкрытьОтсутствияБудуРазбиратьЗадачи",
			Истина);
		
	Иначе
		
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Некорректная настройка рабочего календаря: ""%1""'"),
			Настройка);
		
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// Сохраняет персональную настройку рабочего календаря текущего пользователя.
Процедура УстановитьПерсональнуюНастройку(Настройка, Значение) Экспорт
	
	Если Настройка = "ПериодОтображенияРабочегоКалендаря" Тогда
		
		Если ТипЗнч(Значение) <> Тип("ПеречислениеСсылка.ПериодОтображенияРабочегоКалендаря") Тогда
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"ПериодОтображенияРабочегоКалендаря",
			Значение);
			
	ИначеЕсли Настройка = "ОтображатьПомеченныеНаУдаление" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"ОтображатьПомеченныеНаУдаление",
			Значение);
		
	ИначеЕсли Настройка = "ОтображатьОтклоненные" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"ОтображатьОтклоненные",
			Значение);
		
	ИначеЕсли Настройка = "ОтображатьНавигационныйКалендарь" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"ОтображатьНавигационныйКалендарь",
			Значение);
		
	ИначеЕсли Настройка = "СвернутьСобытияВесьДеньВКалендаре" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"СвернутьСобытияВесьДеньВКалендаре",
			Значение);
		
	ИначеЕсли Настройка = "ВремяНачалаОтображения" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Дата") Тогда
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"ВремяНачалаОтображения",
			Значение);
		
	ИначеЕсли Настройка = "ВремяОкончанияОтображения" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Дата") Тогда
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"ВремяОкончанияОтображения",
			Значение);
		
	ИначеЕсли Настройка = "МасштабСтандартный" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Число") Тогда
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"МасштабСтандартный",
			Значение);
		
	ИначеЕсли Настройка = "МасштабСПанельюИнформации" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Число") Тогда
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"МасштабСПанельюИнформации",
			Значение);
		
	ИначеЕсли Настройка = "ОтображатьЛегенду" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"ОтображатьЛегенду",
			Значение);
		
	ИначеЕсли Настройка = "ОтображатьВремяС" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Число") Тогда
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"ОтображатьВремяС",
			Значение);
		
	ИначеЕсли Настройка = "ОтображатьВремяПо" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Число") Тогда
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"ОтображатьВремяПо",
			Значение);
		
	ИначеЕсли Настройка = "ОтображениеВремениЭлементов" Тогда
		
		Если ТипЗнч(Значение) <> Тип("ПеречислениеСсылка.ОтображениеВремениЭлементов") Тогда
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"ОтображениеВремениЭлементов",
			Значение);
		
	ИначеЕсли Настройка = "ОтображатьЗанятость" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"ОтображатьЗанятость",
			Значение);
		
	ИначеЕсли Настройка = "ИспользоватьБыстроеРедактирование" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"ИспользоватьБыстроеРедактирование",
			Значение);
		
	ИначеЕсли Настройка = "РазмерЯчейкиВремени" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Число") Тогда
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"РазмерЯчейкиВремени",
			Значение);
		
	ИначеЕсли Настройка = "ТекущиеКалендариВсеКалендари" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Массив") Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"ТекущиеКалендариВсеКалендари",
			Значение);
		
	ИначеЕсли Настройка = "ОтображатьПолеСотрудник" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"ОтображатьПолеСотрудник",
			Значение);
		
	ИначеЕсли Настройка = "ОтображатьКалендарьВЗаписиКалендаря" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"ОтображатьКалендарьВЗаписиКалендаря",
			Значение);
		
	//ИначеЕсли Настройка = "СкрытьОтсутствияБудуРазбиратьЗадачи" Тогда
	//	
	//	Если ТипЗнч(Значение) <> Тип("Булево") Тогда
	//		
	//		ВызватьИсключение СтрШаблон(
	//			НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
	//			Настройка);
	//		
	//	КонецЕсли;
	//	
	//	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
	//		"РабочийКалендарь",
	//		"СкрытьОтсутствияБудуРазбиратьЗадачи",
	//		Значение);
	//		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Некорректная настройка рабочего календаря: ""%1""'"),
			Настройка);
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает пометку удаления записи и оповещает другие формы.
Функция УстановитьПометкуУдаления(Запись, ПометкаУдаления) Экспорт
	
	УстановленаПометкаУдаления = Ложь;
	
	ЗаписьОбъект = Запись.ПолучитьОбъект();
	Если ЗаписьОбъект.ПометкаУдаления <> ПометкаУдаления Тогда
		
		ЗаписьОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
		УстановленаПометкаУдаления = Истина;
		
		//ДобавитьВИсториюРаботыПользователя(ЗаписьОбъект);
		
		//СинхронизацияКалендарей.ПослеЗаписиСобытияКалендаря(ЗаписьОбъект.Ссылка);
		
	КонецЕсли;
	
	Возврат УстановленаПометкаУдаления;
	
КонецФункции


Процедура ПослеЗаписиСобытияКалендаря(Ссылка) Экспорт
	
	//УстановитьПривилегированныйРежим(Истина);
	//Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюКалендарей") Тогда
	//	Возврат;
	//КонецЕсли;
	//ФизЛицоСотрудника = Сотрудники.ФизЛицоСотрудника(Ссылка.Сотрудник);
	//Узлы = УзлыДляВыгрузки(ФизЛицоСотрудника);
	//Если Не ЗначениеЗаполнено(Узлы) Тогда
	//	Возврат;
	//КонецЕсли;
	//ПараметрыПроцедуры = НовыеПараметрыПроцедурыСинхронизации();
	//ПараметрыПроцедуры.Вставить("Узлы", Узлы);
	//ПараметрыПроцедуры.Вставить("ДатаНачала", НачалоДня(Ссылка.ДатаНачала));
	//ПараметрыПроцедуры.Вставить("ДатаОкончания", КонецДня(Ссылка.ДатаОкончания));
	//ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	//ПараметрыВыполненияВФоне.Вставить("НаименованиеФоновогоЗадания",
	//	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//	НСтр("ru = 'Синхронизация календаря сотрудника %1'"),
	//	ФизЛицоСотрудника));
	//ПараметрыВыполненияВФоне.ОжидатьЗавершение = 0;
	//ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
	//	"СинхронизацияКалендарей.СинхронизироватьВФоне",
	//	ПараметрыПроцедуры,
	//	ПараметрыВыполненияВФоне);
	//	
КонецПроцедуры


//// Возвращает по цвету рабочего календаря цвет для отображения
Функция ПолучитьЦветТабличногоДокумента(ТипЗаписи) Экспорт  
	
	ЗаписьСправочника = Справочники.Центр_КалендарьЦвета.НайтиПоРеквизиту("ТипЗаписиКалендаря",ТипЗаписи);	
	Если ЗаписьСправочника = Справочники.Центр_КалендарьЦвета.ПустаяСсылка() Тогда
		Возврат ЦветаСтиля.ЦветКалендаряПоУмолчанию;
	Иначе 
		МассивЦветов = СтрРазделить(ЗаписьСправочника.ЦветRGB, ",",Ложь);
		Возврат Новый Цвет(МассивЦветов[0], МассивЦветов[1], МассивЦветов[2]);
	КонецЕсли;	
КонецФункции

//// Переносит элементы планировщика на указанную дату.
////
Функция ПеренестиЭлементыПланировщикаНаДату(ЗаписиКалендаря, ДатаПереноса, НастройкиОтображения = Неопределено) Экспорт
//	
//	Результат = Новый Структура;
//	Результат.Вставить("СсылкиИзмененныхЗаписейКалендаря", Новый Массив);
//	Результат.Вставить("НовыеИсключенияПовторения", Новый Массив);
//	Результат.Вставить("ОбновитьПринудительно", Ложь);
//	Результат.Вставить("ДанныеПланировщика", Неопределено);
//	
//	НачатьТранзакцию();
//	Попытка
//		
//		НоваяДатаНачала = НачалоДня(ДатаПереноса);
//		Для Каждого ЗаписьКалендаря Из ЗаписиКалендаря Цикл
//			
//			Если ЗаписьКалендаря.ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие Тогда
//				
//				ЗаписьКалендаряОбъект = СоздатьИсключениеПовторяющейсяЗаписиКалендаря(ЗаписьКалендаря);
//				Длительность = ЗаписьКалендаряОбъект.ДатаОкончания - ЗаписьКалендаряОбъект.ДатаНачала;
//				ВремяНачала = ЗаписьКалендаряОбъект.ДатаНачала - НачалоДня(ЗаписьКалендаряОбъект.ДатаНачала);
//				ЗаписьКалендаряОбъект.ДатаНачала = НоваяДатаНачала + ВремяНачала;
//				ЗаписьКалендаряОбъект.ДатаОкончания = ЗаписьКалендаряОбъект.ДатаНачала + Длительность;
//				ЗаписьКалендаряОбъект.Записать();
//				
//				ДобавитьВИсториюРаботыПользователя(ЗаписьКалендаря.Ссылка);
//				ДобавитьВИсториюРаботыПользователя(ЗаписьКалендаряОбъект);
//				
//				Цвет = ПолучитьЦветСобытияКалендаря(ЗаписьКалендаря.Ссылка);
//				УстановитьЦветЗаписиКалендаря(ЗаписьКалендаряОбъект.Ссылка, Цвет);
//				
//				Результат.СсылкиИзмененныхЗаписейКалендаря.Добавить(ЗаписьКалендаряОбъект.Ссылка);
//				Результат.СсылкиИзмененныхЗаписейКалендаря.Добавить(ЗаписьКалендаря.Ссылка);
//				
//				ИсключениеПовторения = Новый Структура("НоваяСсылка, СтараяСсылка, ДатаНачалаИсходная");
//				ИсключениеПовторения.НоваяСсылка = ЗаписьКалендаряОбъект.Ссылка;
//				ИсключениеПовторения.СтараяСсылка = ЗаписьКалендаря.Ссылка;
//				ИсключениеПовторения.ДатаНачалаИсходная = ЗаписьКалендаря.ДатаНачалаИсходная;
//				Результат.НовыеИсключенияПовторения.Добавить(ИсключениеПовторения);
//				
//			Иначе
//				
//				ЗаписьКалендаряОбъект = ЗаписьКалендаря.Ссылка.ПолучитьОбъект();
//				Длительность = ЗаписьКалендаряОбъект.ДатаОкончания - ЗаписьКалендаряОбъект.ДатаНачала;
//				ВремяНачала = ЗаписьКалендаряОбъект.ДатаНачала - НачалоДня(ЗаписьКалендаряОбъект.ДатаНачала);
//				ЗаписьКалендаряОбъект.ДатаНачала = НоваяДатаНачала + ВремяНачала;
//				ЗаписьКалендаряОбъект.ДатаОкончания = ЗаписьКалендаряОбъект.ДатаНачала + Длительность;
//				ЗаписьКалендаряОбъект.Записать();
//				
//				ДобавитьВИсториюРаботыПользователя(ЗаписьКалендаряОбъект);
//				
//				Результат.СсылкиИзмененныхЗаписейКалендаря.Добавить(ЗаписьКалендаряОбъект.Ссылка);
//				
//			КонецЕсли;
//			
//		КонецЦикла;
//		
//		ЗафиксироватьТранзакцию();
//		
//	Исключение
//		ОтменитьТранзакцию();
//		ВызватьИсключение;
//	КонецПопытки;
//	
//	Результат.ОбновитьПринудительно = Истина;
//	Если НастройкиОтображения <> Неопределено Тогда
//		Результат.ДанныеПланировщика = ОбновитьДанныеПланировщика(НастройкиОтображения);
//	КонецЕсли;
//	
//	Возврат Результат;
//	
КонецФункции


// Формирует таблицу занятости.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Сформировать таблицу занятости:
//   * ФизическоеЛицо - СправочникСсылка.ФизическиеЛица.
//   * ДатаНачала - Дата.
//   * ДатаОкончания - Дата.
//   * Занят - Булево.
//
Функция СформироватьТаблицуЗанятости() Экспорт
	
	ТаблицаЗанятости = Новый ТаблицаЗначений;
	ТаблицаЗанятости.Колонки.Добавить("ФизическоеЛицо");
	ТаблицаЗанятости.Колонки.Добавить("ДатаНачала");
	ТаблицаЗанятости.Колонки.Добавить("ДатаОкончания");
	ТаблицаЗанятости.Колонки.Добавить("Занят");
	
	Возврат ТаблицаЗанятости;
	
КонецФункции


// Получает данные планировщика, при необходимость сохраняя измененную настройку.
//
Функция ПолучитьДанныеПланировщика(Знач НастройкиОтображения, Знач ИзмененнаяНастройка) Экспорт

	СохранитьНастройку(НастройкиОтображения, ИзмененнаяНастройка);
	
	ДанныеПланировщика = ПолучитьСтруктуруДанныхПланировщика();
	ДанныеПланировщика.Элементы = ПолучитьСтруктурыЭлементовПланировщика(НастройкиОтображения);
	ДанныеПланировщика.ИнтервалыФона = ПолучитьСтруктурыИнтерваловФонаПланировщика(НастройкиОтображения);
	
	Возврат ДанныеПланировщика;
	
КонецФункции

//// Получает данные планировщика, необходимые для обновления данных о записях календаря.
////
Функция ОбновитьДанныеПланировщика(Знач НастройкиОтображения, Знач ЗаписиКалендаря = Неопределено) Экспорт
	
	ДанныеПланировщика = ПолучитьСтруктуруДанныхПланировщика();
	Если ЗаписиКалендаря <> Неопределено Тогда
		ДанныеПланировщика.Элементы = ПолучитьСтруктурыЭлементовПланировщика(НастройкиОтображения, ЗаписиКалендаря);
	КонецЕсли;
	ДанныеПланировщика.ИнтервалыФона = ПолучитьСтруктурыИнтерваловФонаПланировщика(НастройкиОтображения);
	
	Возврат ДанныеПланировщика;
	
КонецФункции

//// Сохраняет измененную настройку отображения.
////
Процедура СохранитьНастройку(НастройкиОтображения, ИзмененнаяНастройка) Экспорт
	
	Если Не ЗначениеЗаполнено(ИзмененнаяНастройка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИзмененнаяНастройка = "ПериодОтображения" Тогда
		УстановитьПерсональнуюНастройку(
			"ПериодОтображенияРабочегоКалендаря",
			НастройкиОтображения.ПериодОтображения);
	КонецЕсли;
	
КонецПроцедуры


//// Устанавливает условное оформление плана дня на форме.
////
//// Параметры:
////  УсловноеОформление	 - УсловноеОформлениеКомпоновкиДанных	 - Содержит настройки условного оформления формы.
////
Процедура УстановитьУсловноеОформлениеПланДня(УсловноеОформление) Экспорт
	
	// Помеченные на удаление элементы.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Поля = Элемент.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ПланДня");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПланДня.ПометкаУдаления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра(
		"Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , , , , Истина));
	
	// Элемент дня.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Поля = Элемент.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ПланДня");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПланДня.ЭтоГруппа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра(
		"ЦветФона", ЦветаСтиля.ЦветКалендаряФонШапки);
	Элемент.Оформление.УстановитьЗначениеПараметра(
		"ЦветТекста", ЦветаСтиля.ЦветКалендаряПодпись);
	Элемент.Оформление.УстановитьЗначениеПараметра(
		"Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , Истина));
	
	// Элемент текущего дня.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Поля = Элемент.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ПланДня");
	
	ГруппаОтбораИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПланДня.ДатаДень");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ДатаСегодня");
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПланДня.ЭтоГруппа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра(
		"ЦветФона", ЦветаСтиля.ЦветКалендаряФонТекущегоДня);
	Элемент.Оформление.УстановитьЗначениеПараметра(
		"ЦветТекста", ЦветаСтиля.ЦветКалендаряПодписьТекущийДень);
	
КонецПроцедуры


//// Возвращает признак отработана для записи календаря.
////
//// Параметры:
////  ЗаписьКалендаря	 - СправочникСсылка.ЗаписиРабочегоКалендаря	 - Запись календаря.
//// 
//// Возвращаемое значение:
////  Булево - Признак того что запись календаря отработана.
////
Функция ЗаписьКалендаряОтработана(ЗаписьКалендаря) Экспорт
//	
//	Отработана = РегистрыСведений.НастройкиОтображенияЗаписейРабочегоКалендаря.ПолучитьНастройку(
//		ПользователиДокументооборот.ФизЛицоПользователя(),
//		ЗаписьКалендаря,
//		Перечисления.НастройкиЗаписейРабочегоКалендаря.Отработана);
//	Если Отработана = Неопределено Тогда
//		Возврат Ложь;
//	КонецЕсли;
//	
	Возврат Истина;
	
КонецФункции


//// Формирует таблицу занятости
//// 
//// Параметры:
////  ФизЛица - Массив из СправочникСсылка.ФизическиеЛица.
////  ДатаНачала - Дата.
////  ДатаОкончания - Дата.
////  ОтобразитьЗанятостьВДне - Булево.
////  ИсключенияЗанятости - Массив.
////  ТолькоИтоги - Булево.
//// 
//// Возвращаемое значение:
////  ТаблицаЗначений - См. РаботаСРабочимКалендаремСервер.СформироватьТаблицуЗанятости.
////
Функция ПолучитьТаблицуЗанятости(
	Знач ФизЛица,
	ДатаНачала,
	ДатаОкончания,
	ОтобразитьЗанятостьВДне = Истина,
	ИсключенияЗанятости = Неопределено,
	ТолькоИтоги = Ложь) Экспорт
	
	// Формирование структуры таблицы занятости
	ТаблицаЗанятости = СформироватьТаблицуЗанятости();
	
	// Если занятость в дне не отображается, то таблица занятости не заполняется
	Если Не ОтобразитьЗанятостьВДне Тогда
		Возврат ТаблицаЗанятости;
	КонецЕсли;
	
	//// Если передан некорректный период, то таблица занятости не заполняется
	//Если Не Центр_КаленарьКлиентСервер.ЯвляетсяКорректнымПериодом(ДатаНачала, ДатаОкончания) Тогда
	//	Возврат ТаблицаЗанятости;
	//КонецЕсли;
	//
	Если ТипЗнч(ФизЛица) = Тип("СправочникСсылка.Пользователи") Тогда
		
		МассивФизЛиц = Новый Массив;
		МассивФизЛиц.Добавить(ФизЛица);
		
	Иначе // Массив
		
		Если ФизЛица.Количество() = 0 Тогда
			Возврат ТаблицаЗанятости;
		КонецЕсли;
		
		МассивФизЛиц = ФизЛица;
		
	КонецЕсли;
	
	Если ТипЗнч(МассивФизЛиц[0]) <> Тип("СправочникСсылка.Пользователи") Тогда
		ВызватьИсключение НСтр("ru = 'ПолучитьТаблицуЗанятости выполняет получение занятости только по пользователям.'");
	КонецЕсли;
	
	//// Получение данных для расчета занятости
	//ТаблицаДоступности =
	//	РегистрыСведений.ДоступноеВремяФизическихЛиц.ПолучитьТаблицуДоступности(МассивФизЛиц);
	//	
	//ТаблицаЗанятостиФизЛиц = РегистрыСведений.ЗанятостьФизическихЛиц.ПолучитьТаблицуЗанятости(
	//	МассивФизЛиц, ДатаНачала, ДатаОкончания);
	//СортироватьПоСостояниюЗанятости(ТаблицаЗанятостиФизЛиц);
	//
	//ТаблицаЗанятостиПоЗаписямКалендаря = 
	//	Справочники.ЗаписиРабочегоКалендаря.ПолучитьТаблицуЗанятости(
	//		МассивФизЛиц, ДатаНачала, ДатаОкончания, ИсключенияЗанятости);
	//СортироватьПоСостояниюЗанятости(ТаблицаЗанятостиПоЗаписямКалендаря);
	//
	//// Расчет занятости для каждого сотрудника.
	//Для Каждого ФизЛицо Из МассивФизЛиц Цикл
	//	
	//	Если Не ТолькоИтоги Тогда
	//		
	//		// Полный подсчет занятости
	//		НоваяСтрока = ТаблицаЗанятости.Добавить();
	//		НоваяСтрока.ФизическоеЛицо = ФизЛицо;
	//		НоваяСтрока.ДатаНачала = ДатаНачала;
	//		НоваяСтрока.ДатаОкончания = ДатаОкончания;
	//		НоваяСтрока.Занят = Перечисления.СостоянияЗанятости.Занят;
	//		
	//		// Занятое время по ежедневной занятости
	//		РассчитатьДоступностьПоПолномуАлгоритму(
	//			ТаблицаДоступности, ТаблицаЗанятости, ФизЛицо,
	//			ДатаНачала, ДатаОкончания);
	//		
	//		// Занятое время по записям занятости
	//		ВнестиЗанятостиВТаблицуЗанятости(ТаблицаЗанятости, ТаблицаЗанятостиФизЛиц,
	//			ФизЛицо, ДатаНачала, ДатаОкончания);
	//		
	//		// Занятое время по записям календаря
	//		ВнестиЗанятостиВТаблицуЗанятости(
	//			ТаблицаЗанятости, ТаблицаЗанятостиПоЗаписямКалендаря, ФизЛицо,
	//			ДатаНачала, ДатаОкончания);
	//		
	//	Иначе
	//		
	//		// Краткий подсчет занятости
	//		НоваяСтрока = ТаблицаЗанятости.Добавить();
	//		НоваяСтрока.ФизическоеЛицо = ФизЛицо;
	//		НоваяСтрока.ДатаНачала = ДатаНачала;
	//		НоваяСтрока.ДатаОкончания = ДатаОкончания;
	//		НоваяСтрока.Занят = Перечисления.СостоянияЗанятости.Доступен;
	//		
	//		// Занятое время по записям календаря
	//		РасчетЗанятостиЗавершен = РассчитатьЗанятостьПоКраткомуАлгоритму(
	//			ТаблицаЗанятостиПоЗаписямКалендаря, ФизЛицо, НоваяСтрока.Занят);
	//		Если РасчетЗанятостиЗавершен Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		// Занятое время по записям занятости
	//		РасчетЗанятостиЗавершен = РассчитатьЗанятостьПоКраткомуАлгоритму(
	//			ТаблицаЗанятостиФизЛиц, ФизЛицо, НоваяСтрока.Занят);
	//		Если РасчетЗанятостиЗавершен Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		// Занятое время по ежедневной занятости
	//		РассчитатьДоступностьПоКраткомуАлгоритму(
	//			ТаблицаДоступности, ФизЛицо, ТаблицаЗанятостиФизЛиц,
	//			НоваяСтрока.Занят, ДатаНачала, ДатаОкончания);
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;
	
	Возврат ТаблицаЗанятости;
	
КонецФункции

//// Формирует таблицу рекомендаций, содержащую время доступное для всех физ лиц.
Функция ПолучитьТаблицуРекомендаций(Знач ФизЛица, ДатаНачала, ДатаОкончания, Длительность,
	ИсключенияЗанятости = Неопределено) Экспорт
//	
//	ТаблицаОбщейЗанятости = ПолучитьТаблицуОбщейЗанятости(
//		ФизЛица, ДатаНачала, ДатаОкончания, ИсключенияЗанятости);
//	
//	ТаблицаРекомендаций = ТаблицаОбщейЗанятости.СкопироватьКолонки();
//	
//	ДатаНачалаРекомендаций = КонецЧаса(ТекущаяДатаСеанса()) + 1;
//	ПараметрыОтбора = Новый Структура("Занят", Перечисления.СостоянияЗанятости.Доступен);
//	МассивСвободногоВремени = ТаблицаОбщейЗанятости.НайтиСтроки(ПараметрыОтбора);
//	Для Каждого СвободноеВремя Из МассивСвободногоВремени Цикл
//		
//		Если СвободноеВремя.ДатаОкончания <= ДатаНачалаРекомендаций Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		Если СвободноеВремя.ДатаНачала < ДатаНачалаРекомендаций Тогда
//			СвободноеВремя.ДатаНачала = ДатаНачалаРекомендаций;
//		КонецЕсли;
//		
//		Если (СвободноеВремя.ДатаОкончания - СвободноеВремя.ДатаНачала) >= Длительность Тогда
//			
//			ВнестиЗанятостьВТаблицуЗанятости(
//				ТаблицаРекомендаций,
//				Справочники.ФизическиеЛица.ПустаяСсылка(),
//				СвободноеВремя.ДатаНачала,
//				СвободноеВремя.ДатаОкончания,
//				СвободноеВремя.Занят,
//				ДатаНачала,
//				ДатаОкончания);
//			
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	Возврат ТаблицаРекомендаций;
//	
КонецФункции

//// Сортирует таблицу значений по полю занятости
Процедура СортироватьПоСостояниюЗанятости(ТаблицаЗанятости,
	ДополнительноеНаправлениеСортировки = "", ДополнительнаяСортировка = "") Экспорт
//	
//	Если ЗначениеЗаполнено(ДополнительноеНаправлениеСортировки) Тогда
//		ДополнительноеНаправлениеСортировки = " " + ДополнительноеНаправлениеСортировки;
//	КонецЕсли;
//	
//	Если ЗначениеЗаполнено(ДополнительнаяСортировка) Тогда
//		ДополнительнаяСортировка = ", " + ДополнительнаяСортировка;
//	КонецЕсли;
//	
//	ТаблицаЗанятости.Колонки.Добавить("ИндексСортировки");
//	
//	Для Каждого СтрокаТаблицы Из ТаблицаЗанятости Цикл
//		
//		Если СтрокаТаблицы.Занят = Перечисления.СостоянияЗанятости.Отсутствует Тогда
//			СтрокаТаблицы.ИндексСортировки = 3;
//		ИначеЕсли СтрокаТаблицы.Занят = Перечисления.СостоянияЗанятости.Занят Тогда
//			СтрокаТаблицы.ИндексСортировки = 2;
//		ИначеЕсли СтрокаТаблицы.Занят = Перечисления.СостоянияЗанятости.ПодВопросом Тогда
//			СтрокаТаблицы.ИндексСортировки = 1;
//		ИначеЕсли СтрокаТаблицы.Занят = Перечисления.СостоянияЗанятости.Доступен Тогда
//			СтрокаТаблицы.ИндексСортировки = 0;
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	ЗначениеСортировки = СтрШаблон("ИндексСортировки%1%2",
//		ДополнительноеНаправлениеСортировки,
//		ДополнительнаяСортировка);
//	
//	ТаблицаЗанятости.Сортировать(ЗначениеСортировки);
//	
//	ТаблицаЗанятости.Колонки.Удалить("ИндексСортировки");
//	
КонецПроцедуры


// Возвращает все календари физических лиц.
// 
// Параметры:
//  ФизЛица - Массив из СправочникСсылка.ФизическиеЛица - Физические лица.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.Сотрудники, СправочникСсылка.РолиИсполнителей - Все календари физического лиц.
//
Функция КалендариФизЛиц(ФизЛица) Экспорт
	
	//Если ФизЛица.Количество() = 1 И ФизЛица[0] = ПараметрыСеанса.ФизическоеЛицоПользователя Тогда
	//	СотрудникиФизЛиц = ПараметрыСеанса.СотрудникиПользователя;
	//Иначе
	//	СотрудникиФизЛиц = Сотрудники.ВсеСотрудникиФизЛиц(ФизЛица);
	//КонецЕсли;
	//РолиФизЛица = РегистрыСведений.ИсполнителиРолей.РолиИсполнителей(СотрудникиФизЛиц);
	//
	//КалендариФизЛиц = Новый Массив;
	//ОбщегоНазначенияКлиентСервер.ДополнитьМассив(КалендариФизЛиц, СотрудникиФизЛиц);
	//ОбщегоНазначенияКлиентСервер.ДополнитьМассив(КалендариФизЛиц, РолиФизЛица);
	//
	//Возврат КалендариФизЛиц;
	Возврат ФизЛица;
	
КонецФункции

//// Формирует пустую таблицу событий.
////
Функция СформироватьТаблицуСобытий()
	
	ТаблицаСобытий = Новый ТаблицаЗначений;
	ТаблицаСобытий.Колонки.Добавить("Ссылка");
	ТаблицаСобытий.Колонки.Добавить("Наименование");
	ТаблицаСобытий.Колонки.Добавить("ДатаНачала");
	ТаблицаСобытий.Колонки.Добавить("ДатаОкончания");
	ТаблицаСобытий.Колонки.Добавить("ВесьДень");
	ТаблицаСобытий.Колонки.Добавить("Цвет");
	ТаблицаСобытий.Колонки.Добавить("ПометкаУдаления");
	ТаблицаСобытий.Колонки.Добавить("ТипЗаписиКалендаря");
	ТаблицаСобытий.Колонки.Добавить("Состояние");     
	ТаблицаСобытий.Колонки.Добавить("Текст");
	ТаблицаСобытий.Колонки.Добавить("УстановленоНапоминание", Новый ОписаниеТипов("Булево"));
	ТаблицаСобытий.Колонки.Добавить("Сотрудник");
	ТаблицаСобытий.Колонки.Добавить("ФизическоеЛицо");
	ТаблицаСобытий.Колонки.Добавить("Предмет");
	ТаблицаСобытий.Колонки.Добавить("Связанная");
	ТаблицаСобытий.Колонки.Добавить("Отработана", Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаСобытий;
	
КонецФункции

// Получает настройку отображения времени элементов.
//
// Возвращаемое значение:
//  ОтображениеВремениЭлементовПланировщика - Настройка отображения времени элементов
//
Функция ПолучитьНастройкуОтображениеВремениЭлементов()
	
	ОтображениеВремениЭлементов = ПолучитьПерсональнуюНастройку("ОтображениеВремениЭлементов");
	
	Если ОтображениеВремениЭлементов = Перечисления.ОтображениеВремениЭлементов.НеОтображать Тогда
		НастройкаОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.НеОтображать;
	ИначеЕсли ОтображениеВремениЭлементов = Перечисления.ОтображениеВремениЭлементов.ВремяНачала Тогда
		НастройкаОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.ВремяНачала;
	ИначеЕсли ОтображениеВремениЭлементов = Перечисления.ОтображениеВремениЭлементов.ВремяНачалаИКонца Тогда
		НастройкаОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.ВремяНачалаИКонца;
	Иначе
		НастройкаОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.ВремяНачалаИКонца;
	КонецЕсли;
	
	Возврат НастройкаОтображениеВремениЭлементов;
	
КонецФункции

//// Загружает данные планировщика.
////
//// Параметры:
////  Планировщик - Планировщик - Планировщик.
////  НастройкиОтображения - Структура - Структура настроек отображения календаря.
////
Процедура ЗагрузитьДанныеПланировщика(Планировщик, НастройкиОтображения)
	
	Планировщик.Элементы.Очистить();
	Планировщик.ИнтервалыФона.Очистить();   
	Планировщик.НачалоПериодаОтображения = Неопределено;
	Планировщик.КонецПериодаОтображения = Неопределено;
	
	ПериодОтображения = Центр_КаленарьКлиентСервер.ПолучитьПериодОтображения(НастройкиОтображения);
	ВыделенныеДаты = Центр_КаленарьКлиентСервер.ПолучитьВыделенныеДаты(НастройкиОтображения);
	
	// События
	Если НастройкиОтображения.ОтображатьСобытия Тогда
		
		// Получение отображаемых данных
		ЗаписиКалендаряСНапоминаниями = ЗаписиКалендаряСНапоминаниямиТекущегоПользователя();
		СобытияПоЧасам = СформироватьТаблицуСобытий();
		Для Каждого ВыделеннаяДата Из ВыделенныеДаты Цикл
			ОтображаемаяДатаНачала =
				Центр_КаленарьКлиентСервер.ПолучитьДатуНачалаОтображаемогоПериода(
					ПериодОтображения,
					ВыделеннаяДата);
			Если ЗначениеЗаполнено(Планировщик.НачалоПериодаОтображения) Тогда
				Планировщик.НачалоПериодаОтображения = Мин(
					Планировщик.НачалоПериодаОтображения,
					ОтображаемаяДатаНачала);
			Иначе
				Планировщик.НачалоПериодаОтображения = ОтображаемаяДатаНачала;
			КонецЕсли;
			
			ОтображаемаяДатаОкончания =
				Центр_КаленарьКлиентСервер.ПолучитьДатуОкончанияОтображаемогоПериода(
					ПериодОтображения,
					ВыделеннаяДата);
			Если ЗначениеЗаполнено(Планировщик.КонецПериодаОтображения) Тогда
				Планировщик.КонецПериодаОтображения = Мин(
					Планировщик.КонецПериодаОтображения,
					ОтображаемаяДатаОкончания);
			Иначе
				Планировщик.КонецПериодаОтображения = ОтображаемаяДатаОкончания;
			КонецЕсли;
			
			СобытияНаДату =  ПолучитьТаблицуСобытий(
				ОтображаемаяДатаНачала,
				ОтображаемаяДатаОкончания,
				НастройкиОтображения.ОтображатьПомеченныеНаУдаление,
				НастройкиОтображения.ФизЛица,
				НастройкиОтображения.ОтображатьОтклоненные,
				ЗаписиКалендаряСНапоминаниями,
				,
				НастройкиОтображения.ОтображатьДействующиеЗадачи,
				НастройкиОтображения.ЗадачаФильтр);
			Для Каждого Событие Из СобытияНаДату Цикл
				НоваяСтрока = СобытияПоЧасам.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Событие);
			КонецЦикла;
		КонецЦикла;
		
		// Заполнение элементов планировщика - События
		Для Каждого Событие Из СобытияПоЧасам Цикл
			СтруктурыЭлементовЗаписи = СтруктурыЭлементовЗаписи(
				Событие,
				НастройкиОтображения.ИспользоватьНапоминания,
				НастройкиОтображения.ОтключеноОтображениеВремени,
				НастройкиОтображения.ФизЛица);
			Для Каждого СтруктураЭлемента Из СтруктурыЭлементовЗаписи Цикл
				Элемент = Планировщик.Элементы.Добавить(Событие.ДатаНачала, Событие.ДатаОкончания);
				Элемент.Загрузить(СтруктураЭлемента);
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	//
	//// Занятость
	//Если НастройкиОтображения.ОтображатьЗанятость Тогда
	//	
	//	ТаблицаЗанятости = ПолучитьТаблицуЗанятостиПланировщика(НастройкиОтображения);
	//	ТаблицаОбщейЗанятости = ПолучитьТаблицуОбщейЗанятостиПланировщика(ТаблицаЗанятости, НастройкиОтображения);
	//	
	//	// Заполнение элементов планировщика
	//	Если НастройкиОтображения.ОтображатьСобытия Тогда
	//		Для Каждого Занятость Из ТаблицаЗанятости Цикл
	//			ИнтервалФона = Планировщик.ИнтервалыФона.Добавить(Занятость.ДатаНачала, Занятость.ДатаОкончания);
	//			ИнтервалФона.Цвет = ПолучитьЦветЗанятости(Занятость);
	//			Центр_КаленарьКлиентСервер.УстановитьЗначениеИзмеренияИнтервалаФона(
	//				ИнтервалФона,
	//				"ФизическоеЛицо",
	//				Занятость.ФизическоеЛицо);
	//		КонецЦикла;
	//	Иначе
	//		
	//		Для Каждого Занятость Из ТаблицаЗанятости Цикл
	//			Если Занятость.Занят = Перечисления.СостоянияЗанятости.Доступен Тогда
	//				Продолжить;
	//			КонецЕсли;
	//			Элемент = Планировщик.Элементы.Добавить(Занятость.ДатаНачала, Занятость.ДатаОкончания);
	//			СтруктураЭлемента = ПолучитьСтруктуруЭлементаПланировщикаЗанятость(Занятость);
	//			Элемент.Загрузить(СтруктураЭлемента);
	//		КонецЦикла;
	//		
	//		Для Каждого Занятость Из ТаблицаОбщейЗанятости Цикл
	//			Если Занятость.Занят = Перечисления.СостоянияЗанятости.Доступен Тогда
	//				Продолжить;
	//			КонецЕсли;
	//			Элемент = Планировщик.Элементы.Добавить(Занятость.ДатаНачала, Занятость.ДатаОкончания);
	//			СтруктураЭлемента = ПолучитьСтруктуруЭлементаПланировщикаЗанятость(Занятость, "Общее");
	//			Элемент.Загрузить(СтруктураЭлемента);
	//		КонецЦикла;
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
КонецПроцедуры

//// Формирует таблицу событий
Функция ПолучитьТаблицуСобытий(
	ОтображаемаяДатаНачала,
	ОтображаемаяДатаОкончания,
	ОтображатьПомеченныеНаУдаление,
	ФизЛица,
	ОтображатьОтклоненные,
	ЗаписиКалендаряСНапоминаниями,
	ЗаписиКалендаря = Неопределено,
	ОтображатьДействующиеЗадачи,
	ЗадачаФильтр
	)
	
	//КалендариФизЛиц = КалендариФизЛиц(ФизЛица);
	
	// Для возможности добавления в дальнейшем ссылок на мероприятия не используется Выгрузить.
	ТаблицаСобытий = СформироватьТаблицуСобытий();
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Центр_Календарь.Ссылка КАК Ссылка,
		|	Центр_Календарь.Наименование КАК Наименование,
		|	Центр_Календарь.ДатаНачала КАК ДатаНачала,
		|	Центр_Календарь.ДатаОкончания КАК ДатаОкончания,
		|	Центр_Календарь.ВесьДень КАК ВесьДень,
		|	Центр_Календарь.ПометкаУдаления КАК ПометкаУдаления,
		|	Центр_Календарь.ТипЗаписиКалендаря КАК ТипЗаписиКалендаря,
		|	Центр_Календарь.Состояние КАК Состояние,
		|	Центр_Календарь.Сотрудник КАК Сотрудник,
		|	Центр_Календарь.Предмет КАК Предмет,
		|	Центр_Календарь.Связанная КАК Связанная,
		|	Центр_Календарь.ДатаНачала < &ТекущаяДата
		|		И Центр_Календарь.ДатаОкончания > &ТекущаяДата КАК Вхождение,
		|	Центр_Задача.Номер + ""; "" + Центр_Задача.Номер КАК Текст,
		|	Центр_Задача.Наименование КАК Наименование2
		|ИЗ
		|	Справочник.Центр_Календарь КАК Центр_Календарь
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Центр_Задача КАК Центр_Задача
		|		ПО Центр_Календарь.Предмет = Центр_Задача.Ссылка";
	
	

	
	Запрос.УстановитьПараметр("ДатаНачала", ОтображаемаяДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ОтображаемаяДатаОкончания);
	 
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	
	Если ЗадачаФильтр <> Ложь Тогда
	    Запрос.Текст = Запрос.Текст + "
		|ГДЕ
		|	Центр_Задача.Ссылка = &ЗадачаФильтр"; 
		Запрос.УстановитьПараметр("ЗадачаФильтр", ЗадачаФильтр);
	Иначе
	    Запрос.Текст = Запрос.Текст + "
		|ГДЕ
		|	Центр_Календарь.Сотрудник В(&Сотрудники)";
        Запрос.УстановитьПараметр("Сотрудники", ФизЛица);
	КонецЕсли;
	
	Если Не ОтображатьПомеченныеНаУдаление Тогда
		Запрос.Текст = Запрос.Текст + "
			|	И Центр_Календарь.ПометкаУдаления = ЛОЖЬ";
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать(); 
	
	
	
	Пока Выборка.Следующий() Цикл  
		Если (ОтображатьДействующиеЗадачи И Выборка.Вхождение) ИЛИ ОтображатьДействующиеЗадачи = Ложь  Тогда
			НоваяСтрока = ТаблицаСобытий.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЕсли;
		
		
				
	КонецЦикла;
	
	
	
	Для Каждого СтрокаСобытия Из ТаблицаСобытий Цикл
		СтрокаСобытия.УстановленоНапоминание = ЗаписиКалендаряСНапоминаниями[СтрокаСобытия.Ссылка] = Истина;
	КонецЦикла;
	
	ТаблицаСобытий.Сортировать("ДатаНачала");
	СкрытьОтсутствияБудуРазбиратьЗадачи = ПолучитьПерсональнуюНастройку("СкрытьОтсутствияБудуРазбиратьЗадачи");
	
	Возврат ТаблицаСобытий;
	
КонецФункции


// Формирует текстовое описание события
Функция СформироватьТекстовоеОписаниеСобытия(Событие, ВключатьВремяВОписание, ОтображатьФизЛицо)
	
	Описание = Новый Массив;
	
	//Если Событие.Состояние = Перечисления.СостоянияЗаписейРабочегоКалендаря.ПодВопросом Тогда
	//	Описание.Добавить("?");
	//ИначеЕсли Событие.Состояние = Перечисления.СостоянияЗаписейРабочегоКалендаря.Отклонено Тогда
	//	Описание.Добавить("-");
	//КонецЕсли;
	
	Если ВключатьВремяВОписание Тогда
		Описание.Добавить(СтрШаблон("%1 - %2",
			Формат(Событие.ДатаНачала, "ДФ=ЧЧ:мм"),
			Формат(Событие.ДатаОкончания, "ДФ=ЧЧ:мм")));
	КонецЕсли;
	
	Если ОтображатьФизЛицо Тогда
		Описание.Добавить(СтрШаблон("%1,", Событие.Сотрудник));
	КонецЕсли;
	
	Описание.Добавить(Событие.Наименование);
	
	Возврат СтрСоединить(Описание, " ");
	
КонецФункции

// Вспомогательная функция расчета доступности по полному алгоритму
Процедура РассчитатьДоступностьПоПолномуАлгоритму(
	ТаблицаДоступности, ТаблицаЗанятости, ФизЛицо, ДатаНачала, ДатаОкончания)
	
	НачалоДняИтерации = НачалоДня(ДатаНачала);
	КонецДняПоследнейИтерации = КонецДня(ДатаОкончания);
	Пока НачалоДняИтерации < КонецДняПоследнейИтерации Цикл
		
		ПараметрыОтбора = Новый Структура("ФизическоеЛицо, ДеньНедели");
		ПараметрыОтбора.ФизическоеЛицо = ФизЛицо;
		ПараметрыОтбора.ДеньНедели = ДеньНедели(НачалоДняИтерации);
		ДоступностьДняИтерации = ТаблицаДоступности.НайтиСтроки(ПараметрыОтбора);
		
		Для Каждого СтрокаДоступностьДняИтерации Из ДоступностьДняИтерации Цикл
			
			ВремяНачалаСтроки = СтрокаДоступностьДняИтерации.ВремяНачала;
			ВремяОкончанияСтроки = СтрокаДоступностьДняИтерации.ВремяОкончания;
			Если ВремяОкончанияСтроки = Дата("00010101235959") Тогда
				ВремяОкончанияСтроки = Дата("00010102000000");
			КонецЕсли;
			
			ДатаНачалаСтроки = НачалоДняИтерации + (ВремяНачалаСтроки - НачалоДня(ВремяНачалаСтроки));
			ДатаОкончанияСтроки = НачалоДняИтерации + (ВремяОкончанияСтроки - НачалоДня(ВремяНачалаСтроки));
			Занят = СтрокаДоступностьДняИтерации.Занят;
			
			ВнестиЗанятостьВТаблицуЗанятости(ТаблицаЗанятости, ФизЛицо,
				ДатаНачалаСтроки, ДатаОкончанияСтроки, Занят, ДатаНачала, ДатаОкончания);
			
		КонецЦикла;
		
		НачалоДняИтерации = НачалоДняИтерации + 86400; // 86400 - число секунд в сутках
		
	КонецЦикла;
	
КонецПроцедуры

// Вспомогательная функция расчета доступности по краткому алгоритму
Процедура РассчитатьДоступностьПоКраткомуАлгоритму(
	ТаблицаДоступности, ФизЛицо, ТаблицаЗанятости,
	ЗанятостьСотрудника, ДатаНачала, ДатаОкончания)
	
	ТаблицаЗанятостиВременная = СформироватьТаблицуЗанятости();
	
	НачалоДняИтерации = НачалоДня(ДатаНачала);
	КонецДняПоследнейИтерации = КонецДня(ДатаОкончания);
	Пока НачалоДняИтерации < КонецДняПоследнейИтерации Цикл
		
		ТаблицаЗанятостиВременная.Очистить();
		
		ПараметрыОтбора = Новый Структура("ФизическоеЛицо, ДеньНедели");
		ПараметрыОтбора.ФизическоеЛицо = ФизЛицо;
		ПараметрыОтбора.ДеньНедели = ДеньНедели(НачалоДняИтерации);
		ДоступностьДняИтерации = ТаблицаДоступности.НайтиСтроки(ПараметрыОтбора);
		
		ДатаНачалаТаблицыЗанятости = Макс(ДатаНачала, НачалоДня(НачалоДняИтерации));
		ДатаОкончанияТаблицыЗанятости = Мин(ДатаОкончания, КонецДня(НачалоДняИтерации));
		НоваяСтрока = ТаблицаЗанятостиВременная.Добавить();
		НоваяСтрока.ФизическоеЛицо = ФизЛицо;
		НоваяСтрока.ДатаНачала = ДатаНачалаТаблицыЗанятости;
		НоваяСтрока.ДатаОкончания = ДатаОкончанияТаблицыЗанятости;
		НоваяСтрока.Занят = Перечисления.СостоянияЗанятости.Занят;
		
		Для Каждого СтрокаДоступностьДняИтерации Из ДоступностьДняИтерации Цикл
			
			ВремяНачалаСтроки = СтрокаДоступностьДняИтерации.ВремяНачала;
			ВремяОкончанияСтроки = СтрокаДоступностьДняИтерации.ВремяОкончания;
			Если ВремяОкончанияСтроки = Дата("00010101235959") Тогда
				ВремяОкончанияСтроки = Дата("00010102000000");
			КонецЕсли;
			
			ДатаНачалаСтроки = НачалоДняИтерации + (ВремяНачалаСтроки - НачалоДня(ВремяНачалаСтроки));
			ДатаОкончанияСтроки = НачалоДняИтерации + (ВремяОкончанияСтроки - НачалоДня(ВремяНачалаСтроки));
			
			ВнестиЗанятостьВТаблицуЗанятости(ТаблицаЗанятостиВременная, ФизЛицо,
				ДатаНачалаСтроки, ДатаОкончанияСтроки, СтрокаДоступностьДняИтерации.Занят,
				ДатаНачалаТаблицыЗанятости, ДатаОкончанияТаблицыЗанятости);
			
		КонецЦикла;
		
		ВнестиЗанятостиВТаблицуЗанятости(ТаблицаЗанятостиВременная, ТаблицаЗанятости,
			ФизЛицо, ДатаНачалаТаблицыЗанятости, ДатаОкончанияТаблицыЗанятости,
			Перечисления.СостоянияЗанятости.Доступен);
		
		// Проверка наличия строки с занятым временем в итоговой временной таблице занятости.
		ПараметрыОтбора = Новый Структура("Занят");
		ПараметрыОтбора.Занят = Перечисления.СостоянияЗанятости.Занят;
		КоличествоСтрокЗанятогоВремени = ТаблицаЗанятостиВременная.НайтиСтроки(ПараметрыОтбора).Количество();
		Если КоличествоСтрокЗанятогоВремени <> 0 Тогда
			ЗанятостьСотрудника = Перечисления.СостоянияЗанятости.Занят;
			Возврат;
		КонецЕсли;
		
		НачалоДняИтерации = НачалоДняИтерации + 86400; // 86400 - число секунд в сутках
		
	КонецЦикла;
	
КонецПроцедуры

// Вспомогательная функция расчета занятости по краткому алгоритму
Функция РассчитатьЗанятостьПоКраткомуАлгоритму(ТаблицаЗанятости, ФизЛицо, ЗанятостьСотрудника)
	
	РасчетЗанятостиЗавершен = Ложь;
	
	// Учитывается что отсутствует занятость может быть установлена только у отсутствий.
	ИтоговаяЗанятостьСотрудника = ПолучитьИтоговуюЗанятость(ТаблицаЗанятости, ФизЛицо);
	Если ИтоговаяЗанятостьСотрудника = Перечисления.СостоянияЗанятости.Отсутствует Тогда
		ЗанятостьСотрудника = Перечисления.СостоянияЗанятости.Отсутствует;
		РасчетЗанятостиЗавершен = Истина;
	ИначеЕсли ИтоговаяЗанятостьСотрудника = Перечисления.СостоянияЗанятости.Занят Тогда
		ЗанятостьСотрудника = Перечисления.СостоянияЗанятости.Занят;
		РасчетЗанятостиЗавершен = Истина;
	ИначеЕсли ИтоговаяЗанятостьСотрудника = Перечисления.СостоянияЗанятости.ПодВопросом Тогда
		ЗанятостьСотрудника = Перечисления.СостоянияЗанятости.ПодВопросом;
	КонецЕсли;
	
	Возврат РасчетЗанятостиЗавершен;
	
КонецФункции

// Возвращает итоговую занятость по таблице занятости
Функция ПолучитьИтоговуюЗанятость(ТаблицаЗанятости, ФизЛицо)
	
	ИтоговаяЗанятость = Перечисления.СостоянияЗанятости.Доступен;
	
	// Учитывается что отсутствует занятость может быть установлена только у отсутствий.
	ПараметрыОтбора = Новый Структура("ФизическоеЛицо");
	ПараметрыОтбора.ФизическоеЛицо = ФизЛицо;
	МассивЗанятостиСотрудников = ТаблицаЗанятости.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СтрокаЗанятостиСотрудника Из МассивЗанятостиСотрудников Цикл
		Если СтрокаЗанятостиСотрудника.Занят = Перечисления.СостоянияЗанятости.Отсутствует Тогда
			ИтоговаяЗанятость = Перечисления.СостоянияЗанятости.Отсутствует;
			Прервать;
		ИначеЕсли СтрокаЗанятостиСотрудника.Занят = Перечисления.СостоянияЗанятости.Занят Тогда
			ИтоговаяЗанятость = Перечисления.СостоянияЗанятости.Занят;
			Прервать;
		ИначеЕсли СтрокаЗанятостиСотрудника.Занят = Перечисления.СостоянияЗанятости.ПодВопросом Тогда
			ИтоговаяЗанятость = Перечисления.СостоянияЗанятости.ПодВопросом;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИтоговаяЗанятость;
	
КонецФункции

// Вносит занятости из таблицы в таблицу занятости
Процедура ВнестиЗанятостиВТаблицуЗанятости(ТаблицаЗанятости, ТаблицаЗанятостиИсточник,
	ФизЛицо, ДатаНачала, ДатаОкончания, Занят = Неопределено)
	
	Если Занят <> Неопределено Тогда
		ПараметрыОтбора = Новый Структура("ФизическоеЛицо, Занят");
		ПараметрыОтбора.ФизическоеЛицо = ФизЛицо;
		ПараметрыОтбора.Занят = Занят;
	Иначе
		ПараметрыОтбора = Новый Структура("ФизическоеЛицо");
		ПараметрыОтбора.ФизическоеЛицо = ФизЛицо;
	КонецЕсли;
	
	МассивЗанятостиСотрудника = ТаблицаЗанятостиИсточник.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СтрокаЗанятостиСотрудника Из МассивЗанятостиСотрудника Цикл
		
		ВнестиЗанятостьВТаблицуЗанятости(ТаблицаЗанятости, ФизЛицо,
			СтрокаЗанятостиСотрудника.ДатаНачала, СтрокаЗанятостиСотрудника.ДатаОкончания,
			СтрокаЗанятостиСотрудника.Занят, ДатаНачала, ДатаОкончания);
		
	КонецЦикла;
	
КонецПроцедуры

// Вносит занятость в таблицу занятости
Процедура ВнестиЗанятостьВТаблицуЗанятости(ТаблицаЗанятости,
	ФизЛицо, Знач ДатаНачала, Знач ДатаОкончания, Занят, ДатаНачалаТаблицы, ДатаОкончанияТаблицы)
	
	Если ДатаОкончания <= ДатаНачалаТаблицы Тогда
		Возврат;
	КонецЕсли;
	
	Если ДатаНачала >= ДатаОкончанияТаблицы Тогда
		Возврат;
	КонецЕсли;
	
	Если ДатаНачала < ДатаНачалаТаблицы Тогда
		ДатаНачала = ДатаНачалаТаблицы;
	КонецЕсли;
	
	Если ДатаОкончания > ДатаОкончанияТаблицы Тогда
		ДатаОкончания = ДатаОкончанияТаблицы;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("ФизическоеЛицо");
	ПараметрыОтбора.ФизическоеЛицо = ФизЛицо;
	МассивЗанятости = ТаблицаЗанятости.НайтиСтроки(ПараметрыОтбора);
	СтрокиКУдалению = Новый Массив;
	
	Для Каждого СтрокаЗанятости Из МассивЗанятости Цикл
		
		// Разбиваем существующие строки занятости
		Если СтрокаЗанятости.ДатаНачала < ДатаОкончания
			И СтрокаЗанятости.ДатаОкончания > ДатаНачала
			И СтрокаЗанятости.Занят <> Занят Тогда
			
			Если СтрокаЗанятости.ДатаНачала < ДатаНачала Тогда
				СтрокаЗанятостиПерваяЧасть = ТаблицаЗанятости.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаЗанятостиПерваяЧасть, СтрокаЗанятости);
				СтрокаЗанятостиПерваяЧасть.ДатаОкончания = ДатаНачала;
			КонецЕсли;
			
			Если СтрокаЗанятости.ДатаОкончания > ДатаОкончания Тогда
				СтрокаЗанятостиВтораяЧасть = ТаблицаЗанятости.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаЗанятостиВтораяЧасть, СтрокаЗанятости);
				СтрокаЗанятостиВтораяЧасть.ДатаНачала = ДатаОкончания;
			КонецЕсли;
			
			СтрокиКУдалению.Добавить(СтрокаЗанятости);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаЗанятости.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	НоваяСтрока = ТаблицаЗанятости.Добавить();
	НоваяСтрока.ФизическоеЛицо = ФизЛицо;
	НоваяСтрока.ДатаНачала = ДатаНачала;
	НоваяСтрока.ДатаОкончания = ДатаОкончания;
	НоваяСтрока.Занят = Занят;
	
	СкорректироватьТаблицуЗанятости(ТаблицаЗанятости);
	
КонецПроцедуры

// Корректирует дубли и пересечение в таблице занятости
Процедура СкорректироватьТаблицуЗанятости(ТаблицаЗанятости)
	
	ТребуетсяВнестиКоррективы = Истина;
	
	Пока ТребуетсяВнестиКоррективы Цикл
		
		ТребуетсяВнестиКоррективы = Ложь;
		
		ТаблицаЗанятостиКопия = ТаблицаЗанятости.Скопировать();
		
		ТаблицаЗанятости.Очистить();
		
		Для Каждого СтрокаЗанятости Из ТаблицаЗанятостиКопия Цикл
			
			ВнестиЗаписьВТаблицуЗанятости = Истина;
			
			Для Каждого ВнесеннаяСтрокаЗанятости Из ТаблицаЗанятости Цикл
				
				Если ЗанятостиСовпадают(СтрокаЗанятости, ВнесеннаяСтрокаЗанятости) Тогда
					ВнестиЗаписьВТаблицуЗанятости = Ложь;
					Прервать;
				КонецЕсли;
				
				Если СтрокаЗанятости.ФизическоеЛицо = ВнесеннаяСтрокаЗанятости.ФизическоеЛицо
					И СтрокаЗанятости.ДатаНачала <= ВнесеннаяСтрокаЗанятости.ДатаОкончания
					И СтрокаЗанятости.ДатаОкончания >= ВнесеннаяСтрокаЗанятости.ДатаНачала
					И СтрокаЗанятости.Занят = ВнесеннаяСтрокаЗанятости.Занят Тогда
					
					ВнесеннаяСтрокаЗанятости.ДатаНачала = Мин(ВнесеннаяСтрокаЗанятости.ДатаНачала, СтрокаЗанятости.ДатаНачала);
					ВнесеннаяСтрокаЗанятости.ДатаОкончания = Макс(ВнесеннаяСтрокаЗанятости.ДатаОкончания, СтрокаЗанятости.ДатаОкончания);
					
					ТребуетсяВнестиКоррективы = Истина;
					ВнестиЗаписьВТаблицуЗанятости = Ложь;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ ВнестиЗаписьВТаблицуЗанятости Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаЗанятости.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗанятости);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаЗанятости.Сортировать("ФизическоеЛицо, ДатаНачала");
	
КонецПроцедуры

// Проверяет совпадение строк занятости
Функция ЗанятостиСовпадают(Занятость1, Занятость2)
	
	Возврат Занятость1.ФизическоеЛицо = Занятость2.ФизическоеЛицо
		И Занятость1.ДатаНачала = Занятость2.ДатаНачала
		И Занятость1.ДатаОкончания = Занятость2.ДатаОкончания
		И Занятость1.Занят = Занятость2.Занят;
	
КонецФункции

//// Устанавливает значение измерения элемента планировщика.
////
//// Параметры:
////  Элемент - ЭлементПланировщика - Элемент планировщика.
////  Измерение - Любой - Измерение планировщика.
////  ЗначениеИзмерения - Любой - Значение измерения планировщика.
////
Процедура УстановитьЗначениеИзмерения(Элемент, Измерение, ЗначениеИзмерения)

	СтруктураЭлемента = Новый Структура("ЗначенияИзмерений");
	
	СоответствиеИзмерений = Новый Соответствие();
	СоответствиеИзмерений.Вставить(Измерение, ЗначениеИзмерения);
	СтруктураЭлемента.ЗначенияИзмерений = Новый ФиксированноеСоответствие(СоответствиеИзмерений);
	
	Элемент.Загрузить(СтруктураЭлемента);
	
КонецПроцедуры

// Формирует таблицу общей занятости по переданной таблице занятости.
//
Функция СформироватьТаблицуОбщейЗанятости(ТаблицаЗанятости, ДатаНачала, ДатаОкончания)
	
	ТаблицаОбщейЗанятости = ТаблицаЗанятости.СкопироватьКолонки();
	
	ПараметрыОтбора = Новый Структура("Занят", Перечисления.СостоянияЗанятости.Доступен);
	МассивСвободногоВремени = ТаблицаЗанятости.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СвободноеВремя Из МассивСвободногоВремени Цикл
		
		ВнестиЗанятостьВТаблицуЗанятости(ТаблицаОбщейЗанятости, Справочники.ФизическиеЛица.ПустаяСсылка(),
			СвободноеВремя.ДатаНачала, СвободноеВремя.ДатаОкончания, СвободноеВремя.Занят,
			ДатаНачала, ДатаОкончания);
		
	КонецЦикла;
	
	ПараметрыОтбора = Новый Структура("Занят", Перечисления.СостоянияЗанятости.ПодВопросом);
	МассивЗанятогоВремени = ТаблицаЗанятости.НайтиСтроки(ПараметрыОтбора);
	Для Каждого ПодВопросомВремя Из МассивЗанятогоВремени Цикл
		
		ВнестиЗанятостьВТаблицуЗанятости(ТаблицаОбщейЗанятости, Справочники.ФизическиеЛица.ПустаяСсылка(),
			ПодВопросомВремя.ДатаНачала, ПодВопросомВремя.ДатаОкончания, ПодВопросомВремя.Занят,
			ДатаНачала, ДатаОкончания);
		
	КонецЦикла;
	
	ПараметрыОтбора = Новый Структура("Занят", Перечисления.СостоянияЗанятости.Занят);
	МассивЗанятогоВремени = ТаблицаЗанятости.НайтиСтроки(ПараметрыОтбора);
	Для Каждого ЗанятоеВремя Из МассивЗанятогоВремени Цикл
		
		ВнестиЗанятостьВТаблицуЗанятости(ТаблицаОбщейЗанятости, Справочники.ФизическиеЛица.ПустаяСсылка(),
			ЗанятоеВремя.ДатаНачала, ЗанятоеВремя.ДатаОкончания, ЗанятоеВремя.Занят,
			ДатаНачала, ДатаОкончания);
		
	КонецЦикла;
	
	ПараметрыОтбора = Новый Структура("Занят", Перечисления.СостоянияЗанятости.Отсутствует);
	МассивЗанятогоВремени = ТаблицаЗанятости.НайтиСтроки(ПараметрыОтбора);
	Для Каждого ОтсутствуетВремя Из МассивЗанятогоВремени Цикл
		
		ВнестиЗанятостьВТаблицуЗанятости(ТаблицаОбщейЗанятости, Справочники.ФизическиеЛица.ПустаяСсылка(),
			ОтсутствуетВремя.ДатаНачала, ОтсутствуетВремя.ДатаОкончания, ОтсутствуетВремя.Занят,
			ДатаНачала, ДатаОкончания);
		
	КонецЦикла;
	
	Возврат ТаблицаОбщейЗанятости;
	
КонецФункции

//// Формирует таблицу занятости планировщика.
////
//// Параметры:
////  НастройкиОтображения - Структура - Структура настроек отображения календаря.
////
//// Возвращаемое значение:
////  ТаблицаЗначений - Таблица занятости планировщика.
////
Функция ПолучитьТаблицуЗанятостиПланировщика(НастройкиОтображения)
//	
	ПериодОтображения = Центр_КаленарьКлиентСервер.ПолучитьПериодОтображения(НастройкиОтображения);
	ВыделенныеДаты = Центр_КаленарьКлиентСервер.ПолучитьВыделенныеДаты(НастройкиОтображения);
	ОтобразитьЗанятостьВДне = Центр_КаленарьКлиентСервер.ПолучитьОтобразитьЗанятостьВДне(НастройкиОтображения);
	
	ТаблицаЗанятости = СформироватьТаблицуЗанятости();
	Для Каждого ВыделеннаяДата Из ВыделенныеДаты Цикл
		
		ОтображаемаяДатаНачала =
			Центр_КаленарьКлиентСервер.ПолучитьДатуНачалаОтображаемогоПериода(
				ПериодОтображения, ВыделеннаяДата);
		
		ОтображаемаяДатаОкончания =
			Центр_КаленарьКлиентСервер.ПолучитьДатуОкончанияОтображаемогоПериода(
				ПериодОтображения, ВыделеннаяДата);
		
		ТаблицаЗанятостиНаДату = ПолучитьТаблицуЗанятости(
			НастройкиОтображения.ФизЛица,
			ОтображаемаяДатаНачала,
			ОтображаемаяДатаОкончания,
			ОтобразитьЗанятостьВДне,
			НастройкиОтображения.ИсключенияЗанятости);
		Для Каждого Занятость Из ТаблицаЗанятостиНаДату Цикл
			НоваяСтрока = ТаблицаЗанятости.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Занятость);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаЗанятости;
	
КонецФункции

//// Формирует таблицу общей занятости планировщика.
////
//// Параметры:
////  ТаблицаЗанятости - ТаблицаЗначений - Таблица занятости планировщика.
////  НастройкиОтображения - Структура - Структура настроек отображения календаря.
////
//// Возвращаемое значение:
////  ТаблицаЗначений - Таблица занятости планировщика.
////
Функция ПолучитьТаблицуОбщейЗанятостиПланировщика(ТаблицаЗанятости, НастройкиОтображения)
	
	Если Не НастройкиОтображения.ОтображатьОбщуюЗанятость Тогда
		ТаблицаОбщейЗанятости = ТаблицаЗанятости.СкопироватьКолонки();
		Возврат ТаблицаОбщейЗанятости;
	КонецЕсли;
	
	ДатаНачалаОбщая = Центр_КаленарьКлиентСервер.ПолучитьДатаНачалаОбщая(НастройкиОтображения);
	ДатаОкончанияОбщая = Центр_КаленарьКлиентСервер.ПолучитьДатаОкончанияОбщая(НастройкиОтображения);
	
	Возврат СформироватьТаблицуОбщейЗанятости(ТаблицаЗанятости, ДатаНачалаОбщая, ДатаОкончанияОбщая);
	
КонецФункции

//// Формирует структуру интервала фона планировщика.
////
//// Параметры:
////  Занятость - Структура - Занятость.
////  НастройкиОтображения - Структура - Структура настроек отображения календаря.
////
//// Возвращаемое значение:
////  Структура - Интервал фона планировщика
////
Функция ПолучитьСтруктуруИнтервалаФонаПланировщика(Занятость, НастройкиОтображения)
	
	СтруктураИнтервалаФона = Новый Структура;
	СтруктураИнтервалаФона.Вставить("Начало", Занятость.ДатаНачала);
	СтруктураИнтервалаФона.Вставить("Конец", Занятость.ДатаОкончания);
	СтруктураИнтервалаФона.Вставить("Цвет", ПолучитьЦветЗанятости(Занятость));
	СтруктураИнтервалаФона.Вставить("ФизическоеЛицо", Занятость.ФизическоеЛицо);
	
	Возврат СтруктураИнтервалаФона;
	
КонецФункции

//// Возвращает цвет занятости.
////
//// Параметры:
////  Занятость - Структура - Занятость.
////
//// Возвращаемое значение:
////  Цвет - Цвет занятости.
////
Функция ПолучитьЦветЗанятости(Занятость)
	ЦветЗанятости = ЦветаСтиля.ЦветКалендаряДоступноеВремя;
	Возврат ЦветЗанятости;
	
КонецФункции

//// Возвращает пустую структуру данных планировщика.
////
//// Возвращаемое значение:
////  Структура - Структура данных планировщика.
////
Функция ПолучитьСтруктуруДанныхПланировщика()
	
	ДанныеПланировщика = Новый Структура;
	ДанныеПланировщика.Вставить("Элементы", Новый Массив);
	ДанныеПланировщика.Вставить("ИнтервалыФона", Новый Массив);
	
	Возврат ДанныеПланировщика;
	
КонецФункции


//// Определяет, по каким записям календаря у текущего пользователя установлены напоминания.
//// 
//// Возвращаемое значение:
////  Соответствие - Записи календаря с напоминания текущего пользователя.
////   * Ключ     - СправочникСсылка.ЗаписиРабочегоКалендаря - Запись календаря.
////   * Значение - Булево                                   - Наличие напоминания текущему пользователю.
////
Функция ЗаписиКалендаряСНапоминаниямиТекущегоПользователя()
//	
//	УстановитьПривилегированныйРежим(Истина);
//	
//	Запрос = Новый Запрос(
//		"ВЫБРАТЬ
//		|	НапоминанияПользователя.Источник КАК Источник
//		|ИЗ
//		|	РегистрСведений.НапоминанияПользователя КАК НапоминанияПользователя
//		|ГДЕ
//		|	НапоминанияПользователя.Пользователь = &Пользователь");
//	
//	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
//	
	ЗаписиКалендаряСНапоминаниями = Новый Соответствие;
//	РезультатЗапроса = Запрос.Выполнить();
//	Выборка = РезультатЗапроса.Выбрать();
//	Пока Выборка.Следующий() Цикл
//		ЗаписиКалендаряСНапоминаниями[Выборка.Источник] = Истина;
//	КонецЦикла;
//	
	Возврат ЗаписиКалендаряСНапоминаниями;
	
КонецФункции


// Возвращает цвет рамки элемента календаря.
//
// Параметры:
//  ЦветФона	 - Цвет	 - Цвет фона элемента планировщика.
// 
// Возвращаемое значение:
//  Цвет - Цвет рамки записи календаря.
//
Функция ПолучитьЦветРамкиЭлементаПланировщика(ЦветФона)

	ЦветРамки = ЦветаСтиля.РамкаКалендаряПоУмолчанию;
	Возврат ЦветРамки;
	
КонецФункции
