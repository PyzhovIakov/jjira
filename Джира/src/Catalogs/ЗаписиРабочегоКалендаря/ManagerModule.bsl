#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	// Переопределение для целей избранного - вместо карточки с настройками размещения отчета будет открываться его основная форма.
	Если ВидФормы = "ФормаОбъекта" Тогда
		
		СсылкаЗаписиКалендаря = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "Ключ");
		Если Не ЗначениеЗаполнено(СсылкаЗаписиКалендаря) Тогда
			Возврат;
		КонецЕсли;
		
		РеквизитыЗаписиКалендаря = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаЗаписиКалендаря, "Связанная, Предмет");
		Если Не РеквизитыЗаписиКалендаря.Связанная Тогда
			Возврат;
		КонецЕсли;
		
		//ТипПредмета = ТипЗнч(РеквизитыЗаписиКалендаря.Предмет);
		//Если ТипПредмета = Тип("СправочникСсылка.Мероприятия") Тогда
		//	СтандартнаяОбработка = Ложь;
		//	Параметры.Ключ = РеквизитыЗаписиКалендаря.Предмет;
		//	ВыбраннаяФорма = Метаданные.Справочники.Мероприятия.Формы.ФормаЭлемента;
		//ИначеЕсли ТипПредмета = Тип("ДокументСсылка.Отсутствие") Тогда
		//	СтандартнаяОбработка = Ложь;
		//	Параметры.Ключ = РеквизитыЗаписиКалендаря.Предмет;
		//	ВыбраннаяФорма = Метаданные.Документы.Отсутствие.Формы.ФормаДокумента;
		//КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти  


#Область ПрограммныйИнтерфейс

#Область ПраваДоступа

// Возвращает наименования реквизитов, необходимых для определения прав доступа.
//
Функция ПолучитьПоляДоступа() Экспорт
	
	Возврат "Ссылка, Автор, Сотрудник, Связанная, Предмет";
	
КонецФункции

// Проверяет наличие метода.
// 
Функция ЕстьМетодЗаполнитьДескрипторыОбъекта() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Заполняет переданную таблицу дескрипторов объекта.
// 
Процедура ЗаполнитьДескрипторыОбъекта(ОбъектДоступа, ТаблицаДескрипторов, ПротоколРасчетаПрав = Неопределено) Экспорт
	
	ТипПредмета = ТипЗнч(ОбъектДоступа.Предмет);
	
	СтрокиПротокола = Новый Массив;
	
	Если ОбъектДоступа.Связанная И ТипПредмета = Тип("СправочникСсылка.Мероприятия") Тогда
		
		//ЗаполнитьДескрипторыОбъектаОтВладельца(
		//	ОбъектДоступа, ТаблицаДескрипторов, ОбъектДоступа.Предмет);
			
		СтрокиПротокола.Добавить("Права мероприятия");
			
	ИначеЕсли ОбъектДоступа.Связанная И ТипПредмета = Тип("ДокументСсылка.Отсутствие") Тогда
		
		//ДобавитьИндивидуальныйДескриптор(
		//	ОбъектДоступа, ТаблицаДескрипторов, Справочники.РабочиеГруппы.ВсеПользователи, Ложь);
		//
		СтрокиПротокола.Добавить("Права отсутствия");
		
	Иначе
		
		Если ЗначениеЗаполнено(ОбъектДоступа.Автор) Тогда
			
			//ДобавитьИндивидуальныйДескриптор(
			//	ОбъектДоступа, ТаблицаДескрипторов, ОбъектДоступа.Автор, Истина);
			//	
			СтрокиПротокола.Добавить("Автор");
				
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОбъектДоступа.Сотрудник) Тогда
			
			//ДобавитьИндивидуальныйДескриптор(
			//	ОбъектДоступа, ТаблицаДескрипторов, ОбъектДоступа.Сотрудник, Истина);
			
			СтрокиПротокола.Добавить("Сотрудник");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПротоколРасчетаПрав <> Неопределено Тогда
		
		Для Каждого СтрПротокола Из СтрокиПротокола Цикл
			
			Если СтрПротокола = "Права мероприятия" Тогда
				ЗаписьПротокола = Новый Структура("Элемент, Описание",
					ОбъектДоступа.Предмет, НСтр("ru = 'Права мероприятия'"));
			ИначеЕсли СтрПротокола = "Права отсутствия" Тогда
				ЗаписьПротокола = Новый Структура("Элемент, Описание",
					ОбъектДоступа.Предмет, НСтр("ru = 'Права на документ ""Отсутсвтие""'"));
			ИначеЕсли СтрПротокола = "Автор" Тогда
				ЗаписьПротокола = Новый Структура("Элемент, Описание",
					ОбъектДоступа.Автор, НСтр("ru = 'Автор'"));
			ИначеЕсли СтрПротокола = "Сотрудник" Тогда
				ЗаписьПротокола = Новый Структура("Элемент, Описание",
					ОбъектДоступа.Сотрудник, НСтр("ru = 'Сотрудник записи календаря'"));
			КонецЕсли;
			
			ПротоколРасчетаПрав.Добавить(ЗаписьПротокола);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Возвращает таблицу занятости физ. лиц.
//
Функция ПолучитьТаблицуЗанятости(Знач ФизЛица, ДатаНачала, ДатаОкончания, ИсключенияЗанятости) Экспорт
	//
	//УстановитьПривилегированныйРежим(Истина);
	//
	//Если ТипЗнч(ФизЛица) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
	//	ФизЛица = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизЛица);
	//КонецЕсли;
	//
	//КалендариФизЛиц = РаботаСРабочимКалендаремСервер.КалендариФизЛиц(ФизЛица);
	//ФизЛицаКалендарей = РаботаСРабочимКалендаремСервер.ФизЛицаКалендарей(КалендариФизЛиц);
	//
	//Если ИсключенияЗанятости = Неопределено Тогда
	//	МассивИсключенийЗанятости = Новый Массив;
	//ИначеЕсли ТипЗнч(ИсключенияЗанятости) = Тип("Массив") Тогда
	//	СвязанныеЗаписиКалендаря =
	//		Справочники.ЗаписиРабочегоКалендаря.СвязанныеЗаписиКалендаря(ИсключенияЗанятости);
	//	МассивИсключенийЗанятости = СвязанныеЗаписиКалендаря.ВыгрузитьКолонку("Ссылка");
	//	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивИсключенийЗанятости, ИсключенияЗанятости, Истина);
	//Иначе
	//	СвязанныеЗаписиКалендаря =
	//		Справочники.ЗаписиРабочегоКалендаря.СвязанныеЗаписиКалендаря(ИсключенияЗанятости);
	//	МассивИсключенийЗанятости = СвязанныеЗаписиКалендаря.ВыгрузитьКолонку("Ссылка");
	//	МассивИсключенийЗанятости.Добавить(ИсключенияЗанятости);
	//КонецЕсли;
	//
	//ТаблицаЗанятости = Новый ТаблицаЗначений;
	//ТаблицаЗанятости.Колонки.Добавить("ФизическоеЛицо");
	//ТаблицаЗанятости.Колонки.Добавить("ДатаНачала");
	//ТаблицаЗанятости.Колонки.Добавить("ДатаОкончания");
	//ТаблицаЗанятости.Колонки.Добавить("Занят");
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст =
	//	"ВЫБРАТЬ
	//	|	ЗаписиРабочегоКалендаря.Сотрудник КАК Сотрудник,
	//	|	ЗаписиРабочегоКалендаря.ДатаНачала КАК ДатаНачала,
	//	|	ЗаписиРабочегоКалендаря.ДатаОкончания КАК ДатаОкончания,
	//	|	ЗаписиРабочегоКалендаря.Состояние КАК Состояние,
	//	|	ЗаписиРабочегоКалендаря.Связанная КАК Связанная,
	//	|	ЗаписиРабочегоКалендаря.Предмет КАК Предмет,
	//	|	ЗаписиРабочегоКалендаря.ВесьДень КАК ВесьДень
	//	|ИЗ
	//	|	Справочник.ЗаписиРабочегоКалендаря КАК ЗаписиРабочегоКалендаря
	//	|ГДЕ
	//	|	ЗаписиРабочегоКалендаря.Сотрудник В (&КалендариФизЛиц)
	//	|	И ЗаписиРабочегоКалендаря.ДатаНачала < &ДатаОкончания
	//	|	И ЗаписиРабочегоКалендаря.ДатаОкончания > &ДатаНачала
	//	|	И (ЗаписиРабочегоКалендаря.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаписейРабочегоКалендаря.Принято)
	//	|	ИЛИ ЗаписиРабочегоКалендаря.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаписейРабочегоКалендаря.ПодВопросом))
	//	|	И ЗаписиРабочегоКалендаря.ТипЗаписиКалендаря <> ЗНАЧЕНИЕ(Перечисление.ТипЗаписиКалендаря.ПовторяющеесяСобытие)
	//	|	И ЗаписиРабочегоКалендаря.ПометкаУдаления = ЛОЖЬ
	//	|	И НЕ ЗаписиРабочегоКалендаря.Ссылка В (&ИсключенияЗанятости)";
	//
	//Запрос.УстановитьПараметр("КалендариФизЛиц", КалендариФизЛиц);
	//Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	//Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	//Запрос.УстановитьПараметр("ИсключенияЗанятости", МассивИсключенийЗанятости);
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	
	//	ФизЛицаКалендаря = ФизЛицаКалендарей[Выборка.Сотрудник];
	//	
	//	Для Каждого ФизЛицоКалендаря Из ФизЛицаКалендаря Цикл
	//		
	//		НоваяСтрока = ТаблицаЗанятости.Добавить();
	//		НоваяСтрока.ФизическоеЛицо = ФизЛицоКалендаря;
	//		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	//		
	//		Если Выборка.Связанная
	//			И Не Выборка.ВесьДень
	//			И (ТипЗнч(Выборка.Предмет) = Тип("СправочникСсылка.Мероприятия")
	//				Или ТипЗнч(Выборка.Предмет) = Тип("ДокументСсылка.Отсутствие")) Тогда
	//			
	//			НоваяСтрока.ДатаНачала = РаботаСЧасовымиПоясами.ПривестиКМестномуВремени(Выборка.ДатаНачала);
	//			НоваяСтрока.ДатаОкончания = РаботаСЧасовымиПоясами.ПривестиКМестномуВремени(Выборка.ДатаОкончания);
	//			
	//		ИначеЕсли Не Выборка.Связанная И Не Выборка.ВесьДень Тогда
	//			
	//			ПользовательСотрудника = Сотрудники.ПользовательСотрудника(Выборка.Сотрудник);
	//			
	//			Если ЗначениеЗаполнено(ПользовательСотрудника) Тогда
	//			
	//				НоваяСтрока.ДатаНачала = 
	//					РаботаСЧасовымиПоясами.ПривестиКМестномуВремени(
	//						РаботаСЧасовымиПоясами.ПривестиМестноеВремяПользователяКВремениСеанса(
	//							Выборка.ДатаНачала,
	//							ПользовательСотрудника));
	//				НоваяСтрока.ДатаОкончания = 
	//					РаботаСЧасовымиПоясами.ПривестиКМестномуВремени(
	//						РаботаСЧасовымиПоясами.ПривестиМестноеВремяПользователяКВремениСеанса(
	//							Выборка.ДатаОкончания,
	//							ПользовательСотрудника));
	//			КонецЕсли;
	//		
	//		КонецЕсли;
	//		
	//		НоваяСтрока.Занят = ПолучитьСоответствующееСостояниеЗанятости(
	//			Выборка.Состояние,
	//			Выборка.Связанная,
	//			Выборка.Предмет);
	//		
	//	КонецЦикла;
	//	
	//КонецЦикла;
	//
	//Запрос = Новый Запрос();
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ЗаписиРабочегоКалендаря.ДатаНачала,
	//	|	ЗаписиРабочегоКалендаря.ДатаОкончания,
	//	|	ЗаписиРабочегоКалендаря.ТипЗаписиКалендаря,
	//	|	ЗаписиРабочегоКалендаря.ИсключенияПовторения.(
	//	|		ДатаИсключения,
	//	|		ЗаписьИсключения) КАК ИсключенияПовторения,
	//	|	ЗаписиРабочегоКалендаря.ПовторениеПоДням.(
	//	|		ДеньНедели,
	//	|		НомерВхождения) КАК ПовторениеПоДням,
	//	|	ЗаписиРабочегоКалендаря.ДатаНачалаПовторения,
	//	|	ЗаписиРабочегоКалендаря.ДатаОкончанияПовторения,
	//	|	ЗаписиРабочегоКалендаря.ИнтервалПовторения,
	//	|	ЗаписиРабочегоКалендаря.КоличествоПовторов,
	//	|	ЗаписиРабочегоКалендаря.ПовторениеПоДнямМесяца,
	//	|	ЗаписиРабочегоКалендаря.ПовторениеПоМесяцам,
	//	|	ЗаписиРабочегоКалендаря.ТипЗаписиКалендаря КАК ТипЗаписиКалендаря1,
	//	|	ЗаписиРабочегоКалендаря.ЧастотаПовторения,
	//	|	ЗаписиРабочегоКалендаря.Состояние,
	//	|	ЗаписиРабочегоКалендаря.Сотрудник КАК Сотрудник,
	//	|	ЗаписиРабочегоКалендаря.Связанная,
	//	|	ЗаписиРабочегоКалендаря.Предмет
	//	|ИЗ
	//	|	Справочник.ЗаписиРабочегоКалендаря КАК ЗаписиРабочегоКалендаря
	//	|ГДЕ
	//	|	ЗаписиРабочегоКалендаря.Сотрудник В (&КалендариФизЛиц)
	//	|	И ЗаписиРабочегоКалендаря.ДатаОкончанияПовторения >= &ДатаНачала
	//	|	И ЗаписиРабочегоКалендаря.ДатаНачалаПовторения < &ДатаОкончания
	//	|	И (ЗаписиРабочегоКалендаря.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаписейРабочегоКалендаря.Принято)
	//	|	ИЛИ ЗаписиРабочегоКалендаря.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаписейРабочегоКалендаря.ПодВопросом))
	//	|	И ЗаписиРабочегоКалендаря.ТипЗаписиКалендаря = ЗНАЧЕНИЕ(Перечисление.ТипЗаписиКалендаря.ПовторяющеесяСобытие)
	//	|	И ЗаписиРабочегоКалендаря.ПометкаУдаления = ЛОЖЬ
	//	|	И НЕ ЗаписиРабочегоКалендаря.Ссылка В (&ИсключенияЗанятости)
	//	|
	//	|ОБЪЕДИНИТЬ ВСЕ
	//	|
	//	|ВЫБРАТЬ
	//	|	ЗаписиРабочегоКалендаря.ДатаНачала,
	//	|	ЗаписиРабочегоКалендаря.ДатаОкончания,
	//	|	ЗаписиРабочегоКалендаря.ТипЗаписиКалендаря,
	//	|	ЗаписиРабочегоКалендаря.ИсключенияПовторения.(
	//	|		ДатаИсключения,
	//	|		ЗаписьИсключения),
	//	|	ЗаписиРабочегоКалендаря.ПовторениеПоДням.(
	//	|		ДеньНедели,
	//	|		НомерВхождения),
	//	|	ЗаписиРабочегоКалендаря.ДатаНачалаПовторения,
	//	|	ЗаписиРабочегоКалендаря.ДатаОкончанияПовторения,
	//	|	ЗаписиРабочегоКалендаря.ИнтервалПовторения,
	//	|	ЗаписиРабочегоКалендаря.КоличествоПовторов,
	//	|	ЗаписиРабочегоКалендаря.ПовторениеПоДнямМесяца,
	//	|	ЗаписиРабочегоКалендаря.ПовторениеПоМесяцам,
	//	|	ЗаписиРабочегоКалендаря.ТипЗаписиКалендаря,
	//	|	ЗаписиРабочегоКалендаря.ЧастотаПовторения,
	//	|	ЗаписиРабочегоКалендаря.Состояние,
	//	|	ЗаписиРабочегоКалендаря.Сотрудник,
	//	|	ЗаписиРабочегоКалендаря.Связанная,
	//	|	ЗаписиРабочегоКалендаря.Предмет
	//	|ИЗ
	//	|	Справочник.ЗаписиРабочегоКалендаря КАК ЗаписиРабочегоКалендаря
	//	|ГДЕ
	//	|	ЗаписиРабочегоКалендаря.Сотрудник В (&КалендариФизЛиц)
	//	|	И ЗаписиРабочегоКалендаря.ДатаОкончанияПовторения = ДАТАВРЕМЯ(1, 1, 1)
	//	|	И ЗаписиРабочегоКалендаря.ДатаНачалаПовторения < &ДатаОкончания
	//	|	И (ЗаписиРабочегоКалендаря.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаписейРабочегоКалендаря.Принято)
	//	|	ИЛИ ЗаписиРабочегоКалендаря.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаписейРабочегоКалендаря.ПодВопросом))
	//	|	И ЗаписиРабочегоКалендаря.ТипЗаписиКалендаря = ЗНАЧЕНИЕ(Перечисление.ТипЗаписиКалендаря.ПовторяющеесяСобытие)
	//	|	И ЗаписиРабочегоКалендаря.ПометкаУдаления = ЛОЖЬ
	//	|	И НЕ ЗаписиРабочегоКалендаря.Ссылка В (&ИсключенияЗанятости)";
	//
	//Запрос.УстановитьПараметр("КалендариФизЛиц", КалендариФизЛиц);
	//Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	//Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	//Запрос.УстановитьПараметр("ИсключенияЗанятости", МассивИсключенийЗанятости);
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	
	//	ПроверяемаяДата = НачалоДня(ДатаНачала);
	//	Пока ПроверяемаяДата < ДатаОкончания Цикл
	//		
	//		СтруктураПравилаПовторения = РаботаСРабочимКалендаремСервер.ПолучитьСтруктуруПравилаПовторения();
	//		ЗаполнитьЗначенияСвойств(СтруктураПравилаПовторения, Выборка);
	//		СтруктураПравилаПовторения.ИсключенияПовторения = Выборка.ИсключенияПовторения.Выгрузить();
	//		СтруктураПравилаПовторения.ПовторениеПоДням = Выборка.ПовторениеПоДням.Выгрузить();
	//		
	//		Если РаботаСРабочимКалендаремСервер.ДатаУдовлетворяетПравилуПовторения(
	//				ПроверяемаяДата, СтруктураПравилаПовторения) Тогда
	//			
	//			ДатаНачалаПоПравилуПовторения = НачалоДня(ПроверяемаяДата) + (Выборка.ДатаНачала - НачалоДня(Выборка.ДатаНачала));
	//			ДатаОкончанияПоПравилуПовторения = НачалоДня(ПроверяемаяДата) + (Выборка.ДатаОкончания - НачалоДня(Выборка.ДатаНачала));
	//			Если ДатаНачалаПоПравилуПовторения < ДатаОкончания
	//				И ДатаОкончанияПоПравилуПовторения > ДатаНачала Тогда
	//				
	//				ФизЛицаКалендаря = ФизЛицаКалендарей[Выборка.Сотрудник];
	//				
	//				Для Каждого ФизЛицоКалендаря Из ФизЛицаКалендаря Цикл
	//					
	//					НоваяСтрока = ТаблицаЗанятости.Добавить();
	//					НоваяСтрока.ФизическоеЛицо = ФизЛицоКалендаря;
	//					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	//					
	//					ПользовательСотрудника = Сотрудники.ПользовательСотрудника(Выборка.Сотрудник);
	//					
	//					Если ЗначениеЗаполнено(ПользовательСотрудника) Тогда
	//					
	//						НоваяСтрока.ДатаНачала = 
	//							РаботаСЧасовымиПоясами.ПривестиКМестномуВремени(
	//								РаботаСЧасовымиПоясами.ПривестиМестноеВремяПользователяКВремениСеанса(
	//									ДатаНачалаПоПравилуПовторения,
	//									ПользовательСотрудника));
	//						НоваяСтрока.ДатаОкончания = 
	//							РаботаСЧасовымиПоясами.ПривестиКМестномуВремени(
	//								РаботаСЧасовымиПоясами.ПривестиМестноеВремяПользователяКВремениСеанса(
	//									ДатаОкончанияПоПравилуПовторения,
	//									ПользовательСотрудника));
	//									
	//					КонецЕсли;
	//					
	//					НоваяСтрока.Занят = ПолучитьСоответствующееСостояниеЗанятости(
	//						Выборка.Состояние,
	//						Выборка.Связанная,
	//						Выборка.Предмет);
	//					
	//				КонецЦикла;
	//				
	//			КонецЕсли;
	//		КонецЕсли;
	//		
	//		ПроверяемаяДата = ПроверяемаяДата + 86400; // 86400 - число секунд в сутках
	//		
	//	КонецЦикла;
	//	
	//КонецЦикла;
	//
	//ТаблицаЗанятости.Свернуть("ФизическоеЛицо, ДатаНачала, ДатаОкончания, Занят");
	//
	//Возврат ТаблицаЗанятости;
	//
КонецФункции

// Устаревшее. Следует использовать РеквизитыЗаписиКалендаря().
// Возвращает структуру реквизитов записи календаря.
Функция ПолучитьСтруктуруРеквизитовЗаписиКалендаря() Экспорт
	
	Возврат РеквизитыЗаписиКалендаря();
	
КонецФункции

// Возвращает структуру реквизитов записи календаря.
// 
// Возвращаемое значение:
//  Структура - Реквизиты записи календаря.
//   * Ссылка - СправочникСсылка.ЗаписиРабочегоКалендаря - Ссылка на запись календаря.
//   * Наименование - Строка - Первая строка описания.
//   * Описание - Строка - Описание без первой строки.
//   * Сотрудник - СправочникСсылка.Сотрудники - Сотрудник.
//   * Автор - СправочникСсылка.Сотрудники - Автор.
//   * ДатаНачала - Дата - Дата начала.
//   * ДатаОкончания - Дата - Дата окончания.
//   * ВесьДень - Булево - Признак того, что запись на весь день.
//   * Повторять - Строка - Представление описания повторения.
//   * Предмет - ЛюбаяСсылка - Ссылка на предмет записи календаря.
//
Функция РеквизитыЗаписиКалендаря(ЗаписьКалендаря = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ЗаписьКалендаря) Тогда
		ЗаписьКалендаряОбъект = ЗаписьКалендаря.ПолучитьОбъект();
		РеквизитыЗаписиКалендаря = ЗаписьКалендаряОбъект.Реквизиты();
	Иначе
		РеквизитыЗаписиКалендаря = Новый Структура(
			"Ссылка, Описание, Сотрудник, ДатаНачала, ДатаОкончания,
			|ВесьДень, Повторять, Предмет, Наименование, Автор");
		РеквизитыЗаписиКалендаря.Повторять = "";
	КонецЕсли;
	
	Возврат РеквизитыЗаписиКалендаря;
	
КонецФункции

// Возвращает связанные записи календаря.
//
// Параметры:
//  Предмет - ЛюбаяСсылка, Массив - Предмет.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Связанные записи календаря.
//
Функция СвязанныеЗаписиКалендаря(Предмет) Экспорт
	
	Если ТипЗнч(Предмет) = Тип("Массив") Тогда
		Предметы = Предмет;
	ИначеЕсли ЗначениеЗаполнено(Предмет) Тогда
		Предметы = Новый Массив;
		Предметы.Добавить(Предмет);
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗаписиРабочегоКалендаря.Ссылка КАК Ссылка,
		|	ЗаписиРабочегоКалендаря.Сотрудник КАК Сотрудник
		|ИЗ
		|	Справочник.ЗаписиРабочегоКалендаря КАК ЗаписиРабочегоКалендаря
		|ГДЕ
		|	ЗаписиРабочегоКалендаря.Предмет В (&Предметы)
		|	И ЗаписиРабочегоКалендаря.Связанная = ИСТИНА
		|	И ЗаписиРабочегоКалендаря.ПометкаУдаления = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("Предметы", Предметы);
	
	СвязанныеЗаписиКалендаря = Запрос.Выполнить().Выгрузить();
	
	Возврат СвязанныеЗаписиКалендаря;
	
КонецФункции

//// Возвращает связанную запись календаря для указанного сотрудника.
////
//// Параметры:
////  Предмет - ЛюбаяСсылка, Массив - Предмет.
////  Сотрудник - СправочникСсылка.Сотрудники - Сотрудник.
////
//// Возвращаемое значение:
////  СправочникСсылка.ЗаписиРабочегоКалендаря - Связанная запись календаря.
////
//Функция СвязаннаяЗаписьКалендаря(Предмет, Знач Сотрудник) Экспорт
//	
//	СвязаннаяЗаписьКалендаря = Справочники.ЗаписиРабочегоКалендаря.ПустаяСсылка();
//	Если Не ЗначениеЗаполнено(Предмет) Тогда
//		Возврат СвязаннаяЗаписьКалендаря;
//	КонецЕсли;
//	
//	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
//		Сотрудник = Сотрудники.ОсновнойСотрудник();
//	КонецЕсли;
//	
//	Запрос = Новый Запрос(
//		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//		|	ЗаписиРабочегоКалендаря.Ссылка КАК Ссылка
//		|ИЗ
//		|	Справочник.ЗаписиРабочегоКалендаря КАК ЗаписиРабочегоКалендаря
//		|ГДЕ
//		|	ЗаписиРабочегоКалендаря.Предмет = &Предмет
//		|	И ЗаписиРабочегоКалендаря.Сотрудник = &Сотрудник
//		|	И ЗаписиРабочегоКалендаря.Связанная = ИСТИНА
//		|	И ЗаписиРабочегоКалендаря.ПометкаУдаления = ЛОЖЬ");
//	
//	Запрос.УстановитьПараметр("Предмет", Предмет);
//	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
//	
//	Результат = Запрос.Выполнить();
//	Если Не Результат.Пустой() Тогда
//		Выборка = Результат.Выбрать();
//		Выборка.Следующий();
//		СвязаннаяЗаписьКалендаря = Выборка.Ссылка;
//	КонецЕсли;
//	
//	Возврат СвязаннаяЗаписьКалендаря;
//	
//КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает соответствующее состояние занятости
//
// Параметры:
//  СостояниеЗаписиРабочегоКалендаря - ПеречислениеСсылка.СостоянияЗаписейРабочегоКалендаря - Состояние записи рабочего календаря.
//  Связанная - Булево - Запись календаря является связанной.
//  Предмет - СправочникСсылка, ДокументСсылка - Предмет записи календаря.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СостоянияЗанятости - Состояние занятости.
//
Функция ПолучитьСоответствующееСостояниеЗанятости(СостояниеЗаписиРабочегоКалендаря, Связанная, Предмет)
	
	СостоянияЗанятости = Неопределено;
	
	Если Связанная И ТипЗнч(Предмет) = Тип("ДокументСсылка.Отсутствие")
		И СостояниеЗаписиРабочегоКалендаря = Перечисления.СостоянияЗаписейРабочегоКалендаря.Принято Тогда
		СостоянияЗанятости = ?(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет, "БудуРазбиратьЗадачи"),
			Перечисления.СостоянияЗанятости.Доступен,
			Перечисления.СостоянияЗанятости.Отсутствует);
	ИначеЕсли СостояниеЗаписиРабочегоКалендаря = Перечисления.СостоянияЗаписейРабочегоКалендаря.Принято Тогда
		СостоянияЗанятости = Перечисления.СостоянияЗанятости.Занят;
	ИначеЕсли СостояниеЗаписиРабочегоКалендаря = Перечисления.СостоянияЗаписейРабочегоКалендаря.Отклонено Тогда
		СостоянияЗанятости = Перечисления.СостоянияЗанятости.Доступен;
	ИначеЕсли СостояниеЗаписиРабочегоКалендаря = Перечисления.СостоянияЗаписейРабочегоКалендаря.ПодВопросом
		Или Не ЗначениеЗаполнено(СостояниеЗаписиРабочегоКалендаря) Тогда
		СостоянияЗанятости = Перечисления.СостоянияЗанятости.ПодВопросом;
	КонецЕсли;
	
	Возврат СостоянияЗанятости;
	
КонецФункции

#КонецОбласти

#КонецЕсли
